{
    "sourceFile": "app/Http/Controllers/FileController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 20,
            "patches": [
                {
                    "date": 1753309035590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753316627971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -731,8 +731,10 @@\n \n         // Obtiene las rutas de carpeta según el folio\n         $subCarpetas = FileControl::getRutaFolio($codFolio); // devuelve un array de rutas\n \n+        print_r($subCarpetas);\n+        /*\n         if (count($subCarpetas) !== count($imagenes)) {\n             return response()->json([\n                 'error' => 'El número de imágenes no coincide con el número de rutas esperadas para el folio.'\n             ], 400);\n@@ -763,8 +765,9 @@\n \n         return response()->json([\n             'message' => 'Folio guardado exitosamente.',\n         ]);\n+        */\n     }\n \n \n     //DE EVER\n"
                },
                {
                    "date": 1753316937077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -710,9 +710,12 @@\n     //         return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n     //     }\n     // }\n \n-\n+    public function saveFolioPersona2()\n+    {\n+        echo \"hola\";\n+    }\n     public function saveFolioPersona(Request $request)\n     {\n         $request->validate([\n             'fecha_emision' => 'required|date',\n"
                },
                {
                    "date": 1753327896781,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1057 @@\n+<?php\n+\n+namespace App\\Http\\Controllers;\n+\n+use App\\Helpers\\PdfHelper;\n+use App\\Helpers\\ImagenHelper;\n+use Barryvdh\\Snappy\\Facades\\SnappyPdf;\n+use Illuminate\\Http\\Request;\n+use App\\Models\\FileControl;\n+use Illuminate\\Support\\Facades\\App;\n+use Illuminate\\Support\\Facades\\Log;\n+use Illuminate\\Support\\Facades\\Http;\n+use Illuminate\\Support\\Str;\n+use Illuminate\\Support\\Facades\\File;\n+use Illuminate\\Support\\Facades\\Storage;\n+use ZipArchive;\n+\n+class FileController extends Controller{\n+    public function index(){\n+        $personal = FileControl::getPersonal();\n+        //$cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientesLegajos();\n+        $sucursales = FileControl::getSucursales();\n+\n+        return view('file_control.chargefile', compact('personal', 'clientes', 'sucursales'));\n+    }\n+\n+    public function getCargosXCliente(Request $request){\n+        $cliente = $request->input('cliente');\n+        $cargos = FileControl::getCargosXCliente($cliente);\n+        return response()->json($cargos);\n+    }\n+\n+    public function ViewDashboard(){\n+        /*$personal = FileControl::getPersonal();\n+        $cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientes();\n+        $sucursales = FileControl::getSucursales();*/\n+\n+        return view('file_control.dashboard'/*, compact('personal', 'cargos', 'clientes', 'sucursales')*/);\n+    }\n+\n+    public function getPersonal(Request $request){\n+        $personal = FileControl::getPersonal();\n+        return response()->json($personal);\n+    }\n+\n+    public function getDocumentosXPersonal($codPersonal){\n+        $docs_personal = FileControl::getDocsXPersona($codPersonal);\n+        return response()->json($docs_personal);\n+    }\n+\n+    public function getFoliosXPersonas(Request $request){\n+        $personas = $request->personas;\n+        $folios = $request->folios;\n+        $resultados = [];\n+        //Averiguando la sucursal de la persona\n+\n+\n+        foreach ($personas as $persona) {\n+            $sucursal = FileControl::getSucursalXPersona($persona['CODI_PERS']);\n+            foreach ($folios as $folio) {\n+                $datosFolioPersona = FileControl::getFoliosInfoPersona($persona['CODI_PERS'], $folio['codigo']);\n+                foreach ($datosFolioPersona as $dato) {\n+                    $resultados[] = [\n+                        //'persona' => $persona['personal'],\n+                        'persona' => $dato->personal ?? null,\n+                        'nroDoc' => $dato->nroDoc ?? null,\n+                        'codPersonal' => $persona['CODI_PERS'],\n+                        'folio' => $folio['nombre'],\n+                        'sucursal' => $sucursal,\n+                        'ruta' => $dato->ruta_archivo ?? null,\n+                        'ancho' => $dato->ancho ?? null,\n+                        'hojas' => $dato->cantidad_hojas ?? null,\n+                        'documento' => $dato->documento ?? null,\n+                        'cargo' => $dato->cargo ?? null,\n+                        'es_formato' => $dato->es_formato ?? null,\n+                    ];\n+                }\n+                /*$resultados[] = [\n+                    'persona' => $persona['personal'],\n+                    'folio' => $folio['nombre'],\n+                    'ruta' => $datosFolioPersona[0]->ruta_archivo ?? null,\n+                ];*/\n+            }\n+        }\n+        return response()->json($resultados);\n+    }\n+\n+    public function getFoliosXPersona_uno(Request $request){\n+        $persona = $request->input('codPersona');\n+        $folios = $request->folios;\n+        $resultados = [];\n+\n+        $sucursal = FileControl::getSucursalXPersona($persona);\n+\n+        foreach ($folios as $folio) {\n+            $datosFolioPersona = FileControl::getFoliosInfoPersona($persona, $folio['codigo']);\n+            foreach ($datosFolioPersona as $dato) {\n+                $resultados[] = [\n+                    'persona' => $dato->personal ?? null,\n+                    'nroDoc' => $dato->nroDoc ?? null,\n+                    'codPersonal' => $persona,\n+                    'folio' => $folio['nombre'],\n+                    'sucursal' => $sucursal,\n+                    'ruta' => $dato->ruta_archivo ?? null,\n+                    'ancho' => $dato->ancho ?? null,\n+                    'hojas' => $dato->cantidad_hojas ?? null,\n+                    'documento' => $dato->documento ?? null,\n+                    'cargo' => $dato->cargo ?? null,\n+                    'es_formato' => $dato->es_formato ?? null,\n+                ];\n+            }\n+        }\n+\n+        return response()->json($resultados);\n+    }\n+\n+    // public function generarPDFsPorPersona(Request $request){\n+    //     $resultados = $request->input('resultados');\n+\n+    //     // Agrupar todos los datos por persona\n+    //     $agrupados = [];\n+    //     foreach ($resultados as $item) {\n+    //         $cod = $item['codPersonal'];\n+    //         $agrupados[$cod][] = $item;\n+    //     }\n+\n+    //     $carpetaTemporal = storage_path('app/temp_pdfs');\n+    //     if (!File::exists($carpetaTemporal)) {\n+    //         File::makeDirectory($carpetaTemporal, 0777, true, true);\n+    //     }\n+\n+    //     $pdfsGenerados = [];\n+\n+    //     foreach ($agrupados as $codPersonal => $documentosPersona) {\n+    //         $persona = $documentosPersona[0]['persona'] ?? 'persona_sin_nombre';\n+\n+    //         // Carátula: datos únicos de persona\n+    //         $caratula = [\n+    //             'persona' => $persona,\n+    //             'codPersonal' => $codPersonal,\n+    //             'sucursal' => $documentosPersona[0]['sucursal'] ?? '',\n+    //             'cargo' => $documentosPersona[0]['cargo'] ?? '',\n+    //         ];\n+\n+    //         // Separar documentos: escaneados vs formatos Blade\n+    //         $urls = [];\n+    //         $itemsFinales = [];\n+\n+    //         foreach ($documentosPersona as $doc) {\n+    //             if (!empty($doc['ruta'])) {\n+    //                 $urls[] = [\n+    //                     'ruta' => $doc['ruta'],\n+    //                     'codPersonal' => $codPersonal,\n+    //                     'ancho' => $doc['ancho'],\n+    //                     'hojas' => $doc['hojas'],\n+    //                     'documento' => $doc['documento'],\n+    //                     'es_formato' => $doc['es_formato'],\n+    //                 ];\n+    //             }\n+\n+    //             if ($doc['es_formato'] == 1) {\n+    //                 $itemsFinales[] = [\n+    //                     'es_formato' => 1,\n+    //                     'codPersonal' => $codPersonal,\n+    //                     'documento' => $doc['documento'],\n+    //                     'nombre_vista' => $this->obtenerNombreVista($doc),\n+    //                     'datos' => $doc,\n+    //                     'firma' => public_path('temp_legajos') . '/FIRMAS/PERSONAL/' . $codPersonal . '.jpg',\n+    //                     'huella' => public_path('temp_legajos') . '/HUELLAS_DIGITALES/PERSONAL/' . $codPersonal . '.jpg',\n+    //                 ];\n+\n+    //                 // Descargar imágenes del formato (firma y huella)\n+    //                 ImagenHelper::descargarImagenesFormato($codPersonal);\n+    //             }\n+    //         }\n+\n+    //         // Descargar imágenes escaneadas\n+    //         $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n+\n+    //         foreach ($rutasLocales as $img) {\n+    //             $itemsFinales[] = [\n+    //                 'es_formato' => 0,\n+    //                 'codPersonal' => $codPersonal,\n+    //                 'ruta' => $img['ruta'],\n+    //                 'documento' => $img['documento'],\n+    //                 'hojas' => $img['hojas'],\n+    //                 'ancho' => $img['ancho'],\n+    //             ];\n+    //         }\n+\n+    //         // Render PDF de esta persona\n+    //         $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n+    //             'personas' => [$caratula], // vista espera array\n+    //             'resultados' => $documentosPersona,\n+    //             'imagenes' => $rutasLocales,\n+    //             'items' => $itemsFinales,\n+    //         ])->setOption('enable-local-file-access', true);\n+\n+    //         $nombreArchivo = 'PDF_' . Str::slug($persona) . '_' . $codPersonal . '.pdf';\n+    //         $rutaArchivo = $carpetaTemporal . '/' . $nombreArchivo;\n+\n+    //         $pdf->save($rutaArchivo);\n+    //         $pdfsGenerados[] = $rutaArchivo;\n+    //     }\n+\n+    //     // Comprimir todo en ZIP\n+    //     $zipPath = storage_path('app/documentos_por_persona.zip');\n+    //     $zip = new \\ZipArchive();\n+\n+    //     if ($zip->open($zipPath, \\ZipArchive::CREATE | \\ZipArchive::OVERWRITE) === true) {\n+    //         foreach ($pdfsGenerados as $archivo) {\n+    //             $zip->addFile($archivo, basename($archivo));\n+    //         }\n+    //         $zip->close();\n+    //     }\n+\n+    //     return response()->download($zipPath)->deleteFileAfterSend(true);\n+    // }\n+\n+    public function generarPDF_env(Request $request){\n+        echo \"Hola\";\n+    }\n+\n+    public function pdf_vacio()\n+    {\n+        // Aquí cargas una vista muy simple (puedes crear un blade vacío o con texto simple)\n+        $pdf = SnappyPdf::loadView('file_control.pdf.reporte_vacio');\n+\n+        // Lo envías para que se descargue (o inline si quieres verlo en navegador)\n+        return $pdf->inline('reporte_vacio.pdf');\n+    }\n+\n+\n+    public function generarPDF(Request $request){\n+        $resultados = $request->input('resultados');\n+        //dd($resultados);\n+        //exit;\n+        //Agrupar los datos para mostrar en la carátula\n+        $unicos = [];\n+\n+        $nombreNuevo = 'Reporte';\n+\n+        foreach ($resultados as $item) {\n+            $clave = $item['persona'] . '|' . $item['sucursal'] . '|' . $item['codPersonal'] . '|' . $item['cargo'];\n+            if(!isset($unicos[$clave])) {\n+                $unicos[$clave] = [\n+                    'persona' => $item['persona'],\n+                    'codPersonal' => $item['codPersonal'],\n+                    'sucursal' => $item['sucursal'],\n+                    'cargo' => $item['cargo'],\n+                ];\n+\n+\n+            }\n+\n+             $nombreNuevo = $item['codPersonal'].'_'.$item['persona'] . '_' . date('Ymd_Hi');\n+        }\n+\n+        $personasUnicas = array_values($unicos);\n+\n+        //Para los FORMATOS\n+        // $formatosBlade = [\n+        //     'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n+        //     'DECLARACION JURADA ' => 'file_control.pdf.declaracion_jurada',\n+        // ];\n+\n+        $urls = [];\n+\n+        foreach ($resultados as $resultado) {\n+            if (!empty($resultado['ruta']) && !empty($resultado['codPersonal'])) {\n+                $urls[] = [\n+                    'ruta' => $resultado['ruta'],\n+                    'codPersonal' => $resultado['codPersonal'],\n+                    'ancho' => $resultado['ancho'],\n+                    'hojas' => $resultado['hojas'],\n+                    'documento' => $resultado['documento'],\n+                    'es_formato' => $resultado['es_formato'],\n+                ];\n+            }\n+        };\n+\n+        $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n+\n+        $itemsFinales = [];\n+        //Los que tienen imagen en ruta\n+        foreach ($rutasLocales as $item) {\n+            $itemsFinales[] = [\n+                'es_formato' => $item['es_formato'],\n+                'codPersonal' => $item['codPersonal'],\n+                'ruta' => $item['ruta'],\n+                'documento' => $item['documento'],\n+                'hojas' => $item['hojas'],\n+                'ancho' => $item['ancho'],\n+            ];\n+        }\n+\n+        // Los que deben renderizar una vista Blade porque son formatos (es_formato == 1)\n+        foreach ($resultados as $resultado) {\n+            if ($resultado['es_formato'] == 1) {\n+                $itemsFinales[] = [\n+                    'es_formato' => $resultado['es_formato'],\n+                    'codPersonal' => $resultado['codPersonal'],\n+                    'documento' => $resultado['documento'],\n+                    'nombre_vista' => $this->obtenerNombreVista($resultado), // Función que defines\n+                    'datos' => $resultado,\n+                    'firma' => public_path('temp_legajos').'/FIRMAS/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n+                    'huella' => public_path('temp_legajos').'/HUELLAS_DIGITALES/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n+                ];\n+                //Hacer la copia local de la FIRMA y HUELLA DIGITAL\n+                $rutasLocalesFormato = ImagenHelper::descargarImagenesFormato($resultado['codPersonal']);\n+            }\n+        }\n+\n+        //print_r($itemsFinales);\n+        $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n+            'personas' => $personasUnicas,\n+            'resultados' => $resultados,\n+            'imagenes' => $rutasLocales,\n+            'items' => $itemsFinales,\n+        ])->setOption('enable-local-file-access', true);\n+\n+        return response()->streamDownload(function () use ($pdf) {\n+            echo $pdf->output();\n+        }, $nombreNuevo . '.pdf', [\n+            'Content-Type' => 'application/pdf',\n+            'X-Nombre-Archivo' => $nombreNuevo . '.pdf', // <- aquí\n+        ]);\n+    }\n+\n+    public function obtenerNombreVista($resultado) {\n+        $mapa = [\n+            'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n+            'DECLARACION JURADA DE CUMPLIMIENTO DE DISPOSICIONES' => 'file_control.pdf.declaracion_jurada',\n+            'EVALUACION DEL POSTULANTE' => 'file_control.pdf.evaluacion_postulante',\n+            'COMPROMISO DE CONFIABILIDAD' => 'file_control.pdf.compromiso_confidencialidad',\n+            'CUMPLIMIENTO DE cumpliDISPOSICION' => 'file_control.pdf.dj_complumiento_disposicion',\n+            'ESTUDIO DE SEGURIDAD DE TRABAJADORES' => 'file_control.pdf.dj_complumiento_disposicion',\n+            'VISITA DOMICILIARIA' => 'file_control.pdf.visita_domiciliaria_concluciones'\n+        ];\n+\n+        return $mapa[$resultado['documento']] ?? null;\n+    }\n+\n+    public function generarReporteConsulta(Request $request){\n+        $codigo =  $request->input('valor');\n+        $data = FileControl::getReporteFiltro($codigo);\n+        return response()->json($data);\n+    }\n+\n+\n+    public function generarPDF2(Request $request) {\n+        $resultados = $request->input('resultados');\n+        $html = '';\n+\n+        $vistas = [\n+            'file_control.pdf.evaluacion-postulante',\n+            'file_control.pdf.declaracion-jurada',\n+            'file_control.pdf.acta_compromiso',\n+            'file_control.pdf.compromiso_confidencialidad',\n+            'file_control.pdf.dj_cumplimiento_disposicion',\n+            'file_control.pdf.estudio_seguridad_empleado',\n+            'file_control.pdf.estudio_seguridad_empleado_2',\n+            'file_control.pdf.visita_domiciliaria',\n+            'file_control.pdf.visita_domiciliaria_concluciones',\n+        ];\n+\n+        foreach ($vistas as $vista) {\n+\n+            $html .= view($vista, [\n+                'resultados' => $resultados\n+            ])->render();\n+\n+            $html .= '<div style=\"page-break-after: always;\"></div>';\n+        }\n+\n+        $pdf = SnappyPdf::loadHTML($html)->setOption('enable-local-file-access', true);\n+\n+        return response($pdf->inline('reporte_completo.pdf'))->header('Content-Type', 'application/pdf');\n+    }\n+\n+    public function getAllCargo()\n+    {\n+        $data = FileControl::getAllCargo();\n+        return response()->json($data);\n+    }\n+\n+    public function getClientes(){\n+        $data = FileControl::getClientes();\n+        return response()->json($data);\n+    }\n+\n+    public function getClientesLegajos(){\n+        $data = FileControl::getClientesLegajos();\n+        return response()->json($data);\n+    }\n+\n+    public function getLegajos(Request $request)\n+    {\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+        $codPersonal = $request->input('codigo');\n+\n+        $legajos = FileControl::getLegajos($cliente, $cargo, $codPersonal);\n+        return response()->json($legajos);\n+    }\n+\n+    public function getFoliosClienteCargo(Request $request){\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+\n+        $legajos = FileControl::getFoliosClienteCargo($cliente, $cargo);\n+        return response()->json($legajos);\n+    }\n+\n+    public function getFoliosXLegajo_comercial($codCliente, $codCargo){\n+        $folios = FileControl::getFoliosXLegajo_comercial($codCliente, $codCargo);\n+        return response()->json($folios);\n+    }\n+\n+    public function getCargos(){\n+        $cargos = FileControl::getCargos();\n+        return response()->json($cargos);\n+    }\n+\n+    public function getFolios(){\n+        $folios = FileControl::getFolios();\n+        return response()->json($folios);\n+    }\n+\n+    public function ViewCargo()\n+    {\n+        $todos = \\DB::table('sw_cargos')\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $operativo = \\DB::table('sw_cargos')\n+                    ->where('cod_tipo', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $administrativo = \\DB::table('sw_cargos')\n+                    ->where('cod_tipo', 2)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        return view('file_control.cargo',compact('todos', 'operativo', 'administrativo'));\n+    }\n+\n+    public function ViewLegajo()\n+    {\n+         $notif = FileControl::listarNotificaciones();\n+        return view('file_control.legajos', [\n+            'notify' => $notif\n+        ]);\n+    }\n+\n+    public function ViewFolios()\n+    {\n+        $periodos = FileControl::getPeriodos();\n+        $todos = \\DB::table('sw_folios')\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $principal = \\DB::table('sw_folios')\n+                    ->where('obligatorio', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $adicional = \\DB::table('sw_folios')\n+                    ->where('obligatorio', 0)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $documento = \\DB::table('sw_folios')\n+                    ->where('tipo', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $formato = \\DB::table('sw_folios')\n+                    ->where('tipo', 2)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $certificado = \\DB::table('sw_folios')\n+                    ->where('tipo', 3)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+\n+        return view('file_control.folios', compact('periodos', 'todos', 'principal', 'adicional', 'documento', 'formato', 'certificado'));\n+    }\n+\n+    public function ViewBusquedaLegajo()\n+    {\n+        $personal = FileControl::getPersonalLegajos();\n+        $cargos = FileControl::getCargos();\n+        //$clientes = FileControl::getClientes();\n+        $clientes = FileControl::getClientesLegajos();\n+\n+        return view('file_control.search_legajos', compact('personal', 'cargos', 'clientes'));\n+    }\n+\n+    public function ViewLegajoPdf()\n+    {\n+        $sucursales = FileControl::getSucursales();\n+        $cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientes();\n+        return view('file_control.legajos_pdf', compact('sucursales','cargos','clientes'));\n+    }\n+\n+    public function getPersonalLegajos(Request $request)\n+    {\n+        $personal = FileControl::getPersonalLegajos();\n+        return response()->json($personal);\n+    }\n+\n+    public function getCoincidencias(Request $request)\n+    {\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+\n+        $legajos = FileControl::getCoincidencias($cliente, $cargo);\n+        return response()->json($legajos);\n+    }\n+\n+    //GUARDAR DATOS\n+    // public function saveFolioPersona(Request $request){\n+    //     //dd($request->file('imagenes'));\n+\n+\n+    //     // Validar los datos del formulario\n+    //     $validated = $request->validate([\n+    //         'fecha_emision' => 'required|date',\n+    //         'fecha_caducidad' => 'nullable|date',\n+    //         //'file' => 'nullable|file|mimes:pdf,jpg,jpeg,png|max:1024',\n+    //     ]);\n+\n+    //     // Para guardar el arcivo con la codificación del personal\n+\n+    //     $codPersonal = $request->input('codPersonal');\n+    //     $total = count($request->file('imagenes'));\n+    //     foreach ($request->file('imagenes') as $index => $archivo) {\n+    //         //$nombre = 'folio_'.$id.'_'.$index.'.jpg';\n+    //         //Condición si es 1 archivo o varios, para asignar el nombre al archivo\n+    //         if($total == 1){\n+    //             $nameFile = $codPersonal.'.jpg';\n+    //         }else{\n+    //             $nameFile = $codPersonal.'_'.($index+1).'.jpg';\n+    //         }\n+\n+    //         // Averiguar el nombre de la carpeta o ruta donde debe de guardarse el archivo\n+    //         $rutaArchivo = FileControl::getRutaFolio($request->input('codFolio'));\n+\n+    //         //$filePath = null;\n+    //         // Llamar al microservicio para guardar el archivo en el servidor local\n+    //         //$filePath = 'http://190.116.178.163/Biblioteca_Grafica/'.$rutaArchivo.'/'.$nameFile;\n+\n+    //         $response = Http::withToken('457862h45hj7u5126h58d2s51s2s') // Autenticación con el token\n+    //             ->attach('archivo', file_get_contents($archivo), $archivo->getClientOriginalName()) // Adjuntar el archivo\n+    //             //->post('https://sisolmar.gruposolmar.pe/apps/api/file-control/charge-file.php', [\n+    //             ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n+    //                 'nameFile' => $nameFile,\n+    //                 'ruta' => $rutaArchivo\n+    //             ]);\n+\n+    //         if ($response->failed()) {\n+    //             return response()->json(['error' => 'No se pudo guardar el archivo en el servidor local'], 500);\n+    //         }\n+\n+    //         $archivo->storeAs('uploads/folios', $nameFile);\n+    //     }\n+\n+\n+\n+    //     // Llamar al método saveFolioPersonal pasando los datos y el archivo\n+    //     $inserted = FileControl::saveFolioPersonal(\n+    //         $validated['fecha_emision'],\n+    //         $validated['fecha_caducidad'],\n+    //         $request->codFolio,\n+    //         $request->codPersonal,\n+    //         //$filePath // Pasamos la ruta del archivo\n+    //     );\n+\n+    //     return response()->json(['message' => 'Folios del persona guardados']);\n+\n+    // }\n+\n+\n+     public function getViewDocumentsPer($codPersonal, $codFolio)\n+    {\n+        $result = FileControl::getViewPerDocs($codPersonal, $codFolio);\n+\n+        if (empty($result)) {\n+            return response()->json(['success' => false, 'message' => 'No se encontraron rutas'], 404);\n+        }\n+\n+        $extensiones = ['jpg', 'jpeg', 'png', 'pdf'];\n+        $rutasValidas = [];\n+\n+        foreach ($result as $item) {\n+            $rutaEncontrada = false;\n+\n+            // Probar primero con ruta_aux\n+            if (isset($item->ruta_aux)) {\n+                $rutaBase = str_replace('//', 'http://', $item->ruta_aux);\n+\n+                foreach ($extensiones as $ext) {\n+                    $rutaConExt = $rutaBase . '.' . $ext;\n+\n+                    if (self::urlExiste($rutaConExt)) {\n+                        $rutasValidas[] = $rutaConExt;\n+                        $rutaEncontrada = true;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            // Si no se encontró nada en ruta_aux, probar con ruta\n+            if (!$rutaEncontrada && isset($item->ruta)) {\n+                $rutaBase = str_replace('//', 'http://', $item->ruta);\n+\n+                foreach ($extensiones as $ext) {\n+                    $rutaConExt = $rutaBase . '.' . $ext;\n+\n+                    if (self::urlExiste($rutaConExt)) {\n+                        $rutasValidas[] = $rutaConExt;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (empty($rutasValidas)) {\n+            return response()->json([\n+                'success' => false,\n+                'message' => 'No se encontraron archivos accesibles desde la red'\n+            ]);\n+        }\n+\n+        return response()->json([\n+            'success' => true,\n+            'rutas' => $rutasValidas\n+        ]);\n+    }\n+\n+    // Función para validar si la URL existe\n+    private static function urlExiste($url)\n+    {\n+        $ch = curl_init($url);\n+        curl_setopt($ch, CURLOPT_NOBODY, true);\n+        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n+        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n+        curl_exec($ch);\n+        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n+        curl_close($ch);\n+\n+        return $statusCode === 200;\n+    }\n+\n+\n+\n+    // public function saveFolioPersona(Request $request)\n+    // {\n+    //     $validated = $request->validate([\n+    //         'fecha_emision'     => 'required|date',\n+    //         'fecha_caducidad'   => 'nullable|date',\n+    //         'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n+    //         'codPersonal'       => 'required|string',\n+    //         'codFolio'          => 'required|string',\n+    //     ]);\n+\n+    //     try {\n+    //         $codPersonal = $validated['codPersonal'];\n+    //         $codFolio    = $validated['codFolio'];\n+    //         $archivos    = $request->file('imagenes');\n+    //         $total       = count($archivos);\n+\n+    //         // Obtener ruta lógica relativa\n+    //         $subCarpeta = FileControl::getRutaFolio($codFolio); // Ejemplo: \"FOLIOS/2025/F123\"\n+\n+    //         foreach ($archivos as $index => $archivo) {\n+    //             $nombreArchivo = ($total === 1)\n+    //                 ? \"{$codPersonal}.jpg\"\n+    //                 : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n+\n+    //             $rutaRelativa = $subCarpeta . '/' . $nombreArchivo;\n+\n+    //             if (App::environment('local')) {\n+    //                 // Guardado directo en ruta de red en entorno local\n+    //                 $rutaFinal = \"\\\\\\\\192.168.10.5:86\\\\sisolmar\\\\DATA_SISOLMAR\\\\\" . $subCarpeta . \"\\\\\" . $nombreArchivo;\n+\n+    //                 if (!file_exists(dirname($rutaFinal))) {\n+    //                     mkdir(dirname($rutaFinal), 0777, true);\n+    //                 }\n+\n+    //                 file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n+    //             }\n+\n+    //             if (App::environment('production')) {\n+    //                 // Guardado en D:\\ mediante Storage\n+    //                 Storage::disk('disk_d')->put($rutaRelativa, file_get_contents($archivo->getRealPath()));\n+    //             }\n+    //         }\n+\n+    //         // Lógica adicional de BD\n+    //         FileControl::saveFolioPersonal(\n+    //             $validated['fecha_emision'],\n+    //             $validated['fecha_caducidad'],\n+    //             $codFolio,\n+    //             $codPersonal\n+    //         );\n+\n+    //         return response()->json(['message' => 'Folios del personal guardados correctamente.']);\n+\n+    //     } catch (\\Exception $e) {\n+    //         Log::error('Error al guardar folios: ' . $e->getMessage());\n+    //         return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n+    //     }\n+    // }\n+\n+    public function saveFolioPersona2()\n+    {\n+        echo \"hola22\";\n+    }\n+    public function saveFolioPersona(Request $request)\n+    {\n+        $request->validate([\n+            'fecha_emision' => 'required|date',\n+            'fecha_caducidad' => 'nullable|date',\n+            'codFolio' => 'required|integer',\n+            'codPersonal' => 'required|string',\n+            'imagenes' => 'required|array',\n+            'imagenes.*' => 'image|max:5120' // máximo 5MB por imagen (ajusta según tu necesidad)\n+        ]);\n+\n+        $fechaEmision = $request->input('fecha_emision');\n+        $fechaCaducidad = $request->input('fecha_caducidad');\n+        $codFolio = $request->input('codFolio');\n+        $codPersonal = $request->input('codPersonal');\n+        $imagenes = $request->file('imagenes');\n+\n+        // Obtiene las rutas de carpeta según el folio\n+        $subCarpetas = FileControl::getRutaFolio($codFolio); // devuelve un array de rutas\n+\n+        print_r($subCarpetas);\n+        /*\n+        if (count($subCarpetas) !== count($imagenes)) {\n+            return response()->json([\n+                'error' => 'El número de imágenes no coincide con el número de rutas esperadas para el folio.'\n+            ], 400);\n+        }\n+\n+        foreach ($imagenes as $index => $imagen) {\n+            $rutaSubcarpeta = $subCarpetas[$index] ?? null;\n+\n+            if (!$rutaSubcarpeta) {\n+                continue; // O lanza un error si lo prefieres\n+            }\n+\n+            $rutaDestino = public_path('Biblioteca_Grafica/' . $rutaSubcarpeta);\n+\n+            // Crea la carpeta si no existe\n+            if (!file_exists($rutaDestino)) {\n+                mkdir($rutaDestino, 0777, true);\n+            }\n+\n+            // Guarda la imagen con el nombre del codPersonal\n+            $nombreArchivo = $codPersonal . '.' . $imagen->getClientOriginalExtension();\n+\n+            $imagen->move($rutaDestino, $nombreArchivo);\n+        }\n+\n+        // Aquí podrías guardar los datos en la BD si lo necesitas\n+        // ...\n+\n+        return response()->json([\n+            'message' => 'Folio guardado exitosamente.',\n+        ]);\n+        */\n+    }\n+\n+\n+    //DE EVER\n+    /*public function saveFolioPersona(Request $request)\n+    {\n+        $validated = $request->validate([\n+            'fecha_emision'     => 'required|date',\n+            'fecha_caducidad'   => 'nullable|date',\n+            'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n+            'codPersonal'       => 'required|string',\n+            'codFolio'          => 'required|string',\n+        ]);\n+\n+        try {\n+            $codPersonal = $validated['codPersonal'];\n+            $codFolio    = $validated['codFolio'];\n+            $archivos    = $request->file('imagenes');\n+            $total       = count($archivos);\n+\n+            // Subcarpeta relativa dentro de public/\n+            $subCarpeta = FileControl::getRutaFolio($codFolio); // ejemplo: \"folios/F123\"\n+            $rutaBase = public_path($subCarpeta);\n+\n+            if (!File::exists($rutaBase)) {\n+                File::makeDirectory($rutaBase, 0777, true);\n+            }\n+\n+            foreach ($archivos as $index => $archivo) {\n+                $nombreArchivo = ($total === 1)\n+                    ? \"{$codPersonal}.jpg\"\n+                    : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n+\n+                $rutaFinal = $rutaBase . '/' . $nombreArchivo;\n+\n+                // Guardar archivo en public/\n+                file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n+            }\n+\n+            // Guardar en BD\n+            FileControl::saveFolioPersonal(\n+                $validated['fecha_emision'],\n+                $validated['fecha_caducidad'],\n+                $codFolio,\n+                $codPersonal\n+            );\n+\n+            return response()->json(['message' => 'Folios guardados correctamente.']);\n+\n+        } catch (\\Exception $e) {\n+            Log::error('Error al guardar folios en public/: ' . $e->getMessage());\n+            return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n+        }\n+    }\n+        */\n+\n+    public function saveFolio(Request $request)\n+    {\n+        $codigo = $request->input('codigo');\n+        $nombre = $request->input('nombre');\n+        $tipo = $request->input('tipo');\n+        $obligatorio = $request->input('obligatorio');\n+        $vencimiento = $request->input('vencimiento');\n+        $tipo_fecha = $request->input('periodo');\n+        $plataforma = $request->input('plataforma');\n+\n+        if (empty($codigo)) {\n+            $inserted = FileControl::saveFolio($nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n+        } else {\n+            $inserted = FileControl::updateFolio($codigo, $nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n+        }\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'Folio guardado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }\n+\n+        //return response()->json(['message' => 'Folios creados']);\n+    }\n+\n+    public function disabledFolio(Request $request){\n+        $codigo = $request->codigo;\n+        $result = FileControl::disabledFolio($codigo);\n+\n+        if ($result) {\n+            return response()->json(['message' => 'Folio deshabilitado exitosamente'], 200);\n+        } else {\n+            return response()->json(['message' => 'Folio no encontrado o error al deshabilitar'], 404);\n+        }\n+    }\n+\n+    public function saveCargo(Request $request){\n+        $descripcion = $request->input('descripcion');\n+        $nombre = $request->input('nombre');\n+        $cod_tipo = $request->input('tipoCargo');\n+        $abreviatura = $request->input('abreviatura');\n+        $cod_servicio = $request->input('codPosicion');\n+        $cod_subservicio = $request->input('codGrupo');\n+        $cod_area = $request->input('codArea');\n+\n+        $usuario = session('usuario');\n+\n+        $inserted = FileControl::saveCargo($descripcion, $nombre, $abreviatura, $cod_servicio, $cod_subservicio, $cod_tipo, $cod_area, $usuario);\n+\n+        return response()->json(['message' => 'Cargo creado']);\n+    }\n+\n+    public function dashboard()\n+    {\n+        return view('file_control.dashboard');\n+    }\n+\n+    //-----------------\n+\n+    public function getFoliosXLegajo($codCliente, $codCargo){\n+        $folios = FileControl::getFoliosXLegajo($codCliente, $codCargo);\n+        return response()->json($folios);\n+    }\n+\n+    public function getAreas(){\n+        $areas = FileControl::getAreas();\n+        return response()->json($areas);\n+    }\n+\n+    public function getPosicion(){\n+        $data = FileControl::getPosicion();\n+        return response()->json($data);\n+    }\n+\n+    public function getGrupo(){\n+        $data = FileControl::getGrupo();\n+        return response()->json($data);\n+    }\n+\n+    public function getGrupoId($codigo){\n+        //$codigo = $request->input('codigo');\n+        $data = FileControl::getGrupoId($codigo);\n+        return response()->json($data);\n+    }\n+\n+    public function saveLegajo(Request $request){\n+        $folios = $request->input('folios');\n+        $codCliente = $request->input('codCliente');\n+        $codCargo = $request->input('codCargo');\n+        $codLegajo = $request->input('codLegajo');\n+        $nombre  = $request->input('nombre');\n+\n+        $usuario = session('usuario');\n+\n+        if($codLegajo != '0'){//MODIFICAR LEGAJO\n+            $codigos = FileControl::QuitarTodosLegajos($codLegajo, $usuario);\n+\n+            for ($i = 0; $i < count($codigos); $i++) {\n+                if (!in_array($codigos[$i], $folios)) {\n+                    FileControl::actualizarNotificacionDes($codigos[$i], $codCliente, $codCargo);\n+                }\n+            }\n+\n+            for($i = 0; $i < count($folios); $i++){\n+                $folio = $folios[$i];\n+                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $codLegajo);\n+                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n+\n+                if(empty($validar)){\n+                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n+                }else{\n+                    FileControl::updateLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n+                }\n+            }\n+        }else{//CREAR NUEVO LEGAJO\n+            $legajo = FileControl::saveLegajoMain($nombre);\n+\n+            for($i = 0; $i < count($folios); $i++){\n+                $folio = $folios[$i];\n+                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $legajo);\n+                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n+                if(empty($validar)){\n+                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $legajo, $usuario);\n+                }\n+\n+            }\n+        }\n+    }\n+\n+    /* GESTION DE CARGOS */\n+    public function insertarCargo(Request $request)\n+    {\n+        $tipo = $request->input('tipoCargo');\n+        $codArea = $request->input('codArea');\n+        $nombre = $request->input('nombre');\n+        $descripcion = $request->input('descripcion');\n+        $abreviatura = $request->input('abreviatura');\n+        $codPosicion = $request->input('codPosicion');\n+        $codGrupo = $request->input('codGrupo');\n+\n+        $data = [\n+            $tipo,\n+            $codArea,\n+            $nombre,\n+            $descripcion,\n+            $abreviatura,\n+            $codPosicion,\n+            $codGrupo,\n+            'SISTEMA'\n+        ];\n+\n+        $inserted = FileControl::insertarCargo($data);\n+\n+        return response()->json(['message' => 'Cargo creado']);\n+    }\n+    public function updateCargo(Request $request)\n+    {\n+        $tipo = $request->input('tipoCargo');\n+        $codArea = $request->input('codArea');\n+        $nombre = $request->input('nombre');\n+        $descripcion = $request->input('descripcion');\n+        $abreviatura = $request->input('abreviatura');\n+        $codPosicion = $request->input('codPosicion');\n+        $codGrupo = $request->input('codGrupo');\n+        $codigo = $request->input('codigo');\n+\n+        $data = [\n+            $codigo,\n+            $tipo,\n+            $codArea,\n+            $nombre,\n+            $descripcion,\n+            $abreviatura,\n+            $codPosicion,\n+            $codGrupo,\n+            'SISTEMA'\n+        ];\n+\n+        $inserted = FileControl::updateCargo($data);\n+\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'Cargo modificado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }\n+\n+        //return response()->json(['message' => 'Folios creados']);\n+    }\n+\n+\n+    public function getCargosXCodigo($codigo){\n+        $data = FileControl::getCargosXCodigo($codigo);\n+        return response()->json($data);\n+    }\n+\n+\n+    public function eliminarCargo(Request $request){\n+        $codigo = $request->input('codigo');\n+        $data = 0;\n+        $inserted = FileControl::activarCargo($codigo, $data);\n+        return response()->json(['message' => 'Cargo modificdo']);\n+    }\n+\n+    public function activarCargo(Request $request){\n+        $codigo = $request->input('codigo');\n+        $data = 1;\n+        $inserted = FileControl::activarCargo($codigo, $data);\n+        return response()->json(['message' => 'Cargo modificdo']);\n+    }\n+\n+    public function ViewLegajo_comercial(){\n+\n+        return view('file_control.legajos_comercial');\n+    }\n+\n+    public function saveSolicitud(Request $request){\n+        $codigo = $request->input('codigo');\n+        $tiene = $request->input('tiene');\n+        $cargo = $request->input('cargo');\n+        $cliente = $request->input('cliente');\n+\n+        $usuario = session('usuario');\n+\n+        FileControl::saveSolicitud($codigo, $tiene, $cargo, $cliente, $usuario);\n+        return response()->json(['message' => 'Solicitud creado']);\n+    }\n+\n+}\n"
                },
                {
                    "date": 1753328663676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -710,12 +710,34 @@\n     //         return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n     //     }\n     // }\n \n-    public function saveFolioPersona2()\n+    public function saveFolioPersona2(Request $request)\n     {\n-        echo \"hola22\";\n+        /*$fechaEmision = $request->input('fecha_emision');\n+        $fechaCaducidad = $request->input('fecha_caducidad');\n+        $codFolio = $request->input('codFolio');\n+        $codPersonal = $request->input('codPersonal');\n+\n+        $inserted = FileControl::saveFolioPersonal($fechaEmision,$fechaCaducidad,$codFolio,$codPersonal);\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'El folio del personal, guardado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }*/\n+        $cant = 0;\n+        if ($request->hasFile('archivos')) {\n+            foreach ($request->file('archivos') as $archivo) {\n+                //$nombre = time() . '_' . $archivo->getClientOriginalName();\n+                //$archivo->move(public_path('archivos_folio'), $nombre);\n+                $cant = $cant + 1;\n+            }\n+        }\n+    \n+        return response()->json(\"hay \".$cant.\" archivos\");\n     }\n+\n     public function saveFolioPersona(Request $request)\n     {\n         $request->validate([\n             'fecha_emision' => 'required|date',\n"
                },
                {
                    "date": 1753331635351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1083 @@\n+<?php\n+\n+namespace App\\Http\\Controllers;\n+\n+use App\\Helpers\\PdfHelper;\n+use App\\Helpers\\ImagenHelper;\n+use Barryvdh\\Snappy\\Facades\\SnappyPdf;\n+use Illuminate\\Http\\Request;\n+use App\\Models\\FileControl;\n+use Illuminate\\Support\\Facades\\App;\n+use Illuminate\\Support\\Facades\\Log;\n+use Illuminate\\Support\\Facades\\Http;\n+use Illuminate\\Support\\Str;\n+use Illuminate\\Support\\Facades\\File;\n+use Illuminate\\Support\\Facades\\Storage;\n+use ZipArchive;\n+\n+class FileController extends Controller{\n+    public function index(){\n+        $personal = FileControl::getPersonal();\n+        //$cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientesLegajos();\n+        $sucursales = FileControl::getSucursales();\n+\n+        return view('file_control.chargefile', compact('personal', 'clientes', 'sucursales'));\n+    }\n+\n+    public function getCargosXCliente(Request $request){\n+        $cliente = $request->input('cliente');\n+        $cargos = FileControl::getCargosXCliente($cliente);\n+        return response()->json($cargos);\n+    }\n+\n+    public function ViewDashboard(){\n+        /*$personal = FileControl::getPersonal();\n+        $cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientes();\n+        $sucursales = FileControl::getSucursales();*/\n+\n+        return view('file_control.dashboard'/*, compact('personal', 'cargos', 'clientes', 'sucursales')*/);\n+    }\n+\n+    public function getPersonal(Request $request){\n+        $personal = FileControl::getPersonal();\n+        return response()->json($personal);\n+    }\n+\n+    public function getDocumentosXPersonal($codPersonal){\n+        $docs_personal = FileControl::getDocsXPersona($codPersonal);\n+        return response()->json($docs_personal);\n+    }\n+\n+    public function getFoliosXPersonas(Request $request){\n+        $personas = $request->personas;\n+        $folios = $request->folios;\n+        $resultados = [];\n+        //Averiguando la sucursal de la persona\n+\n+\n+        foreach ($personas as $persona) {\n+            $sucursal = FileControl::getSucursalXPersona($persona['CODI_PERS']);\n+            foreach ($folios as $folio) {\n+                $datosFolioPersona = FileControl::getFoliosInfoPersona($persona['CODI_PERS'], $folio['codigo']);\n+                foreach ($datosFolioPersona as $dato) {\n+                    $resultados[] = [\n+                        //'persona' => $persona['personal'],\n+                        'persona' => $dato->personal ?? null,\n+                        'nroDoc' => $dato->nroDoc ?? null,\n+                        'codPersonal' => $persona['CODI_PERS'],\n+                        'folio' => $folio['nombre'],\n+                        'sucursal' => $sucursal,\n+                        'ruta' => $dato->ruta_archivo ?? null,\n+                        'ancho' => $dato->ancho ?? null,\n+                        'hojas' => $dato->cantidad_hojas ?? null,\n+                        'documento' => $dato->documento ?? null,\n+                        'cargo' => $dato->cargo ?? null,\n+                        'es_formato' => $dato->es_formato ?? null,\n+                    ];\n+                }\n+                /*$resultados[] = [\n+                    'persona' => $persona['personal'],\n+                    'folio' => $folio['nombre'],\n+                    'ruta' => $datosFolioPersona[0]->ruta_archivo ?? null,\n+                ];*/\n+            }\n+        }\n+        return response()->json($resultados);\n+    }\n+\n+    public function getFoliosXPersona_uno(Request $request){\n+        $persona = $request->input('codPersona');\n+        $folios = $request->folios;\n+        $resultados = [];\n+\n+        $sucursal = FileControl::getSucursalXPersona($persona);\n+\n+        foreach ($folios as $folio) {\n+            $datosFolioPersona = FileControl::getFoliosInfoPersona($persona, $folio['codigo']);\n+            foreach ($datosFolioPersona as $dato) {\n+                $resultados[] = [\n+                    'persona' => $dato->personal ?? null,\n+                    'nroDoc' => $dato->nroDoc ?? null,\n+                    'codPersonal' => $persona,\n+                    'folio' => $folio['nombre'],\n+                    'sucursal' => $sucursal,\n+                    'ruta' => $dato->ruta_archivo ?? null,\n+                    'ancho' => $dato->ancho ?? null,\n+                    'hojas' => $dato->cantidad_hojas ?? null,\n+                    'documento' => $dato->documento ?? null,\n+                    'cargo' => $dato->cargo ?? null,\n+                    'es_formato' => $dato->es_formato ?? null,\n+                ];\n+            }\n+        }\n+\n+        return response()->json($resultados);\n+    }\n+\n+    // public function generarPDFsPorPersona(Request $request){\n+    //     $resultados = $request->input('resultados');\n+\n+    //     // Agrupar todos los datos por persona\n+    //     $agrupados = [];\n+    //     foreach ($resultados as $item) {\n+    //         $cod = $item['codPersonal'];\n+    //         $agrupados[$cod][] = $item;\n+    //     }\n+\n+    //     $carpetaTemporal = storage_path('app/temp_pdfs');\n+    //     if (!File::exists($carpetaTemporal)) {\n+    //         File::makeDirectory($carpetaTemporal, 0777, true, true);\n+    //     }\n+\n+    //     $pdfsGenerados = [];\n+\n+    //     foreach ($agrupados as $codPersonal => $documentosPersona) {\n+    //         $persona = $documentosPersona[0]['persona'] ?? 'persona_sin_nombre';\n+\n+    //         // Carátula: datos únicos de persona\n+    //         $caratula = [\n+    //             'persona' => $persona,\n+    //             'codPersonal' => $codPersonal,\n+    //             'sucursal' => $documentosPersona[0]['sucursal'] ?? '',\n+    //             'cargo' => $documentosPersona[0]['cargo'] ?? '',\n+    //         ];\n+\n+    //         // Separar documentos: escaneados vs formatos Blade\n+    //         $urls = [];\n+    //         $itemsFinales = [];\n+\n+    //         foreach ($documentosPersona as $doc) {\n+    //             if (!empty($doc['ruta'])) {\n+    //                 $urls[] = [\n+    //                     'ruta' => $doc['ruta'],\n+    //                     'codPersonal' => $codPersonal,\n+    //                     'ancho' => $doc['ancho'],\n+    //                     'hojas' => $doc['hojas'],\n+    //                     'documento' => $doc['documento'],\n+    //                     'es_formato' => $doc['es_formato'],\n+    //                 ];\n+    //             }\n+\n+    //             if ($doc['es_formato'] == 1) {\n+    //                 $itemsFinales[] = [\n+    //                     'es_formato' => 1,\n+    //                     'codPersonal' => $codPersonal,\n+    //                     'documento' => $doc['documento'],\n+    //                     'nombre_vista' => $this->obtenerNombreVista($doc),\n+    //                     'datos' => $doc,\n+    //                     'firma' => public_path('temp_legajos') . '/FIRMAS/PERSONAL/' . $codPersonal . '.jpg',\n+    //                     'huella' => public_path('temp_legajos') . '/HUELLAS_DIGITALES/PERSONAL/' . $codPersonal . '.jpg',\n+    //                 ];\n+\n+    //                 // Descargar imágenes del formato (firma y huella)\n+    //                 ImagenHelper::descargarImagenesFormato($codPersonal);\n+    //             }\n+    //         }\n+\n+    //         // Descargar imágenes escaneadas\n+    //         $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n+\n+    //         foreach ($rutasLocales as $img) {\n+    //             $itemsFinales[] = [\n+    //                 'es_formato' => 0,\n+    //                 'codPersonal' => $codPersonal,\n+    //                 'ruta' => $img['ruta'],\n+    //                 'documento' => $img['documento'],\n+    //                 'hojas' => $img['hojas'],\n+    //                 'ancho' => $img['ancho'],\n+    //             ];\n+    //         }\n+\n+    //         // Render PDF de esta persona\n+    //         $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n+    //             'personas' => [$caratula], // vista espera array\n+    //             'resultados' => $documentosPersona,\n+    //             'imagenes' => $rutasLocales,\n+    //             'items' => $itemsFinales,\n+    //         ])->setOption('enable-local-file-access', true);\n+\n+    //         $nombreArchivo = 'PDF_' . Str::slug($persona) . '_' . $codPersonal . '.pdf';\n+    //         $rutaArchivo = $carpetaTemporal . '/' . $nombreArchivo;\n+\n+    //         $pdf->save($rutaArchivo);\n+    //         $pdfsGenerados[] = $rutaArchivo;\n+    //     }\n+\n+    //     // Comprimir todo en ZIP\n+    //     $zipPath = storage_path('app/documentos_por_persona.zip');\n+    //     $zip = new \\ZipArchive();\n+\n+    //     if ($zip->open($zipPath, \\ZipArchive::CREATE | \\ZipArchive::OVERWRITE) === true) {\n+    //         foreach ($pdfsGenerados as $archivo) {\n+    //             $zip->addFile($archivo, basename($archivo));\n+    //         }\n+    //         $zip->close();\n+    //     }\n+\n+    //     return response()->download($zipPath)->deleteFileAfterSend(true);\n+    // }\n+\n+    public function generarPDF_env(Request $request){\n+        echo \"Hola\";\n+    }\n+\n+    public function pdf_vacio()\n+    {\n+        // Aquí cargas una vista muy simple (puedes crear un blade vacío o con texto simple)\n+        $pdf = SnappyPdf::loadView('file_control.pdf.reporte_vacio');\n+\n+        // Lo envías para que se descargue (o inline si quieres verlo en navegador)\n+        return $pdf->inline('reporte_vacio.pdf');\n+    }\n+\n+\n+    public function generarPDF(Request $request){\n+        $resultados = $request->input('resultados');\n+        //dd($resultados);\n+        //exit;\n+        //Agrupar los datos para mostrar en la carátula\n+        $unicos = [];\n+\n+        $nombreNuevo = 'Reporte';\n+\n+        foreach ($resultados as $item) {\n+            $clave = $item['persona'] . '|' . $item['sucursal'] . '|' . $item['codPersonal'] . '|' . $item['cargo'];\n+            if(!isset($unicos[$clave])) {\n+                $unicos[$clave] = [\n+                    'persona' => $item['persona'],\n+                    'codPersonal' => $item['codPersonal'],\n+                    'sucursal' => $item['sucursal'],\n+                    'cargo' => $item['cargo'],\n+                ];\n+\n+\n+            }\n+\n+             $nombreNuevo = $item['codPersonal'].'_'.$item['persona'] . '_' . date('Ymd_Hi');\n+        }\n+\n+        $personasUnicas = array_values($unicos);\n+\n+        //Para los FORMATOS\n+        // $formatosBlade = [\n+        //     'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n+        //     'DECLARACION JURADA ' => 'file_control.pdf.declaracion_jurada',\n+        // ];\n+\n+        $urls = [];\n+\n+        foreach ($resultados as $resultado) {\n+            if (!empty($resultado['ruta']) && !empty($resultado['codPersonal'])) {\n+                $urls[] = [\n+                    'ruta' => $resultado['ruta'],\n+                    'codPersonal' => $resultado['codPersonal'],\n+                    'ancho' => $resultado['ancho'],\n+                    'hojas' => $resultado['hojas'],\n+                    'documento' => $resultado['documento'],\n+                    'es_formato' => $resultado['es_formato'],\n+                ];\n+            }\n+        };\n+\n+        $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n+\n+        $itemsFinales = [];\n+        //Los que tienen imagen en ruta\n+        foreach ($rutasLocales as $item) {\n+            $itemsFinales[] = [\n+                'es_formato' => $item['es_formato'],\n+                'codPersonal' => $item['codPersonal'],\n+                'ruta' => $item['ruta'],\n+                'documento' => $item['documento'],\n+                'hojas' => $item['hojas'],\n+                'ancho' => $item['ancho'],\n+            ];\n+        }\n+\n+        // Los que deben renderizar una vista Blade porque son formatos (es_formato == 1)\n+        foreach ($resultados as $resultado) {\n+            if ($resultado['es_formato'] == 1) {\n+                $itemsFinales[] = [\n+                    'es_formato' => $resultado['es_formato'],\n+                    'codPersonal' => $resultado['codPersonal'],\n+                    'documento' => $resultado['documento'],\n+                    'nombre_vista' => $this->obtenerNombreVista($resultado), // Función que defines\n+                    'datos' => $resultado,\n+                    'firma' => public_path('temp_legajos').'/FIRMAS/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n+                    'huella' => public_path('temp_legajos').'/HUELLAS_DIGITALES/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n+                ];\n+                //Hacer la copia local de la FIRMA y HUELLA DIGITAL\n+                $rutasLocalesFormato = ImagenHelper::descargarImagenesFormato($resultado['codPersonal']);\n+            }\n+        }\n+\n+        //print_r($itemsFinales);\n+        $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n+            'personas' => $personasUnicas,\n+            'resultados' => $resultados,\n+            'imagenes' => $rutasLocales,\n+            'items' => $itemsFinales,\n+        ])->setOption('enable-local-file-access', true);\n+\n+        return response()->streamDownload(function () use ($pdf) {\n+            echo $pdf->output();\n+        }, $nombreNuevo . '.pdf', [\n+            'Content-Type' => 'application/pdf',\n+            'X-Nombre-Archivo' => $nombreNuevo . '.pdf', // <- aquí\n+        ]);\n+    }\n+\n+    public function obtenerNombreVista($resultado) {\n+        $mapa = [\n+            'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n+            'DECLARACION JURADA DE CUMPLIMIENTO DE DISPOSICIONES' => 'file_control.pdf.declaracion_jurada',\n+            'EVALUACION DEL POSTULANTE' => 'file_control.pdf.evaluacion_postulante',\n+            'COMPROMISO DE CONFIABILIDAD' => 'file_control.pdf.compromiso_confidencialidad',\n+            'CUMPLIMIENTO DE cumpliDISPOSICION' => 'file_control.pdf.dj_complumiento_disposicion',\n+            'ESTUDIO DE SEGURIDAD DE TRABAJADORES' => 'file_control.pdf.dj_complumiento_disposicion',\n+            'VISITA DOMICILIARIA' => 'file_control.pdf.visita_domiciliaria_concluciones'\n+        ];\n+\n+        return $mapa[$resultado['documento']] ?? null;\n+    }\n+\n+    public function generarReporteConsulta(Request $request){\n+        $codigo =  $request->input('valor');\n+        $data = FileControl::getReporteFiltro($codigo);\n+        return response()->json($data);\n+    }\n+\n+\n+    public function generarPDF2(Request $request) {\n+        $resultados = $request->input('resultados');\n+        $html = '';\n+\n+        $vistas = [\n+            'file_control.pdf.evaluacion-postulante',\n+            'file_control.pdf.declaracion-jurada',\n+            'file_control.pdf.acta_compromiso',\n+            'file_control.pdf.compromiso_confidencialidad',\n+            'file_control.pdf.dj_cumplimiento_disposicion',\n+            'file_control.pdf.estudio_seguridad_empleado',\n+            'file_control.pdf.estudio_seguridad_empleado_2',\n+            'file_control.pdf.visita_domiciliaria',\n+            'file_control.pdf.visita_domiciliaria_concluciones',\n+        ];\n+\n+        foreach ($vistas as $vista) {\n+\n+            $html .= view($vista, [\n+                'resultados' => $resultados\n+            ])->render();\n+\n+            $html .= '<div style=\"page-break-after: always;\"></div>';\n+        }\n+\n+        $pdf = SnappyPdf::loadHTML($html)->setOption('enable-local-file-access', true);\n+\n+        return response($pdf->inline('reporte_completo.pdf'))->header('Content-Type', 'application/pdf');\n+    }\n+\n+    public function getAllCargo()\n+    {\n+        $data = FileControl::getAllCargo();\n+        return response()->json($data);\n+    }\n+\n+    public function getClientes(){\n+        $data = FileControl::getClientes();\n+        return response()->json($data);\n+    }\n+\n+    public function getClientesLegajos(){\n+        $data = FileControl::getClientesLegajos();\n+        return response()->json($data);\n+    }\n+\n+    public function getLegajos(Request $request)\n+    {\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+        $codPersonal = $request->input('codigo');\n+\n+        $legajos = FileControl::getLegajos($cliente, $cargo, $codPersonal);\n+        return response()->json($legajos);\n+    }\n+\n+    public function getFoliosClienteCargo(Request $request){\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+\n+        $legajos = FileControl::getFoliosClienteCargo($cliente, $cargo);\n+        return response()->json($legajos);\n+    }\n+\n+    public function getFoliosXLegajo_comercial($codCliente, $codCargo){\n+        $folios = FileControl::getFoliosXLegajo_comercial($codCliente, $codCargo);\n+        return response()->json($folios);\n+    }\n+\n+    public function getCargos(){\n+        $cargos = FileControl::getCargos();\n+        return response()->json($cargos);\n+    }\n+\n+    public function getFolios(){\n+        $folios = FileControl::getFolios();\n+        return response()->json($folios);\n+    }\n+\n+    public function ViewCargo()\n+    {\n+        $todos = \\DB::table('sw_cargos')\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $operativo = \\DB::table('sw_cargos')\n+                    ->where('cod_tipo', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $administrativo = \\DB::table('sw_cargos')\n+                    ->where('cod_tipo', 2)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        return view('file_control.cargo',compact('todos', 'operativo', 'administrativo'));\n+    }\n+\n+    public function ViewLegajo()\n+    {\n+         $notif = FileControl::listarNotificaciones();\n+        return view('file_control.legajos', [\n+            'notify' => $notif\n+        ]);\n+    }\n+\n+    public function ViewFolios()\n+    {\n+        $periodos = FileControl::getPeriodos();\n+        $todos = \\DB::table('sw_folios')\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $principal = \\DB::table('sw_folios')\n+                    ->where('obligatorio', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $adicional = \\DB::table('sw_folios')\n+                    ->where('obligatorio', 0)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $documento = \\DB::table('sw_folios')\n+                    ->where('tipo', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $formato = \\DB::table('sw_folios')\n+                    ->where('tipo', 2)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $certificado = \\DB::table('sw_folios')\n+                    ->where('tipo', 3)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+\n+        return view('file_control.folios', compact('periodos', 'todos', 'principal', 'adicional', 'documento', 'formato', 'certificado'));\n+    }\n+\n+    public function ViewBusquedaLegajo()\n+    {\n+        $personal = FileControl::getPersonalLegajos();\n+        $cargos = FileControl::getCargos();\n+        //$clientes = FileControl::getClientes();\n+        $clientes = FileControl::getClientesLegajos();\n+\n+        return view('file_control.search_legajos', compact('personal', 'cargos', 'clientes'));\n+    }\n+\n+    public function ViewLegajoPdf()\n+    {\n+        $sucursales = FileControl::getSucursales();\n+        $cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientes();\n+        return view('file_control.legajos_pdf', compact('sucursales','cargos','clientes'));\n+    }\n+\n+    public function getPersonalLegajos(Request $request)\n+    {\n+        $personal = FileControl::getPersonalLegajos();\n+        return response()->json($personal);\n+    }\n+\n+    public function getCoincidencias(Request $request)\n+    {\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+\n+        $legajos = FileControl::getCoincidencias($cliente, $cargo);\n+        return response()->json($legajos);\n+    }\n+\n+    //GUARDAR DATOS\n+    // public function saveFolioPersona(Request $request){\n+    //     //dd($request->file('imagenes'));\n+\n+\n+    //     // Validar los datos del formulario\n+    //     $validated = $request->validate([\n+    //         'fecha_emision' => 'required|date',\n+    //         'fecha_caducidad' => 'nullable|date',\n+    //         //'file' => 'nullable|file|mimes:pdf,jpg,jpeg,png|max:1024',\n+    //     ]);\n+\n+    //     // Para guardar el arcivo con la codificación del personal\n+\n+    //     $codPersonal = $request->input('codPersonal');\n+    //     $total = count($request->file('imagenes'));\n+    //     foreach ($request->file('imagenes') as $index => $archivo) {\n+    //         //$nombre = 'folio_'.$id.'_'.$index.'.jpg';\n+    //         //Condición si es 1 archivo o varios, para asignar el nombre al archivo\n+    //         if($total == 1){\n+    //             $nameFile = $codPersonal.'.jpg';\n+    //         }else{\n+    //             $nameFile = $codPersonal.'_'.($index+1).'.jpg';\n+    //         }\n+\n+    //         // Averiguar el nombre de la carpeta o ruta donde debe de guardarse el archivo\n+    //         $rutaArchivo = FileControl::getRutaFolio($request->input('codFolio'));\n+\n+    //         //$filePath = null;\n+    //         // Llamar al microservicio para guardar el archivo en el servidor local\n+    //         //$filePath = 'http://190.116.178.163/Biblioteca_Grafica/'.$rutaArchivo.'/'.$nameFile;\n+\n+    //         $response = Http::withToken('457862h45hj7u5126h58d2s51s2s') // Autenticación con el token\n+    //             ->attach('archivo', file_get_contents($archivo), $archivo->getClientOriginalName()) // Adjuntar el archivo\n+    //             //->post('https://sisolmar.gruposolmar.pe/apps/api/file-control/charge-file.php', [\n+    //             ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n+    //                 'nameFile' => $nameFile,\n+    //                 'ruta' => $rutaArchivo\n+    //             ]);\n+\n+    //         if ($response->failed()) {\n+    //             return response()->json(['error' => 'No se pudo guardar el archivo en el servidor local'], 500);\n+    //         }\n+\n+    //         $archivo->storeAs('uploads/folios', $nameFile);\n+    //     }\n+\n+\n+\n+    //     // Llamar al método saveFolioPersonal pasando los datos y el archivo\n+    //     $inserted = FileControl::saveFolioPersonal(\n+    //         $validated['fecha_emision'],\n+    //         $validated['fecha_caducidad'],\n+    //         $request->codFolio,\n+    //         $request->codPersonal,\n+    //         //$filePath // Pasamos la ruta del archivo\n+    //     );\n+\n+    //     return response()->json(['message' => 'Folios del persona guardados']);\n+\n+    // }\n+\n+\n+     public function getViewDocumentsPer($codPersonal, $codFolio)\n+    {\n+        $result = FileControl::getViewPerDocs($codPersonal, $codFolio);\n+\n+        if (empty($result)) {\n+            return response()->json(['success' => false, 'message' => 'No se encontraron rutas'], 404);\n+        }\n+\n+        $extensiones = ['jpg', 'jpeg', 'png', 'pdf'];\n+        $rutasValidas = [];\n+\n+        foreach ($result as $item) {\n+            $rutaEncontrada = false;\n+\n+            // Probar primero con ruta_aux\n+            if (isset($item->ruta_aux)) {\n+                $rutaBase = str_replace('//', 'http://', $item->ruta_aux);\n+\n+                foreach ($extensiones as $ext) {\n+                    $rutaConExt = $rutaBase . '.' . $ext;\n+\n+                    if (self::urlExiste($rutaConExt)) {\n+                        $rutasValidas[] = $rutaConExt;\n+                        $rutaEncontrada = true;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            // Si no se encontró nada en ruta_aux, probar con ruta\n+            if (!$rutaEncontrada && isset($item->ruta)) {\n+                $rutaBase = str_replace('//', 'http://', $item->ruta);\n+\n+                foreach ($extensiones as $ext) {\n+                    $rutaConExt = $rutaBase . '.' . $ext;\n+\n+                    if (self::urlExiste($rutaConExt)) {\n+                        $rutasValidas[] = $rutaConExt;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (empty($rutasValidas)) {\n+            return response()->json([\n+                'success' => false,\n+                'message' => 'No se encontraron archivos accesibles desde la red'\n+            ]);\n+        }\n+\n+        return response()->json([\n+            'success' => true,\n+            'rutas' => $rutasValidas\n+        ]);\n+    }\n+\n+    // Función para validar si la URL existe\n+    private static function urlExiste($url)\n+    {\n+        $ch = curl_init($url);\n+        curl_setopt($ch, CURLOPT_NOBODY, true);\n+        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n+        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n+        curl_exec($ch);\n+        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n+        curl_close($ch);\n+\n+        return $statusCode === 200;\n+    }\n+\n+\n+\n+    // public function saveFolioPersona(Request $request)\n+    // {\n+    //     $validated = $request->validate([\n+    //         'fecha_emision'     => 'required|date',\n+    //         'fecha_caducidad'   => 'nullable|date',\n+    //         'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n+    //         'codPersonal'       => 'required|string',\n+    //         'codFolio'          => 'required|string',\n+    //     ]);\n+\n+    //     try {\n+    //         $codPersonal = $validated['codPersonal'];\n+    //         $codFolio    = $validated['codFolio'];\n+    //         $archivos    = $request->file('imagenes');\n+    //         $total       = count($archivos);\n+\n+    //         // Obtener ruta lógica relativa\n+    //         $subCarpeta = FileControl::getRutaFolio($codFolio); // Ejemplo: \"FOLIOS/2025/F123\"\n+\n+    //         foreach ($archivos as $index => $archivo) {\n+    //             $nombreArchivo = ($total === 1)\n+    //                 ? \"{$codPersonal}.jpg\"\n+    //                 : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n+\n+    //             $rutaRelativa = $subCarpeta . '/' . $nombreArchivo;\n+\n+    //             if (App::environment('local')) {\n+    //                 // Guardado directo en ruta de red en entorno local\n+    //                 $rutaFinal = \"\\\\\\\\192.168.10.5:86\\\\sisolmar\\\\DATA_SISOLMAR\\\\\" . $subCarpeta . \"\\\\\" . $nombreArchivo;\n+\n+    //                 if (!file_exists(dirname($rutaFinal))) {\n+    //                     mkdir(dirname($rutaFinal), 0777, true);\n+    //                 }\n+\n+    //                 file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n+    //             }\n+\n+    //             if (App::environment('production')) {\n+    //                 // Guardado en D:\\ mediante Storage\n+    //                 Storage::disk('disk_d')->put($rutaRelativa, file_get_contents($archivo->getRealPath()));\n+    //             }\n+    //         }\n+\n+    //         // Lógica adicional de BD\n+    //         FileControl::saveFolioPersonal(\n+    //             $validated['fecha_emision'],\n+    //             $validated['fecha_caducidad'],\n+    //             $codFolio,\n+    //             $codPersonal\n+    //         );\n+\n+    //         return response()->json(['message' => 'Folios del personal guardados correctamente.']);\n+\n+    //     } catch (\\Exception $e) {\n+    //         Log::error('Error al guardar folios: ' . $e->getMessage());\n+    //         return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n+    //     }\n+    // }\n+\n+    public function saveFolioPersona2(Request $request)\n+    {\n+        /*$fechaEmision = $request->input('fecha_emision');\n+        $fechaCaducidad = $request->input('fecha_caducidad');\n+        $codFolio = $request->input('codFolio');\n+        $codPersonal = $request->input('codPersonal');\n+\n+        $inserted = FileControl::saveFolioPersonal($fechaEmision,$fechaCaducidad,$codFolio,$codPersonal);\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'El folio del personal, guardado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }*/\n+        \n+        /*$cant = 0;\n+        if ($request->hasFile('archivos')) {\n+            foreach ($request->file('archivos') as $archivo) {\n+                //$nombre = time() . '_' . $archivo->getClientOriginalName();\n+                //$archivo->move(public_path('archivos_folio'), $nombre);\n+                $cant = $cant + 1;\n+            }\n+        }\n+    \n+        return response()->json(\"hay \".$cant.\" archivos\");\n+        */\n+\n+        dd($request->all());\n+    }\n+\n+    public function saveFolioPersona(Request $request)\n+    {\n+        $request->validate([\n+            'fecha_emision' => 'required|date',\n+            'fecha_caducidad' => 'nullable|date',\n+            'codFolio' => 'required|integer',\n+            'codPersonal' => 'required|string',\n+            'imagenes' => 'required|array',\n+            'imagenes.*' => 'image|max:5120' // máximo 5MB por imagen (ajusta según tu necesidad)\n+        ]);\n+\n+        $fechaEmision = $request->input('fecha_emision');\n+        $fechaCaducidad = $request->input('fecha_caducidad');\n+        $codFolio = $request->input('codFolio');\n+        $codPersonal = $request->input('codPersonal');\n+        $imagenes = $request->file('imagenes');\n+\n+        // Obtiene las rutas de carpeta según el folio\n+        $subCarpetas = FileControl::getRutaFolio($codFolio); // devuelve un array de rutas\n+\n+        print_r($subCarpetas);\n+        /*\n+        if (count($subCarpetas) !== count($imagenes)) {\n+            return response()->json([\n+                'error' => 'El número de imágenes no coincide con el número de rutas esperadas para el folio.'\n+            ], 400);\n+        }\n+\n+        foreach ($imagenes as $index => $imagen) {\n+            $rutaSubcarpeta = $subCarpetas[$index] ?? null;\n+\n+            if (!$rutaSubcarpeta) {\n+                continue; // O lanza un error si lo prefieres\n+            }\n+\n+            $rutaDestino = public_path('Biblioteca_Grafica/' . $rutaSubcarpeta);\n+\n+            // Crea la carpeta si no existe\n+            if (!file_exists($rutaDestino)) {\n+                mkdir($rutaDestino, 0777, true);\n+            }\n+\n+            // Guarda la imagen con el nombre del codPersonal\n+            $nombreArchivo = $codPersonal . '.' . $imagen->getClientOriginalExtension();\n+\n+            $imagen->move($rutaDestino, $nombreArchivo);\n+        }\n+\n+        // Aquí podrías guardar los datos en la BD si lo necesitas\n+        // ...\n+\n+        return response()->json([\n+            'message' => 'Folio guardado exitosamente.',\n+        ]);\n+        */\n+    }\n+\n+\n+    //DE EVER\n+    /*public function saveFolioPersona(Request $request)\n+    {\n+        $validated = $request->validate([\n+            'fecha_emision'     => 'required|date',\n+            'fecha_caducidad'   => 'nullable|date',\n+            'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n+            'codPersonal'       => 'required|string',\n+            'codFolio'          => 'required|string',\n+        ]);\n+\n+        try {\n+            $codPersonal = $validated['codPersonal'];\n+            $codFolio    = $validated['codFolio'];\n+            $archivos    = $request->file('imagenes');\n+            $total       = count($archivos);\n+\n+            // Subcarpeta relativa dentro de public/\n+            $subCarpeta = FileControl::getRutaFolio($codFolio); // ejemplo: \"folios/F123\"\n+            $rutaBase = public_path($subCarpeta);\n+\n+            if (!File::exists($rutaBase)) {\n+                File::makeDirectory($rutaBase, 0777, true);\n+            }\n+\n+            foreach ($archivos as $index => $archivo) {\n+                $nombreArchivo = ($total === 1)\n+                    ? \"{$codPersonal}.jpg\"\n+                    : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n+\n+                $rutaFinal = $rutaBase . '/' . $nombreArchivo;\n+\n+                // Guardar archivo en public/\n+                file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n+            }\n+\n+            // Guardar en BD\n+            FileControl::saveFolioPersonal(\n+                $validated['fecha_emision'],\n+                $validated['fecha_caducidad'],\n+                $codFolio,\n+                $codPersonal\n+            );\n+\n+            return response()->json(['message' => 'Folios guardados correctamente.']);\n+\n+        } catch (\\Exception $e) {\n+            Log::error('Error al guardar folios en public/: ' . $e->getMessage());\n+            return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n+        }\n+    }\n+        */\n+\n+    public function saveFolio(Request $request)\n+    {\n+        $codigo = $request->input('codigo');\n+        $nombre = $request->input('nombre');\n+        $tipo = $request->input('tipo');\n+        $obligatorio = $request->input('obligatorio');\n+        $vencimiento = $request->input('vencimiento');\n+        $tipo_fecha = $request->input('periodo');\n+        $plataforma = $request->input('plataforma');\n+\n+        if (empty($codigo)) {\n+            $inserted = FileControl::saveFolio($nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n+        } else {\n+            $inserted = FileControl::updateFolio($codigo, $nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n+        }\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'Folio guardado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }\n+\n+        //return response()->json(['message' => 'Folios creados']);\n+    }\n+\n+    public function disabledFolio(Request $request){\n+        $codigo = $request->codigo;\n+        $result = FileControl::disabledFolio($codigo);\n+\n+        if ($result) {\n+            return response()->json(['message' => 'Folio deshabilitado exitosamente'], 200);\n+        } else {\n+            return response()->json(['message' => 'Folio no encontrado o error al deshabilitar'], 404);\n+        }\n+    }\n+\n+    public function saveCargo(Request $request){\n+        $descripcion = $request->input('descripcion');\n+        $nombre = $request->input('nombre');\n+        $cod_tipo = $request->input('tipoCargo');\n+        $abreviatura = $request->input('abreviatura');\n+        $cod_servicio = $request->input('codPosicion');\n+        $cod_subservicio = $request->input('codGrupo');\n+        $cod_area = $request->input('codArea');\n+\n+        $usuario = session('usuario');\n+\n+        $inserted = FileControl::saveCargo($descripcion, $nombre, $abreviatura, $cod_servicio, $cod_subservicio, $cod_tipo, $cod_area, $usuario);\n+\n+        return response()->json(['message' => 'Cargo creado']);\n+    }\n+\n+    public function dashboard()\n+    {\n+        return view('file_control.dashboard');\n+    }\n+\n+    //-----------------\n+\n+    public function getFoliosXLegajo($codCliente, $codCargo){\n+        $folios = FileControl::getFoliosXLegajo($codCliente, $codCargo);\n+        return response()->json($folios);\n+    }\n+\n+    public function getAreas(){\n+        $areas = FileControl::getAreas();\n+        return response()->json($areas);\n+    }\n+\n+    public function getPosicion(){\n+        $data = FileControl::getPosicion();\n+        return response()->json($data);\n+    }\n+\n+    public function getGrupo(){\n+        $data = FileControl::getGrupo();\n+        return response()->json($data);\n+    }\n+\n+    public function getGrupoId($codigo){\n+        //$codigo = $request->input('codigo');\n+        $data = FileControl::getGrupoId($codigo);\n+        return response()->json($data);\n+    }\n+\n+    public function saveLegajo(Request $request){\n+        $folios = $request->input('folios');\n+        $codCliente = $request->input('codCliente');\n+        $codCargo = $request->input('codCargo');\n+        $codLegajo = $request->input('codLegajo');\n+        $nombre  = $request->input('nombre');\n+\n+        $usuario = session('usuario');\n+\n+        if($codLegajo != '0'){//MODIFICAR LEGAJO\n+            $codigos = FileControl::QuitarTodosLegajos($codLegajo, $usuario);\n+\n+            for ($i = 0; $i < count($codigos); $i++) {\n+                if (!in_array($codigos[$i], $folios)) {\n+                    FileControl::actualizarNotificacionDes($codigos[$i], $codCliente, $codCargo);\n+                }\n+            }\n+\n+            for($i = 0; $i < count($folios); $i++){\n+                $folio = $folios[$i];\n+                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $codLegajo);\n+                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n+\n+                if(empty($validar)){\n+                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n+                }else{\n+                    FileControl::updateLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n+                }\n+            }\n+        }else{//CREAR NUEVO LEGAJO\n+            $legajo = FileControl::saveLegajoMain($nombre);\n+\n+            for($i = 0; $i < count($folios); $i++){\n+                $folio = $folios[$i];\n+                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $legajo);\n+                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n+                if(empty($validar)){\n+                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $legajo, $usuario);\n+                }\n+\n+            }\n+        }\n+    }\n+\n+    /* GESTION DE CARGOS */\n+    public function insertarCargo(Request $request)\n+    {\n+        $tipo = $request->input('tipoCargo');\n+        $codArea = $request->input('codArea');\n+        $nombre = $request->input('nombre');\n+        $descripcion = $request->input('descripcion');\n+        $abreviatura = $request->input('abreviatura');\n+        $codPosicion = $request->input('codPosicion');\n+        $codGrupo = $request->input('codGrupo');\n+\n+        $data = [\n+            $tipo,\n+            $codArea,\n+            $nombre,\n+            $descripcion,\n+            $abreviatura,\n+            $codPosicion,\n+            $codGrupo,\n+            'SISTEMA'\n+        ];\n+\n+        $inserted = FileControl::insertarCargo($data);\n+\n+        return response()->json(['message' => 'Cargo creado']);\n+    }\n+    public function updateCargo(Request $request)\n+    {\n+        $tipo = $request->input('tipoCargo');\n+        $codArea = $request->input('codArea');\n+        $nombre = $request->input('nombre');\n+        $descripcion = $request->input('descripcion');\n+        $abreviatura = $request->input('abreviatura');\n+        $codPosicion = $request->input('codPosicion');\n+        $codGrupo = $request->input('codGrupo');\n+        $codigo = $request->input('codigo');\n+\n+        $data = [\n+            $codigo,\n+            $tipo,\n+            $codArea,\n+            $nombre,\n+            $descripcion,\n+            $abreviatura,\n+            $codPosicion,\n+            $codGrupo,\n+            'SISTEMA'\n+        ];\n+\n+        $inserted = FileControl::updateCargo($data);\n+\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'Cargo modificado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }\n+\n+        //return response()->json(['message' => 'Folios creados']);\n+    }\n+\n+\n+    public function getCargosXCodigo($codigo){\n+        $data = FileControl::getCargosXCodigo($codigo);\n+        return response()->json($data);\n+    }\n+\n+\n+    public function eliminarCargo(Request $request){\n+        $codigo = $request->input('codigo');\n+        $data = 0;\n+        $inserted = FileControl::activarCargo($codigo, $data);\n+        return response()->json(['message' => 'Cargo modificdo']);\n+    }\n+\n+    public function activarCargo(Request $request){\n+        $codigo = $request->input('codigo');\n+        $data = 1;\n+        $inserted = FileControl::activarCargo($codigo, $data);\n+        return response()->json(['message' => 'Cargo modificdo']);\n+    }\n+\n+    public function ViewLegajo_comercial(){\n+\n+        return view('file_control.legajos_comercial');\n+    }\n+\n+    public function saveSolicitud(Request $request){\n+        $codigo = $request->input('codigo');\n+        $tiene = $request->input('tiene');\n+        $cargo = $request->input('cargo');\n+        $cliente = $request->input('cliente');\n+\n+        $usuario = session('usuario');\n+\n+        FileControl::saveSolicitud($codigo, $tiene, $cargo, $cliente, $usuario);\n+        return response()->json(['message' => 'Solicitud creado']);\n+    }\n+\n+}\n"
                },
                {
                    "date": 1753332748503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -736,9 +736,9 @@\n         }\n     \n         return response()->json(\"hay \".$cant.\" archivos\");\n         */\n-\n+        dd(sys_get_temp_dir());\n         dd($request->all());\n     }\n \n     public function saveFolioPersona(Request $request)\n"
                },
                {
                    "date": 1753332759704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -737,8 +737,9 @@\n     \n         return response()->json(\"hay \".$cant.\" archivos\");\n         */\n         dd(sys_get_temp_dir());\n+        dd($_FILES);\n         dd($request->all());\n     }\n \n     public function saveFolioPersona(Request $request)\n"
                },
                {
                    "date": 1753333041053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -711,8 +711,16 @@\n     //     }\n     // }\n \n     public function saveFolioPersona2(Request $request)\n+{\n+    \\Log::info('TEMP DIR: ' . sys_get_temp_dir());\n+    \\Log::info('_FILES', $_FILES);\n+    \\Log::info('REQUEST', $request->all());\n+\n+    return response()->json(['message' => 'Revisado en log.'], 200);\n+}\n+    public function saveFolioPersona3(Request $request)\n     {\n         /*$fechaEmision = $request->input('fecha_emision');\n         $fechaCaducidad = $request->input('fecha_caducidad');\n         $codFolio = $request->input('codFolio');\n@@ -736,11 +744,8 @@\n         }\n     \n         return response()->json(\"hay \".$cant.\" archivos\");\n         */\n-        dd(sys_get_temp_dir());\n-        dd($_FILES);\n-        dd($request->all());\n     }\n \n     public function saveFolioPersona(Request $request)\n     {\n@@ -1081,2140 +1086,4 @@\n         return response()->json(['message' => 'Solicitud creado']);\n     }\n \n }\n-<?php\n-\n-namespace App\\Http\\Controllers;\n-\n-use App\\Helpers\\PdfHelper;\n-use App\\Helpers\\ImagenHelper;\n-use Barryvdh\\Snappy\\Facades\\SnappyPdf;\n-use Illuminate\\Http\\Request;\n-use App\\Models\\FileControl;\n-use Illuminate\\Support\\Facades\\App;\n-use Illuminate\\Support\\Facades\\Log;\n-use Illuminate\\Support\\Facades\\Http;\n-use Illuminate\\Support\\Str;\n-use Illuminate\\Support\\Facades\\File;\n-use Illuminate\\Support\\Facades\\Storage;\n-use ZipArchive;\n-\n-class FileController extends Controller{\n-    public function index(){\n-        $personal = FileControl::getPersonal();\n-        //$cargos = FileControl::getCargos();\n-        $clientes = FileControl::getClientesLegajos();\n-        $sucursales = FileControl::getSucursales();\n-\n-        return view('file_control.chargefile', compact('personal', 'clientes', 'sucursales'));\n-    }\n-\n-    public function getCargosXCliente(Request $request){\n-        $cliente = $request->input('cliente');\n-        $cargos = FileControl::getCargosXCliente($cliente);\n-        return response()->json($cargos);\n-    }\n-\n-    public function ViewDashboard(){\n-        /*$personal = FileControl::getPersonal();\n-        $cargos = FileControl::getCargos();\n-        $clientes = FileControl::getClientes();\n-        $sucursales = FileControl::getSucursales();*/\n-\n-        return view('file_control.dashboard'/*, compact('personal', 'cargos', 'clientes', 'sucursales')*/);\n-    }\n-\n-    public function getPersonal(Request $request){\n-        $personal = FileControl::getPersonal();\n-        return response()->json($personal);\n-    }\n-\n-    public function getDocumentosXPersonal($codPersonal){\n-        $docs_personal = FileControl::getDocsXPersona($codPersonal);\n-        return response()->json($docs_personal);\n-    }\n-\n-    public function getFoliosXPersonas(Request $request){\n-        $personas = $request->personas;\n-        $folios = $request->folios;\n-        $resultados = [];\n-        //Averiguando la sucursal de la persona\n-\n-\n-        foreach ($personas as $persona) {\n-            $sucursal = FileControl::getSucursalXPersona($persona['CODI_PERS']);\n-            foreach ($folios as $folio) {\n-                $datosFolioPersona = FileControl::getFoliosInfoPersona($persona['CODI_PERS'], $folio['codigo']);\n-                foreach ($datosFolioPersona as $dato) {\n-                    $resultados[] = [\n-                        //'persona' => $persona['personal'],\n-                        'persona' => $dato->personal ?? null,\n-                        'nroDoc' => $dato->nroDoc ?? null,\n-                        'codPersonal' => $persona['CODI_PERS'],\n-                        'folio' => $folio['nombre'],\n-                        'sucursal' => $sucursal,\n-                        'ruta' => $dato->ruta_archivo ?? null,\n-                        'ancho' => $dato->ancho ?? null,\n-                        'hojas' => $dato->cantidad_hojas ?? null,\n-                        'documento' => $dato->documento ?? null,\n-                        'cargo' => $dato->cargo ?? null,\n-                        'es_formato' => $dato->es_formato ?? null,\n-                    ];\n-                }\n-                /*$resultados[] = [\n-                    'persona' => $persona['personal'],\n-                    'folio' => $folio['nombre'],\n-                    'ruta' => $datosFolioPersona[0]->ruta_archivo ?? null,\n-                ];*/\n-            }\n-        }\n-        return response()->json($resultados);\n-    }\n-\n-    public function getFoliosXPersona_uno(Request $request){\n-        $persona = $request->input('codPersona');\n-        $folios = $request->folios;\n-        $resultados = [];\n-\n-        $sucursal = FileControl::getSucursalXPersona($persona);\n-\n-        foreach ($folios as $folio) {\n-            $datosFolioPersona = FileControl::getFoliosInfoPersona($persona, $folio['codigo']);\n-            foreach ($datosFolioPersona as $dato) {\n-                $resultados[] = [\n-                    'persona' => $dato->personal ?? null,\n-                    'nroDoc' => $dato->nroDoc ?? null,\n-                    'codPersonal' => $persona,\n-                    'folio' => $folio['nombre'],\n-                    'sucursal' => $sucursal,\n-                    'ruta' => $dato->ruta_archivo ?? null,\n-                    'ancho' => $dato->ancho ?? null,\n-                    'hojas' => $dato->cantidad_hojas ?? null,\n-                    'documento' => $dato->documento ?? null,\n-                    'cargo' => $dato->cargo ?? null,\n-                    'es_formato' => $dato->es_formato ?? null,\n-                ];\n-            }\n-        }\n-\n-        return response()->json($resultados);\n-    }\n-\n-    // public function generarPDFsPorPersona(Request $request){\n-    //     $resultados = $request->input('resultados');\n-\n-    //     // Agrupar todos los datos por persona\n-    //     $agrupados = [];\n-    //     foreach ($resultados as $item) {\n-    //         $cod = $item['codPersonal'];\n-    //         $agrupados[$cod][] = $item;\n-    //     }\n-\n-    //     $carpetaTemporal = storage_path('app/temp_pdfs');\n-    //     if (!File::exists($carpetaTemporal)) {\n-    //         File::makeDirectory($carpetaTemporal, 0777, true, true);\n-    //     }\n-\n-    //     $pdfsGenerados = [];\n-\n-    //     foreach ($agrupados as $codPersonal => $documentosPersona) {\n-    //         $persona = $documentosPersona[0]['persona'] ?? 'persona_sin_nombre';\n-\n-    //         // Carátula: datos únicos de persona\n-    //         $caratula = [\n-    //             'persona' => $persona,\n-    //             'codPersonal' => $codPersonal,\n-    //             'sucursal' => $documentosPersona[0]['sucursal'] ?? '',\n-    //             'cargo' => $documentosPersona[0]['cargo'] ?? '',\n-    //         ];\n-\n-    //         // Separar documentos: escaneados vs formatos Blade\n-    //         $urls = [];\n-    //         $itemsFinales = [];\n-\n-    //         foreach ($documentosPersona as $doc) {\n-    //             if (!empty($doc['ruta'])) {\n-    //                 $urls[] = [\n-    //                     'ruta' => $doc['ruta'],\n-    //                     'codPersonal' => $codPersonal,\n-    //                     'ancho' => $doc['ancho'],\n-    //                     'hojas' => $doc['hojas'],\n-    //                     'documento' => $doc['documento'],\n-    //                     'es_formato' => $doc['es_formato'],\n-    //                 ];\n-    //             }\n-\n-    //             if ($doc['es_formato'] == 1) {\n-    //                 $itemsFinales[] = [\n-    //                     'es_formato' => 1,\n-    //                     'codPersonal' => $codPersonal,\n-    //                     'documento' => $doc['documento'],\n-    //                     'nombre_vista' => $this->obtenerNombreVista($doc),\n-    //                     'datos' => $doc,\n-    //                     'firma' => public_path('temp_legajos') . '/FIRMAS/PERSONAL/' . $codPersonal . '.jpg',\n-    //                     'huella' => public_path('temp_legajos') . '/HUELLAS_DIGITALES/PERSONAL/' . $codPersonal . '.jpg',\n-    //                 ];\n-\n-    //                 // Descargar imágenes del formato (firma y huella)\n-    //                 ImagenHelper::descargarImagenesFormato($codPersonal);\n-    //             }\n-    //         }\n-\n-    //         // Descargar imágenes escaneadas\n-    //         $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n-\n-    //         foreach ($rutasLocales as $img) {\n-    //             $itemsFinales[] = [\n-    //                 'es_formato' => 0,\n-    //                 'codPersonal' => $codPersonal,\n-    //                 'ruta' => $img['ruta'],\n-    //                 'documento' => $img['documento'],\n-    //                 'hojas' => $img['hojas'],\n-    //                 'ancho' => $img['ancho'],\n-    //             ];\n-    //         }\n-\n-    //         // Render PDF de esta persona\n-    //         $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n-    //             'personas' => [$caratula], // vista espera array\n-    //             'resultados' => $documentosPersona,\n-    //             'imagenes' => $rutasLocales,\n-    //             'items' => $itemsFinales,\n-    //         ])->setOption('enable-local-file-access', true);\n-\n-    //         $nombreArchivo = 'PDF_' . Str::slug($persona) . '_' . $codPersonal . '.pdf';\n-    //         $rutaArchivo = $carpetaTemporal . '/' . $nombreArchivo;\n-\n-    //         $pdf->save($rutaArchivo);\n-    //         $pdfsGenerados[] = $rutaArchivo;\n-    //     }\n-\n-    //     // Comprimir todo en ZIP\n-    //     $zipPath = storage_path('app/documentos_por_persona.zip');\n-    //     $zip = new \\ZipArchive();\n-\n-    //     if ($zip->open($zipPath, \\ZipArchive::CREATE | \\ZipArchive::OVERWRITE) === true) {\n-    //         foreach ($pdfsGenerados as $archivo) {\n-    //             $zip->addFile($archivo, basename($archivo));\n-    //         }\n-    //         $zip->close();\n-    //     }\n-\n-    //     return response()->download($zipPath)->deleteFileAfterSend(true);\n-    // }\n-\n-    public function generarPDF_env(Request $request){\n-        echo \"Hola\";\n-    }\n-\n-    public function pdf_vacio()\n-    {\n-        // Aquí cargas una vista muy simple (puedes crear un blade vacío o con texto simple)\n-        $pdf = SnappyPdf::loadView('file_control.pdf.reporte_vacio');\n-\n-        // Lo envías para que se descargue (o inline si quieres verlo en navegador)\n-        return $pdf->inline('reporte_vacio.pdf');\n-    }\n-\n-\n-    public function generarPDF(Request $request){\n-        $resultados = $request->input('resultados');\n-        //dd($resultados);\n-        //exit;\n-        //Agrupar los datos para mostrar en la carátula\n-        $unicos = [];\n-\n-        $nombreNuevo = 'Reporte';\n-\n-        foreach ($resultados as $item) {\n-            $clave = $item['persona'] . '|' . $item['sucursal'] . '|' . $item['codPersonal'] . '|' . $item['cargo'];\n-            if(!isset($unicos[$clave])) {\n-                $unicos[$clave] = [\n-                    'persona' => $item['persona'],\n-                    'codPersonal' => $item['codPersonal'],\n-                    'sucursal' => $item['sucursal'],\n-                    'cargo' => $item['cargo'],\n-                ];\n-\n-\n-            }\n-\n-             $nombreNuevo = $item['codPersonal'].'_'.$item['persona'] . '_' . date('Ymd_Hi');\n-        }\n-\n-        $personasUnicas = array_values($unicos);\n-\n-        //Para los FORMATOS\n-        // $formatosBlade = [\n-        //     'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n-        //     'DECLARACION JURADA ' => 'file_control.pdf.declaracion_jurada',\n-        // ];\n-\n-        $urls = [];\n-\n-        foreach ($resultados as $resultado) {\n-            if (!empty($resultado['ruta']) && !empty($resultado['codPersonal'])) {\n-                $urls[] = [\n-                    'ruta' => $resultado['ruta'],\n-                    'codPersonal' => $resultado['codPersonal'],\n-                    'ancho' => $resultado['ancho'],\n-                    'hojas' => $resultado['hojas'],\n-                    'documento' => $resultado['documento'],\n-                    'es_formato' => $resultado['es_formato'],\n-                ];\n-            }\n-        };\n-\n-        $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n-\n-        $itemsFinales = [];\n-        //Los que tienen imagen en ruta\n-        foreach ($rutasLocales as $item) {\n-            $itemsFinales[] = [\n-                'es_formato' => $item['es_formato'],\n-                'codPersonal' => $item['codPersonal'],\n-                'ruta' => $item['ruta'],\n-                'documento' => $item['documento'],\n-                'hojas' => $item['hojas'],\n-                'ancho' => $item['ancho'],\n-            ];\n-        }\n-\n-        // Los que deben renderizar una vista Blade porque son formatos (es_formato == 1)\n-        foreach ($resultados as $resultado) {\n-            if ($resultado['es_formato'] == 1) {\n-                $itemsFinales[] = [\n-                    'es_formato' => $resultado['es_formato'],\n-                    'codPersonal' => $resultado['codPersonal'],\n-                    'documento' => $resultado['documento'],\n-                    'nombre_vista' => $this->obtenerNombreVista($resultado), // Función que defines\n-                    'datos' => $resultado,\n-                    'firma' => public_path('temp_legajos').'/FIRMAS/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n-                    'huella' => public_path('temp_legajos').'/HUELLAS_DIGITALES/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n-                ];\n-                //Hacer la copia local de la FIRMA y HUELLA DIGITAL\n-                $rutasLocalesFormato = ImagenHelper::descargarImagenesFormato($resultado['codPersonal']);\n-            }\n-        }\n-\n-        //print_r($itemsFinales);\n-        $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n-            'personas' => $personasUnicas,\n-            'resultados' => $resultados,\n-            'imagenes' => $rutasLocales,\n-            'items' => $itemsFinales,\n-        ])->setOption('enable-local-file-access', true);\n-\n-        return response()->streamDownload(function () use ($pdf) {\n-            echo $pdf->output();\n-        }, $nombreNuevo . '.pdf', [\n-            'Content-Type' => 'application/pdf',\n-            'X-Nombre-Archivo' => $nombreNuevo . '.pdf', // <- aquí\n-        ]);\n-    }\n-\n-    public function obtenerNombreVista($resultado) {\n-        $mapa = [\n-            'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n-            'DECLARACION JURADA DE CUMPLIMIENTO DE DISPOSICIONES' => 'file_control.pdf.declaracion_jurada',\n-            'EVALUACION DEL POSTULANTE' => 'file_control.pdf.evaluacion_postulante',\n-            'COMPROMISO DE CONFIABILIDAD' => 'file_control.pdf.compromiso_confidencialidad',\n-            'CUMPLIMIENTO DE cumpliDISPOSICION' => 'file_control.pdf.dj_complumiento_disposicion',\n-            'ESTUDIO DE SEGURIDAD DE TRABAJADORES' => 'file_control.pdf.dj_complumiento_disposicion',\n-            'VISITA DOMICILIARIA' => 'file_control.pdf.visita_domiciliaria_concluciones'\n-        ];\n-\n-        return $mapa[$resultado['documento']] ?? null;\n-    }\n-\n-    public function generarReporteConsulta(Request $request){\n-        $codigo =  $request->input('valor');\n-        $data = FileControl::getReporteFiltro($codigo);\n-        return response()->json($data);\n-    }\n-\n-\n-    public function generarPDF2(Request $request) {\n-        $resultados = $request->input('resultados');\n-        $html = '';\n-\n-        $vistas = [\n-            'file_control.pdf.evaluacion-postulante',\n-            'file_control.pdf.declaracion-jurada',\n-            'file_control.pdf.acta_compromiso',\n-            'file_control.pdf.compromiso_confidencialidad',\n-            'file_control.pdf.dj_cumplimiento_disposicion',\n-            'file_control.pdf.estudio_seguridad_empleado',\n-            'file_control.pdf.estudio_seguridad_empleado_2',\n-            'file_control.pdf.visita_domiciliaria',\n-            'file_control.pdf.visita_domiciliaria_concluciones',\n-        ];\n-\n-        foreach ($vistas as $vista) {\n-\n-            $html .= view($vista, [\n-                'resultados' => $resultados\n-            ])->render();\n-\n-            $html .= '<div style=\"page-break-after: always;\"></div>';\n-        }\n-\n-        $pdf = SnappyPdf::loadHTML($html)->setOption('enable-local-file-access', true);\n-\n-        return response($pdf->inline('reporte_completo.pdf'))->header('Content-Type', 'application/pdf');\n-    }\n-\n-    public function getAllCargo()\n-    {\n-        $data = FileControl::getAllCargo();\n-        return response()->json($data);\n-    }\n-\n-    public function getClientes(){\n-        $data = FileControl::getClientes();\n-        return response()->json($data);\n-    }\n-\n-    public function getClientesLegajos(){\n-        $data = FileControl::getClientesLegajos();\n-        return response()->json($data);\n-    }\n-\n-    public function getLegajos(Request $request)\n-    {\n-        $cliente = $request->input('cliente');\n-        $cargo = $request->input('cargo');\n-        $codPersonal = $request->input('codigo');\n-\n-        $legajos = FileControl::getLegajos($cliente, $cargo, $codPersonal);\n-        return response()->json($legajos);\n-    }\n-\n-    public function getFoliosClienteCargo(Request $request){\n-        $cliente = $request->input('cliente');\n-        $cargo = $request->input('cargo');\n-\n-        $legajos = FileControl::getFoliosClienteCargo($cliente, $cargo);\n-        return response()->json($legajos);\n-    }\n-\n-    public function getFoliosXLegajo_comercial($codCliente, $codCargo){\n-        $folios = FileControl::getFoliosXLegajo_comercial($codCliente, $codCargo);\n-        return response()->json($folios);\n-    }\n-\n-    public function getCargos(){\n-        $cargos = FileControl::getCargos();\n-        return response()->json($cargos);\n-    }\n-\n-    public function getFolios(){\n-        $folios = FileControl::getFolios();\n-        return response()->json($folios);\n-    }\n-\n-    public function ViewCargo()\n-    {\n-        $todos = \\DB::table('sw_cargos')\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $operativo = \\DB::table('sw_cargos')\n-                    ->where('cod_tipo', 1)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $administrativo = \\DB::table('sw_cargos')\n-                    ->where('cod_tipo', 2)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        return view('file_control.cargo',compact('todos', 'operativo', 'administrativo'));\n-    }\n-\n-    public function ViewLegajo()\n-    {\n-         $notif = FileControl::listarNotificaciones();\n-        return view('file_control.legajos', [\n-            'notify' => $notif\n-        ]);\n-    }\n-\n-    public function ViewFolios()\n-    {\n-        $periodos = FileControl::getPeriodos();\n-        $todos = \\DB::table('sw_folios')\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $principal = \\DB::table('sw_folios')\n-                    ->where('obligatorio', 1)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $adicional = \\DB::table('sw_folios')\n-                    ->where('obligatorio', 0)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $documento = \\DB::table('sw_folios')\n-                    ->where('tipo', 1)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $formato = \\DB::table('sw_folios')\n-                    ->where('tipo', 2)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $certificado = \\DB::table('sw_folios')\n-                    ->where('tipo', 3)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-\n-        return view('file_control.folios', compact('periodos', 'todos', 'principal', 'adicional', 'documento', 'formato', 'certificado'));\n-    }\n-\n-    public function ViewBusquedaLegajo()\n-    {\n-        $personal = FileControl::getPersonalLegajos();\n-        $cargos = FileControl::getCargos();\n-        //$clientes = FileControl::getClientes();\n-        $clientes = FileControl::getClientesLegajos();\n-\n-        return view('file_control.search_legajos', compact('personal', 'cargos', 'clientes'));\n-    }\n-\n-    public function ViewLegajoPdf()\n-    {\n-        $sucursales = FileControl::getSucursales();\n-        $cargos = FileControl::getCargos();\n-        $clientes = FileControl::getClientes();\n-        return view('file_control.legajos_pdf', compact('sucursales','cargos','clientes'));\n-    }\n-\n-    public function getPersonalLegajos(Request $request)\n-    {\n-        $personal = FileControl::getPersonalLegajos();\n-        return response()->json($personal);\n-    }\n-\n-    public function getCoincidencias(Request $request)\n-    {\n-        $cliente = $request->input('cliente');\n-        $cargo = $request->input('cargo');\n-\n-        $legajos = FileControl::getCoincidencias($cliente, $cargo);\n-        return response()->json($legajos);\n-    }\n-\n-    //GUARDAR DATOS\n-    // public function saveFolioPersona(Request $request){\n-    //     //dd($request->file('imagenes'));\n-\n-\n-    //     // Validar los datos del formulario\n-    //     $validated = $request->validate([\n-    //         'fecha_emision' => 'required|date',\n-    //         'fecha_caducidad' => 'nullable|date',\n-    //         //'file' => 'nullable|file|mimes:pdf,jpg,jpeg,png|max:1024',\n-    //     ]);\n-\n-    //     // Para guardar el arcivo con la codificación del personal\n-\n-    //     $codPersonal = $request->input('codPersonal');\n-    //     $total = count($request->file('imagenes'));\n-    //     foreach ($request->file('imagenes') as $index => $archivo) {\n-    //         //$nombre = 'folio_'.$id.'_'.$index.'.jpg';\n-    //         //Condición si es 1 archivo o varios, para asignar el nombre al archivo\n-    //         if($total == 1){\n-    //             $nameFile = $codPersonal.'.jpg';\n-    //         }else{\n-    //             $nameFile = $codPersonal.'_'.($index+1).'.jpg';\n-    //         }\n-\n-    //         // Averiguar el nombre de la carpeta o ruta donde debe de guardarse el archivo\n-    //         $rutaArchivo = FileControl::getRutaFolio($request->input('codFolio'));\n-\n-    //         //$filePath = null;\n-    //         // Llamar al microservicio para guardar el archivo en el servidor local\n-    //         //$filePath = 'http://190.116.178.163/Biblioteca_Grafica/'.$rutaArchivo.'/'.$nameFile;\n-\n-    //         $response = Http::withToken('457862h45hj7u5126h58d2s51s2s') // Autenticación con el token\n-    //             ->attach('archivo', file_get_contents($archivo), $archivo->getClientOriginalName()) // Adjuntar el archivo\n-    //             //->post('https://sisolmar.gruposolmar.pe/apps/api/file-control/charge-file.php', [\n-    //             ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n-    //                 'nameFile' => $nameFile,\n-    //                 'ruta' => $rutaArchivo\n-    //             ]);\n-\n-    //         if ($response->failed()) {\n-    //             return response()->json(['error' => 'No se pudo guardar el archivo en el servidor local'], 500);\n-    //         }\n-\n-    //         $archivo->storeAs('uploads/folios', $nameFile);\n-    //     }\n-\n-\n-\n-    //     // Llamar al método saveFolioPersonal pasando los datos y el archivo\n-    //     $inserted = FileControl::saveFolioPersonal(\n-    //         $validated['fecha_emision'],\n-    //         $validated['fecha_caducidad'],\n-    //         $request->codFolio,\n-    //         $request->codPersonal,\n-    //         //$filePath // Pasamos la ruta del archivo\n-    //     );\n-\n-    //     return response()->json(['message' => 'Folios del persona guardados']);\n-\n-    // }\n-\n-\n-     public function getViewDocumentsPer($codPersonal, $codFolio)\n-    {\n-        $result = FileControl::getViewPerDocs($codPersonal, $codFolio);\n-\n-        if (empty($result)) {\n-            return response()->json(['success' => false, 'message' => 'No se encontraron rutas'], 404);\n-        }\n-\n-        $extensiones = ['jpg', 'jpeg', 'png', 'pdf'];\n-        $rutasValidas = [];\n-\n-        foreach ($result as $item) {\n-            $rutaEncontrada = false;\n-\n-            // Probar primero con ruta_aux\n-            if (isset($item->ruta_aux)) {\n-                $rutaBase = str_replace('//', 'http://', $item->ruta_aux);\n-\n-                foreach ($extensiones as $ext) {\n-                    $rutaConExt = $rutaBase . '.' . $ext;\n-\n-                    if (self::urlExiste($rutaConExt)) {\n-                        $rutasValidas[] = $rutaConExt;\n-                        $rutaEncontrada = true;\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            // Si no se encontró nada en ruta_aux, probar con ruta\n-            if (!$rutaEncontrada && isset($item->ruta)) {\n-                $rutaBase = str_replace('//', 'http://', $item->ruta);\n-\n-                foreach ($extensiones as $ext) {\n-                    $rutaConExt = $rutaBase . '.' . $ext;\n-\n-                    if (self::urlExiste($rutaConExt)) {\n-                        $rutasValidas[] = $rutaConExt;\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-\n-        if (empty($rutasValidas)) {\n-            return response()->json([\n-                'success' => false,\n-                'message' => 'No se encontraron archivos accesibles desde la red'\n-            ]);\n-        }\n-\n-        return response()->json([\n-            'success' => true,\n-            'rutas' => $rutasValidas\n-        ]);\n-    }\n-\n-    // Función para validar si la URL existe\n-    private static function urlExiste($url)\n-    {\n-        $ch = curl_init($url);\n-        curl_setopt($ch, CURLOPT_NOBODY, true);\n-        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n-        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n-        curl_exec($ch);\n-        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n-        curl_close($ch);\n-\n-        return $statusCode === 200;\n-    }\n-\n-\n-\n-    // public function saveFolioPersona(Request $request)\n-    // {\n-    //     $validated = $request->validate([\n-    //         'fecha_emision'     => 'required|date',\n-    //         'fecha_caducidad'   => 'nullable|date',\n-    //         'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n-    //         'codPersonal'       => 'required|string',\n-    //         'codFolio'          => 'required|string',\n-    //     ]);\n-\n-    //     try {\n-    //         $codPersonal = $validated['codPersonal'];\n-    //         $codFolio    = $validated['codFolio'];\n-    //         $archivos    = $request->file('imagenes');\n-    //         $total       = count($archivos);\n-\n-    //         // Obtener ruta lógica relativa\n-    //         $subCarpeta = FileControl::getRutaFolio($codFolio); // Ejemplo: \"FOLIOS/2025/F123\"\n-\n-    //         foreach ($archivos as $index => $archivo) {\n-    //             $nombreArchivo = ($total === 1)\n-    //                 ? \"{$codPersonal}.jpg\"\n-    //                 : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n-\n-    //             $rutaRelativa = $subCarpeta . '/' . $nombreArchivo;\n-\n-    //             if (App::environment('local')) {\n-    //                 // Guardado directo en ruta de red en entorno local\n-    //                 $rutaFinal = \"\\\\\\\\192.168.10.5:86\\\\sisolmar\\\\DATA_SISOLMAR\\\\\" . $subCarpeta . \"\\\\\" . $nombreArchivo;\n-\n-    //                 if (!file_exists(dirname($rutaFinal))) {\n-    //                     mkdir(dirname($rutaFinal), 0777, true);\n-    //                 }\n-\n-    //                 file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n-    //             }\n-\n-    //             if (App::environment('production')) {\n-    //                 // Guardado en D:\\ mediante Storage\n-    //                 Storage::disk('disk_d')->put($rutaRelativa, file_get_contents($archivo->getRealPath()));\n-    //             }\n-    //         }\n-\n-    //         // Lógica adicional de BD\n-    //         FileControl::saveFolioPersonal(\n-    //             $validated['fecha_emision'],\n-    //             $validated['fecha_caducidad'],\n-    //             $codFolio,\n-    //             $codPersonal\n-    //         );\n-\n-    //         return response()->json(['message' => 'Folios del personal guardados correctamente.']);\n-\n-    //     } catch (\\Exception $e) {\n-    //         Log::error('Error al guardar folios: ' . $e->getMessage());\n-    //         return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n-    //     }\n-    // }\n-\n-    public function saveFolioPersona2(Request $request)\n-    {\n-        /*$fechaEmision = $request->input('fecha_emision');\n-        $fechaCaducidad = $request->input('fecha_caducidad');\n-        $codFolio = $request->input('codFolio');\n-        $codPersonal = $request->input('codPersonal');\n-\n-        $inserted = FileControl::saveFolioPersonal($fechaEmision,$fechaCaducidad,$codFolio,$codPersonal);\n-\n-        if ($inserted) {\n-            return response()->json(['success' => true, 'message' => 'El folio del personal, guardado correctamente']);\n-        } else {\n-            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n-        }*/\n-        $cant = 0;\n-        if ($request->hasFile('archivos')) {\n-            foreach ($request->file('archivos') as $archivo) {\n-                //$nombre = time() . '_' . $archivo->getClientOriginalName();\n-                //$archivo->move(public_path('archivos_folio'), $nombre);\n-                $cant = $cant + 1;\n-            }\n-        }\n-    \n-        return response()->json(\"hay \".$cant.\" archivos\");\n-    }\n-\n-    public function saveFolioPersona(Request $request)\n-    {\n-        $request->validate([\n-            'fecha_emision' => 'required|date',\n-            'fecha_caducidad' => 'nullable|date',\n-            'codFolio' => 'required|integer',\n-            'codPersonal' => 'required|string',\n-            'imagenes' => 'required|array',\n-            'imagenes.*' => 'image|max:5120' // máximo 5MB por imagen (ajusta según tu necesidad)\n-        ]);\n-\n-        $fechaEmision = $request->input('fecha_emision');\n-        $fechaCaducidad = $request->input('fecha_caducidad');\n-        $codFolio = $request->input('codFolio');\n-        $codPersonal = $request->input('codPersonal');\n-        $imagenes = $request->file('imagenes');\n-\n-        // Obtiene las rutas de carpeta según el folio\n-        $subCarpetas = FileControl::getRutaFolio($codFolio); // devuelve un array de rutas\n-\n-        print_r($subCarpetas);\n-        /*\n-        if (count($subCarpetas) !== count($imagenes)) {\n-            return response()->json([\n-                'error' => 'El número de imágenes no coincide con el número de rutas esperadas para el folio.'\n-            ], 400);\n-        }\n-\n-        foreach ($imagenes as $index => $imagen) {\n-            $rutaSubcarpeta = $subCarpetas[$index] ?? null;\n-\n-            if (!$rutaSubcarpeta) {\n-                continue; // O lanza un error si lo prefieres\n-            }\n-\n-            $rutaDestino = public_path('Biblioteca_Grafica/' . $rutaSubcarpeta);\n-\n-            // Crea la carpeta si no existe\n-            if (!file_exists($rutaDestino)) {\n-                mkdir($rutaDestino, 0777, true);\n-            }\n-\n-            // Guarda la imagen con el nombre del codPersonal\n-            $nombreArchivo = $codPersonal . '.' . $imagen->getClientOriginalExtension();\n-\n-            $imagen->move($rutaDestino, $nombreArchivo);\n-        }\n-\n-        // Aquí podrías guardar los datos en la BD si lo necesitas\n-        // ...\n-\n-        return response()->json([\n-            'message' => 'Folio guardado exitosamente.',\n-        ]);\n-        */\n-    }\n-\n-\n-    //DE EVER\n-    /*public function saveFolioPersona(Request $request)\n-    {\n-        $validated = $request->validate([\n-            'fecha_emision'     => 'required|date',\n-            'fecha_caducidad'   => 'nullable|date',\n-            'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n-            'codPersonal'       => 'required|string',\n-            'codFolio'          => 'required|string',\n-        ]);\n-\n-        try {\n-            $codPersonal = $validated['codPersonal'];\n-            $codFolio    = $validated['codFolio'];\n-            $archivos    = $request->file('imagenes');\n-            $total       = count($archivos);\n-\n-            // Subcarpeta relativa dentro de public/\n-            $subCarpeta = FileControl::getRutaFolio($codFolio); // ejemplo: \"folios/F123\"\n-            $rutaBase = public_path($subCarpeta);\n-\n-            if (!File::exists($rutaBase)) {\n-                File::makeDirectory($rutaBase, 0777, true);\n-            }\n-\n-            foreach ($archivos as $index => $archivo) {\n-                $nombreArchivo = ($total === 1)\n-                    ? \"{$codPersonal}.jpg\"\n-                    : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n-\n-                $rutaFinal = $rutaBase . '/' . $nombreArchivo;\n-\n-                // Guardar archivo en public/\n-                file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n-            }\n-\n-            // Guardar en BD\n-            FileControl::saveFolioPersonal(\n-                $validated['fecha_emision'],\n-                $validated['fecha_caducidad'],\n-                $codFolio,\n-                $codPersonal\n-            );\n-\n-            return response()->json(['message' => 'Folios guardados correctamente.']);\n-\n-        } catch (\\Exception $e) {\n-            Log::error('Error al guardar folios en public/: ' . $e->getMessage());\n-            return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n-        }\n-    }\n-        */\n-\n-    public function saveFolio(Request $request)\n-    {\n-        $codigo = $request->input('codigo');\n-        $nombre = $request->input('nombre');\n-        $tipo = $request->input('tipo');\n-        $obligatorio = $request->input('obligatorio');\n-        $vencimiento = $request->input('vencimiento');\n-        $tipo_fecha = $request->input('periodo');\n-        $plataforma = $request->input('plataforma');\n-\n-        if (empty($codigo)) {\n-            $inserted = FileControl::saveFolio($nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n-        } else {\n-            $inserted = FileControl::updateFolio($codigo, $nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n-        }\n-\n-        if ($inserted) {\n-            return response()->json(['success' => true, 'message' => 'Folio guardado correctamente']);\n-        } else {\n-            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n-        }\n-\n-        //return response()->json(['message' => 'Folios creados']);\n-    }\n-\n-    public function disabledFolio(Request $request){\n-        $codigo = $request->codigo;\n-        $result = FileControl::disabledFolio($codigo);\n-\n-        if ($result) {\n-            return response()->json(['message' => 'Folio deshabilitado exitosamente'], 200);\n-        } else {\n-            return response()->json(['message' => 'Folio no encontrado o error al deshabilitar'], 404);\n-        }\n-    }\n-\n-    public function saveCargo(Request $request){\n-        $descripcion = $request->input('descripcion');\n-        $nombre = $request->input('nombre');\n-        $cod_tipo = $request->input('tipoCargo');\n-        $abreviatura = $request->input('abreviatura');\n-        $cod_servicio = $request->input('codPosicion');\n-        $cod_subservicio = $request->input('codGrupo');\n-        $cod_area = $request->input('codArea');\n-\n-        $usuario = session('usuario');\n-\n-        $inserted = FileControl::saveCargo($descripcion, $nombre, $abreviatura, $cod_servicio, $cod_subservicio, $cod_tipo, $cod_area, $usuario);\n-\n-        return response()->json(['message' => 'Cargo creado']);\n-    }\n-\n-    public function dashboard()\n-    {\n-        return view('file_control.dashboard');\n-    }\n-\n-    //-----------------\n-\n-    public function getFoliosXLegajo($codCliente, $codCargo){\n-        $folios = FileControl::getFoliosXLegajo($codCliente, $codCargo);\n-        return response()->json($folios);\n-    }\n-\n-    public function getAreas(){\n-        $areas = FileControl::getAreas();\n-        return response()->json($areas);\n-    }\n-\n-    public function getPosicion(){\n-        $data = FileControl::getPosicion();\n-        return response()->json($data);\n-    }\n-\n-    public function getGrupo(){\n-        $data = FileControl::getGrupo();\n-        return response()->json($data);\n-    }\n-\n-    public function getGrupoId($codigo){\n-        //$codigo = $request->input('codigo');\n-        $data = FileControl::getGrupoId($codigo);\n-        return response()->json($data);\n-    }\n-\n-    public function saveLegajo(Request $request){\n-        $folios = $request->input('folios');\n-        $codCliente = $request->input('codCliente');\n-        $codCargo = $request->input('codCargo');\n-        $codLegajo = $request->input('codLegajo');\n-        $nombre  = $request->input('nombre');\n-\n-        $usuario = session('usuario');\n-\n-        if($codLegajo != '0'){//MODIFICAR LEGAJO\n-            $codigos = FileControl::QuitarTodosLegajos($codLegajo, $usuario);\n-\n-            for ($i = 0; $i < count($codigos); $i++) {\n-                if (!in_array($codigos[$i], $folios)) {\n-                    FileControl::actualizarNotificacionDes($codigos[$i], $codCliente, $codCargo);\n-                }\n-            }\n-\n-            for($i = 0; $i < count($folios); $i++){\n-                $folio = $folios[$i];\n-                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $codLegajo);\n-                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n-\n-                if(empty($validar)){\n-                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n-                }else{\n-                    FileControl::updateLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n-                }\n-            }\n-        }else{//CREAR NUEVO LEGAJO\n-            $legajo = FileControl::saveLegajoMain($nombre);\n-\n-            for($i = 0; $i < count($folios); $i++){\n-                $folio = $folios[$i];\n-                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $legajo);\n-                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n-                if(empty($validar)){\n-                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $legajo, $usuario);\n-                }\n-\n-            }\n-        }\n-    }\n-\n-    /* GESTION DE CARGOS */\n-    public function insertarCargo(Request $request)\n-    {\n-        $tipo = $request->input('tipoCargo');\n-        $codArea = $request->input('codArea');\n-        $nombre = $request->input('nombre');\n-        $descripcion = $request->input('descripcion');\n-        $abreviatura = $request->input('abreviatura');\n-        $codPosicion = $request->input('codPosicion');\n-        $codGrupo = $request->input('codGrupo');\n-\n-        $data = [\n-            $tipo,\n-            $codArea,\n-            $nombre,\n-            $descripcion,\n-            $abreviatura,\n-            $codPosicion,\n-            $codGrupo,\n-            'SISTEMA'\n-        ];\n-\n-        $inserted = FileControl::insertarCargo($data);\n-\n-        return response()->json(['message' => 'Cargo creado']);\n-    }\n-    public function updateCargo(Request $request)\n-    {\n-        $tipo = $request->input('tipoCargo');\n-        $codArea = $request->input('codArea');\n-        $nombre = $request->input('nombre');\n-        $descripcion = $request->input('descripcion');\n-        $abreviatura = $request->input('abreviatura');\n-        $codPosicion = $request->input('codPosicion');\n-        $codGrupo = $request->input('codGrupo');\n-        $codigo = $request->input('codigo');\n-\n-        $data = [\n-            $codigo,\n-            $tipo,\n-            $codArea,\n-            $nombre,\n-            $descripcion,\n-            $abreviatura,\n-            $codPosicion,\n-            $codGrupo,\n-            'SISTEMA'\n-        ];\n-\n-        $inserted = FileControl::updateCargo($data);\n-\n-\n-        if ($inserted) {\n-            return response()->json(['success' => true, 'message' => 'Cargo modificado correctamente']);\n-        } else {\n-            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n-        }\n-\n-        //return response()->json(['message' => 'Folios creados']);\n-    }\n-\n-\n-    public function getCargosXCodigo($codigo){\n-        $data = FileControl::getCargosXCodigo($codigo);\n-        return response()->json($data);\n-    }\n-\n-\n-    public function eliminarCargo(Request $request){\n-        $codigo = $request->input('codigo');\n-        $data = 0;\n-        $inserted = FileControl::activarCargo($codigo, $data);\n-        return response()->json(['message' => 'Cargo modificdo']);\n-    }\n-\n-    public function activarCargo(Request $request){\n-        $codigo = $request->input('codigo');\n-        $data = 1;\n-        $inserted = FileControl::activarCargo($codigo, $data);\n-        return response()->json(['message' => 'Cargo modificdo']);\n-    }\n-\n-    public function ViewLegajo_comercial(){\n-\n-        return view('file_control.legajos_comercial');\n-    }\n-\n-    public function saveSolicitud(Request $request){\n-        $codigo = $request->input('codigo');\n-        $tiene = $request->input('tiene');\n-        $cargo = $request->input('cargo');\n-        $cliente = $request->input('cliente');\n-\n-        $usuario = session('usuario');\n-\n-        FileControl::saveSolicitud($codigo, $tiene, $cargo, $cliente, $usuario);\n-        return response()->json(['message' => 'Solicitud creado']);\n-    }\n-\n-}\n-<?php\n-\n-namespace App\\Http\\Controllers;\n-\n-use App\\Helpers\\PdfHelper;\n-use App\\Helpers\\ImagenHelper;\n-use Barryvdh\\Snappy\\Facades\\SnappyPdf;\n-use Illuminate\\Http\\Request;\n-use App\\Models\\FileControl;\n-use Illuminate\\Support\\Facades\\App;\n-use Illuminate\\Support\\Facades\\Log;\n-use Illuminate\\Support\\Facades\\Http;\n-use Illuminate\\Support\\Str;\n-use Illuminate\\Support\\Facades\\File;\n-use Illuminate\\Support\\Facades\\Storage;\n-use ZipArchive;\n-\n-class FileController extends Controller{\n-    public function index(){\n-        $personal = FileControl::getPersonal();\n-        //$cargos = FileControl::getCargos();\n-        $clientes = FileControl::getClientesLegajos();\n-        $sucursales = FileControl::getSucursales();\n-\n-        return view('file_control.chargefile', compact('personal', 'clientes', 'sucursales'));\n-    }\n-\n-    public function getCargosXCliente(Request $request){\n-        $cliente = $request->input('cliente');\n-        $cargos = FileControl::getCargosXCliente($cliente);\n-        return response()->json($cargos);\n-    }\n-\n-    public function ViewDashboard(){\n-        /*$personal = FileControl::getPersonal();\n-        $cargos = FileControl::getCargos();\n-        $clientes = FileControl::getClientes();\n-        $sucursales = FileControl::getSucursales();*/\n-\n-        return view('file_control.dashboard'/*, compact('personal', 'cargos', 'clientes', 'sucursales')*/);\n-    }\n-\n-    public function getPersonal(Request $request){\n-        $personal = FileControl::getPersonal();\n-        return response()->json($personal);\n-    }\n-\n-    public function getDocumentosXPersonal($codPersonal){\n-        $docs_personal = FileControl::getDocsXPersona($codPersonal);\n-        return response()->json($docs_personal);\n-    }\n-\n-    public function getFoliosXPersonas(Request $request){\n-        $personas = $request->personas;\n-        $folios = $request->folios;\n-        $resultados = [];\n-        //Averiguando la sucursal de la persona\n-\n-\n-        foreach ($personas as $persona) {\n-            $sucursal = FileControl::getSucursalXPersona($persona['CODI_PERS']);\n-            foreach ($folios as $folio) {\n-                $datosFolioPersona = FileControl::getFoliosInfoPersona($persona['CODI_PERS'], $folio['codigo']);\n-                foreach ($datosFolioPersona as $dato) {\n-                    $resultados[] = [\n-                        //'persona' => $persona['personal'],\n-                        'persona' => $dato->personal ?? null,\n-                        'nroDoc' => $dato->nroDoc ?? null,\n-                        'codPersonal' => $persona['CODI_PERS'],\n-                        'folio' => $folio['nombre'],\n-                        'sucursal' => $sucursal,\n-                        'ruta' => $dato->ruta_archivo ?? null,\n-                        'ancho' => $dato->ancho ?? null,\n-                        'hojas' => $dato->cantidad_hojas ?? null,\n-                        'documento' => $dato->documento ?? null,\n-                        'cargo' => $dato->cargo ?? null,\n-                        'es_formato' => $dato->es_formato ?? null,\n-                    ];\n-                }\n-                /*$resultados[] = [\n-                    'persona' => $persona['personal'],\n-                    'folio' => $folio['nombre'],\n-                    'ruta' => $datosFolioPersona[0]->ruta_archivo ?? null,\n-                ];*/\n-            }\n-        }\n-        return response()->json($resultados);\n-    }\n-\n-    public function getFoliosXPersona_uno(Request $request){\n-        $persona = $request->input('codPersona');\n-        $folios = $request->folios;\n-        $resultados = [];\n-\n-        $sucursal = FileControl::getSucursalXPersona($persona);\n-\n-        foreach ($folios as $folio) {\n-            $datosFolioPersona = FileControl::getFoliosInfoPersona($persona, $folio['codigo']);\n-            foreach ($datosFolioPersona as $dato) {\n-                $resultados[] = [\n-                    'persona' => $dato->personal ?? null,\n-                    'nroDoc' => $dato->nroDoc ?? null,\n-                    'codPersonal' => $persona,\n-                    'folio' => $folio['nombre'],\n-                    'sucursal' => $sucursal,\n-                    'ruta' => $dato->ruta_archivo ?? null,\n-                    'ancho' => $dato->ancho ?? null,\n-                    'hojas' => $dato->cantidad_hojas ?? null,\n-                    'documento' => $dato->documento ?? null,\n-                    'cargo' => $dato->cargo ?? null,\n-                    'es_formato' => $dato->es_formato ?? null,\n-                ];\n-            }\n-        }\n-\n-        return response()->json($resultados);\n-    }\n-\n-    // public function generarPDFsPorPersona(Request $request){\n-    //     $resultados = $request->input('resultados');\n-\n-    //     // Agrupar todos los datos por persona\n-    //     $agrupados = [];\n-    //     foreach ($resultados as $item) {\n-    //         $cod = $item['codPersonal'];\n-    //         $agrupados[$cod][] = $item;\n-    //     }\n-\n-    //     $carpetaTemporal = storage_path('app/temp_pdfs');\n-    //     if (!File::exists($carpetaTemporal)) {\n-    //         File::makeDirectory($carpetaTemporal, 0777, true, true);\n-    //     }\n-\n-    //     $pdfsGenerados = [];\n-\n-    //     foreach ($agrupados as $codPersonal => $documentosPersona) {\n-    //         $persona = $documentosPersona[0]['persona'] ?? 'persona_sin_nombre';\n-\n-    //         // Carátula: datos únicos de persona\n-    //         $caratula = [\n-    //             'persona' => $persona,\n-    //             'codPersonal' => $codPersonal,\n-    //             'sucursal' => $documentosPersona[0]['sucursal'] ?? '',\n-    //             'cargo' => $documentosPersona[0]['cargo'] ?? '',\n-    //         ];\n-\n-    //         // Separar documentos: escaneados vs formatos Blade\n-    //         $urls = [];\n-    //         $itemsFinales = [];\n-\n-    //         foreach ($documentosPersona as $doc) {\n-    //             if (!empty($doc['ruta'])) {\n-    //                 $urls[] = [\n-    //                     'ruta' => $doc['ruta'],\n-    //                     'codPersonal' => $codPersonal,\n-    //                     'ancho' => $doc['ancho'],\n-    //                     'hojas' => $doc['hojas'],\n-    //                     'documento' => $doc['documento'],\n-    //                     'es_formato' => $doc['es_formato'],\n-    //                 ];\n-    //             }\n-\n-    //             if ($doc['es_formato'] == 1) {\n-    //                 $itemsFinales[] = [\n-    //                     'es_formato' => 1,\n-    //                     'codPersonal' => $codPersonal,\n-    //                     'documento' => $doc['documento'],\n-    //                     'nombre_vista' => $this->obtenerNombreVista($doc),\n-    //                     'datos' => $doc,\n-    //                     'firma' => public_path('temp_legajos') . '/FIRMAS/PERSONAL/' . $codPersonal . '.jpg',\n-    //                     'huella' => public_path('temp_legajos') . '/HUELLAS_DIGITALES/PERSONAL/' . $codPersonal . '.jpg',\n-    //                 ];\n-\n-    //                 // Descargar imágenes del formato (firma y huella)\n-    //                 ImagenHelper::descargarImagenesFormato($codPersonal);\n-    //             }\n-    //         }\n-\n-    //         // Descargar imágenes escaneadas\n-    //         $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n-\n-    //         foreach ($rutasLocales as $img) {\n-    //             $itemsFinales[] = [\n-    //                 'es_formato' => 0,\n-    //                 'codPersonal' => $codPersonal,\n-    //                 'ruta' => $img['ruta'],\n-    //                 'documento' => $img['documento'],\n-    //                 'hojas' => $img['hojas'],\n-    //                 'ancho' => $img['ancho'],\n-    //             ];\n-    //         }\n-\n-    //         // Render PDF de esta persona\n-    //         $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n-    //             'personas' => [$caratula], // vista espera array\n-    //             'resultados' => $documentosPersona,\n-    //             'imagenes' => $rutasLocales,\n-    //             'items' => $itemsFinales,\n-    //         ])->setOption('enable-local-file-access', true);\n-\n-    //         $nombreArchivo = 'PDF_' . Str::slug($persona) . '_' . $codPersonal . '.pdf';\n-    //         $rutaArchivo = $carpetaTemporal . '/' . $nombreArchivo;\n-\n-    //         $pdf->save($rutaArchivo);\n-    //         $pdfsGenerados[] = $rutaArchivo;\n-    //     }\n-\n-    //     // Comprimir todo en ZIP\n-    //     $zipPath = storage_path('app/documentos_por_persona.zip');\n-    //     $zip = new \\ZipArchive();\n-\n-    //     if ($zip->open($zipPath, \\ZipArchive::CREATE | \\ZipArchive::OVERWRITE) === true) {\n-    //         foreach ($pdfsGenerados as $archivo) {\n-    //             $zip->addFile($archivo, basename($archivo));\n-    //         }\n-    //         $zip->close();\n-    //     }\n-\n-    //     return response()->download($zipPath)->deleteFileAfterSend(true);\n-    // }\n-\n-    public function generarPDF_env(Request $request){\n-        echo \"Hola\";\n-    }\n-\n-    public function pdf_vacio()\n-    {\n-        // Aquí cargas una vista muy simple (puedes crear un blade vacío o con texto simple)\n-        $pdf = SnappyPdf::loadView('file_control.pdf.reporte_vacio');\n-\n-        // Lo envías para que se descargue (o inline si quieres verlo en navegador)\n-        return $pdf->inline('reporte_vacio.pdf');\n-    }\n-\n-\n-    public function generarPDF(Request $request){\n-        $resultados = $request->input('resultados');\n-        //dd($resultados);\n-        //exit;\n-        //Agrupar los datos para mostrar en la carátula\n-        $unicos = [];\n-\n-        $nombreNuevo = 'Reporte';\n-\n-        foreach ($resultados as $item) {\n-            $clave = $item['persona'] . '|' . $item['sucursal'] . '|' . $item['codPersonal'] . '|' . $item['cargo'];\n-            if(!isset($unicos[$clave])) {\n-                $unicos[$clave] = [\n-                    'persona' => $item['persona'],\n-                    'codPersonal' => $item['codPersonal'],\n-                    'sucursal' => $item['sucursal'],\n-                    'cargo' => $item['cargo'],\n-                ];\n-\n-\n-            }\n-\n-             $nombreNuevo = $item['codPersonal'].'_'.$item['persona'] . '_' . date('Ymd_Hi');\n-        }\n-\n-        $personasUnicas = array_values($unicos);\n-\n-        //Para los FORMATOS\n-        // $formatosBlade = [\n-        //     'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n-        //     'DECLARACION JURADA ' => 'file_control.pdf.declaracion_jurada',\n-        // ];\n-\n-        $urls = [];\n-\n-        foreach ($resultados as $resultado) {\n-            if (!empty($resultado['ruta']) && !empty($resultado['codPersonal'])) {\n-                $urls[] = [\n-                    'ruta' => $resultado['ruta'],\n-                    'codPersonal' => $resultado['codPersonal'],\n-                    'ancho' => $resultado['ancho'],\n-                    'hojas' => $resultado['hojas'],\n-                    'documento' => $resultado['documento'],\n-                    'es_formato' => $resultado['es_formato'],\n-                ];\n-            }\n-        };\n-\n-        $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n-\n-        $itemsFinales = [];\n-        //Los que tienen imagen en ruta\n-        foreach ($rutasLocales as $item) {\n-            $itemsFinales[] = [\n-                'es_formato' => $item['es_formato'],\n-                'codPersonal' => $item['codPersonal'],\n-                'ruta' => $item['ruta'],\n-                'documento' => $item['documento'],\n-                'hojas' => $item['hojas'],\n-                'ancho' => $item['ancho'],\n-            ];\n-        }\n-\n-        // Los que deben renderizar una vista Blade porque son formatos (es_formato == 1)\n-        foreach ($resultados as $resultado) {\n-            if ($resultado['es_formato'] == 1) {\n-                $itemsFinales[] = [\n-                    'es_formato' => $resultado['es_formato'],\n-                    'codPersonal' => $resultado['codPersonal'],\n-                    'documento' => $resultado['documento'],\n-                    'nombre_vista' => $this->obtenerNombreVista($resultado), // Función que defines\n-                    'datos' => $resultado,\n-                    'firma' => public_path('temp_legajos').'/FIRMAS/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n-                    'huella' => public_path('temp_legajos').'/HUELLAS_DIGITALES/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n-                ];\n-                //Hacer la copia local de la FIRMA y HUELLA DIGITAL\n-                $rutasLocalesFormato = ImagenHelper::descargarImagenesFormato($resultado['codPersonal']);\n-            }\n-        }\n-\n-        //print_r($itemsFinales);\n-        $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n-            'personas' => $personasUnicas,\n-            'resultados' => $resultados,\n-            'imagenes' => $rutasLocales,\n-            'items' => $itemsFinales,\n-        ])->setOption('enable-local-file-access', true);\n-\n-        return response()->streamDownload(function () use ($pdf) {\n-            echo $pdf->output();\n-        }, $nombreNuevo . '.pdf', [\n-            'Content-Type' => 'application/pdf',\n-            'X-Nombre-Archivo' => $nombreNuevo . '.pdf', // <- aquí\n-        ]);\n-    }\n-\n-    public function obtenerNombreVista($resultado) {\n-        $mapa = [\n-            'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n-            'DECLARACION JURADA DE CUMPLIMIENTO DE DISPOSICIONES' => 'file_control.pdf.declaracion_jurada',\n-            'EVALUACION DEL POSTULANTE' => 'file_control.pdf.evaluacion_postulante',\n-            'COMPROMISO DE CONFIABILIDAD' => 'file_control.pdf.compromiso_confidencialidad',\n-            'CUMPLIMIENTO DE cumpliDISPOSICION' => 'file_control.pdf.dj_complumiento_disposicion',\n-            'ESTUDIO DE SEGURIDAD DE TRABAJADORES' => 'file_control.pdf.dj_complumiento_disposicion',\n-            'VISITA DOMICILIARIA' => 'file_control.pdf.visita_domiciliaria_concluciones'\n-        ];\n-\n-        return $mapa[$resultado['documento']] ?? null;\n-    }\n-\n-    public function generarReporteConsulta(Request $request){\n-        $codigo =  $request->input('valor');\n-        $data = FileControl::getReporteFiltro($codigo);\n-        return response()->json($data);\n-    }\n-\n-\n-    public function generarPDF2(Request $request) {\n-        $resultados = $request->input('resultados');\n-        $html = '';\n-\n-        $vistas = [\n-            'file_control.pdf.evaluacion-postulante',\n-            'file_control.pdf.declaracion-jurada',\n-            'file_control.pdf.acta_compromiso',\n-            'file_control.pdf.compromiso_confidencialidad',\n-            'file_control.pdf.dj_cumplimiento_disposicion',\n-            'file_control.pdf.estudio_seguridad_empleado',\n-            'file_control.pdf.estudio_seguridad_empleado_2',\n-            'file_control.pdf.visita_domiciliaria',\n-            'file_control.pdf.visita_domiciliaria_concluciones',\n-        ];\n-\n-        foreach ($vistas as $vista) {\n-\n-            $html .= view($vista, [\n-                'resultados' => $resultados\n-            ])->render();\n-\n-            $html .= '<div style=\"page-break-after: always;\"></div>';\n-        }\n-\n-        $pdf = SnappyPdf::loadHTML($html)->setOption('enable-local-file-access', true);\n-\n-        return response($pdf->inline('reporte_completo.pdf'))->header('Content-Type', 'application/pdf');\n-    }\n-\n-    public function getAllCargo()\n-    {\n-        $data = FileControl::getAllCargo();\n-        return response()->json($data);\n-    }\n-\n-    public function getClientes(){\n-        $data = FileControl::getClientes();\n-        return response()->json($data);\n-    }\n-\n-    public function getClientesLegajos(){\n-        $data = FileControl::getClientesLegajos();\n-        return response()->json($data);\n-    }\n-\n-    public function getLegajos(Request $request)\n-    {\n-        $cliente = $request->input('cliente');\n-        $cargo = $request->input('cargo');\n-        $codPersonal = $request->input('codigo');\n-\n-        $legajos = FileControl::getLegajos($cliente, $cargo, $codPersonal);\n-        return response()->json($legajos);\n-    }\n-\n-    public function getFoliosClienteCargo(Request $request){\n-        $cliente = $request->input('cliente');\n-        $cargo = $request->input('cargo');\n-\n-        $legajos = FileControl::getFoliosClienteCargo($cliente, $cargo);\n-        return response()->json($legajos);\n-    }\n-\n-    public function getFoliosXLegajo_comercial($codCliente, $codCargo){\n-        $folios = FileControl::getFoliosXLegajo_comercial($codCliente, $codCargo);\n-        return response()->json($folios);\n-    }\n-\n-    public function getCargos(){\n-        $cargos = FileControl::getCargos();\n-        return response()->json($cargos);\n-    }\n-\n-    public function getFolios(){\n-        $folios = FileControl::getFolios();\n-        return response()->json($folios);\n-    }\n-\n-    public function ViewCargo()\n-    {\n-        $todos = \\DB::table('sw_cargos')\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $operativo = \\DB::table('sw_cargos')\n-                    ->where('cod_tipo', 1)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $administrativo = \\DB::table('sw_cargos')\n-                    ->where('cod_tipo', 2)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        return view('file_control.cargo',compact('todos', 'operativo', 'administrativo'));\n-    }\n-\n-    public function ViewLegajo()\n-    {\n-         $notif = FileControl::listarNotificaciones();\n-        return view('file_control.legajos', [\n-            'notify' => $notif\n-        ]);\n-    }\n-\n-    public function ViewFolios()\n-    {\n-        $periodos = FileControl::getPeriodos();\n-        $todos = \\DB::table('sw_folios')\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $principal = \\DB::table('sw_folios')\n-                    ->where('obligatorio', 1)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $adicional = \\DB::table('sw_folios')\n-                    ->where('obligatorio', 0)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $documento = \\DB::table('sw_folios')\n-                    ->where('tipo', 1)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $formato = \\DB::table('sw_folios')\n-                    ->where('tipo', 2)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $certificado = \\DB::table('sw_folios')\n-                    ->where('tipo', 3)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-\n-        return view('file_control.folios', compact('periodos', 'todos', 'principal', 'adicional', 'documento', 'formato', 'certificado'));\n-    }\n-\n-    public function ViewBusquedaLegajo()\n-    {\n-        $personal = FileControl::getPersonalLegajos();\n-        $cargos = FileControl::getCargos();\n-        //$clientes = FileControl::getClientes();\n-        $clientes = FileControl::getClientesLegajos();\n-\n-        return view('file_control.search_legajos', compact('personal', 'cargos', 'clientes'));\n-    }\n-\n-    public function ViewLegajoPdf()\n-    {\n-        $sucursales = FileControl::getSucursales();\n-        $cargos = FileControl::getCargos();\n-        $clientes = FileControl::getClientes();\n-        return view('file_control.legajos_pdf', compact('sucursales','cargos','clientes'));\n-    }\n-\n-    public function getPersonalLegajos(Request $request)\n-    {\n-        $personal = FileControl::getPersonalLegajos();\n-        return response()->json($personal);\n-    }\n-\n-    public function getCoincidencias(Request $request)\n-    {\n-        $cliente = $request->input('cliente');\n-        $cargo = $request->input('cargo');\n-\n-        $legajos = FileControl::getCoincidencias($cliente, $cargo);\n-        return response()->json($legajos);\n-    }\n-\n-    //GUARDAR DATOS\n-    // public function saveFolioPersona(Request $request){\n-    //     //dd($request->file('imagenes'));\n-\n-\n-    //     // Validar los datos del formulario\n-    //     $validated = $request->validate([\n-    //         'fecha_emision' => 'required|date',\n-    //         'fecha_caducidad' => 'nullable|date',\n-    //         //'file' => 'nullable|file|mimes:pdf,jpg,jpeg,png|max:1024',\n-    //     ]);\n-\n-    //     // Para guardar el arcivo con la codificación del personal\n-\n-    //     $codPersonal = $request->input('codPersonal');\n-    //     $total = count($request->file('imagenes'));\n-    //     foreach ($request->file('imagenes') as $index => $archivo) {\n-    //         //$nombre = 'folio_'.$id.'_'.$index.'.jpg';\n-    //         //Condición si es 1 archivo o varios, para asignar el nombre al archivo\n-    //         if($total == 1){\n-    //             $nameFile = $codPersonal.'.jpg';\n-    //         }else{\n-    //             $nameFile = $codPersonal.'_'.($index+1).'.jpg';\n-    //         }\n-\n-    //         // Averiguar el nombre de la carpeta o ruta donde debe de guardarse el archivo\n-    //         $rutaArchivo = FileControl::getRutaFolio($request->input('codFolio'));\n-\n-    //         //$filePath = null;\n-    //         // Llamar al microservicio para guardar el archivo en el servidor local\n-    //         //$filePath = 'http://190.116.178.163/Biblioteca_Grafica/'.$rutaArchivo.'/'.$nameFile;\n-\n-    //         $response = Http::withToken('457862h45hj7u5126h58d2s51s2s') // Autenticación con el token\n-    //             ->attach('archivo', file_get_contents($archivo), $archivo->getClientOriginalName()) // Adjuntar el archivo\n-    //             //->post('https://sisolmar.gruposolmar.pe/apps/api/file-control/charge-file.php', [\n-    //             ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n-    //                 'nameFile' => $nameFile,\n-    //                 'ruta' => $rutaArchivo\n-    //             ]);\n-\n-    //         if ($response->failed()) {\n-    //             return response()->json(['error' => 'No se pudo guardar el archivo en el servidor local'], 500);\n-    //         }\n-\n-    //         $archivo->storeAs('uploads/folios', $nameFile);\n-    //     }\n-\n-\n-\n-    //     // Llamar al método saveFolioPersonal pasando los datos y el archivo\n-    //     $inserted = FileControl::saveFolioPersonal(\n-    //         $validated['fecha_emision'],\n-    //         $validated['fecha_caducidad'],\n-    //         $request->codFolio,\n-    //         $request->codPersonal,\n-    //         //$filePath // Pasamos la ruta del archivo\n-    //     );\n-\n-    //     return response()->json(['message' => 'Folios del persona guardados']);\n-\n-    // }\n-\n-\n-     public function getViewDocumentsPer($codPersonal, $codFolio)\n-    {\n-        $result = FileControl::getViewPerDocs($codPersonal, $codFolio);\n-\n-        if (empty($result)) {\n-            return response()->json(['success' => false, 'message' => 'No se encontraron rutas'], 404);\n-        }\n-\n-        $extensiones = ['jpg', 'jpeg', 'png', 'pdf'];\n-        $rutasValidas = [];\n-\n-        foreach ($result as $item) {\n-            $rutaEncontrada = false;\n-\n-            // Probar primero con ruta_aux\n-            if (isset($item->ruta_aux)) {\n-                $rutaBase = str_replace('//', 'http://', $item->ruta_aux);\n-\n-                foreach ($extensiones as $ext) {\n-                    $rutaConExt = $rutaBase . '.' . $ext;\n-\n-                    if (self::urlExiste($rutaConExt)) {\n-                        $rutasValidas[] = $rutaConExt;\n-                        $rutaEncontrada = true;\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            // Si no se encontró nada en ruta_aux, probar con ruta\n-            if (!$rutaEncontrada && isset($item->ruta)) {\n-                $rutaBase = str_replace('//', 'http://', $item->ruta);\n-\n-                foreach ($extensiones as $ext) {\n-                    $rutaConExt = $rutaBase . '.' . $ext;\n-\n-                    if (self::urlExiste($rutaConExt)) {\n-                        $rutasValidas[] = $rutaConExt;\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-\n-        if (empty($rutasValidas)) {\n-            return response()->json([\n-                'success' => false,\n-                'message' => 'No se encontraron archivos accesibles desde la red'\n-            ]);\n-        }\n-\n-        return response()->json([\n-            'success' => true,\n-            'rutas' => $rutasValidas\n-        ]);\n-    }\n-\n-    // Función para validar si la URL existe\n-    private static function urlExiste($url)\n-    {\n-        $ch = curl_init($url);\n-        curl_setopt($ch, CURLOPT_NOBODY, true);\n-        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n-        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n-        curl_exec($ch);\n-        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n-        curl_close($ch);\n-\n-        return $statusCode === 200;\n-    }\n-\n-\n-\n-    // public function saveFolioPersona(Request $request)\n-    // {\n-    //     $validated = $request->validate([\n-    //         'fecha_emision'     => 'required|date',\n-    //         'fecha_caducidad'   => 'nullable|date',\n-    //         'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n-    //         'codPersonal'       => 'required|string',\n-    //         'codFolio'          => 'required|string',\n-    //     ]);\n-\n-    //     try {\n-    //         $codPersonal = $validated['codPersonal'];\n-    //         $codFolio    = $validated['codFolio'];\n-    //         $archivos    = $request->file('imagenes');\n-    //         $total       = count($archivos);\n-\n-    //         // Obtener ruta lógica relativa\n-    //         $subCarpeta = FileControl::getRutaFolio($codFolio); // Ejemplo: \"FOLIOS/2025/F123\"\n-\n-    //         foreach ($archivos as $index => $archivo) {\n-    //             $nombreArchivo = ($total === 1)\n-    //                 ? \"{$codPersonal}.jpg\"\n-    //                 : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n-\n-    //             $rutaRelativa = $subCarpeta . '/' . $nombreArchivo;\n-\n-    //             if (App::environment('local')) {\n-    //                 // Guardado directo en ruta de red en entorno local\n-    //                 $rutaFinal = \"\\\\\\\\192.168.10.5:86\\\\sisolmar\\\\DATA_SISOLMAR\\\\\" . $subCarpeta . \"\\\\\" . $nombreArchivo;\n-\n-    //                 if (!file_exists(dirname($rutaFinal))) {\n-    //                     mkdir(dirname($rutaFinal), 0777, true);\n-    //                 }\n-\n-    //                 file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n-    //             }\n-\n-    //             if (App::environment('production')) {\n-    //                 // Guardado en D:\\ mediante Storage\n-    //                 Storage::disk('disk_d')->put($rutaRelativa, file_get_contents($archivo->getRealPath()));\n-    //             }\n-    //         }\n-\n-    //         // Lógica adicional de BD\n-    //         FileControl::saveFolioPersonal(\n-    //             $validated['fecha_emision'],\n-    //             $validated['fecha_caducidad'],\n-    //             $codFolio,\n-    //             $codPersonal\n-    //         );\n-\n-    //         return response()->json(['message' => 'Folios del personal guardados correctamente.']);\n-\n-    //     } catch (\\Exception $e) {\n-    //         Log::error('Error al guardar folios: ' . $e->getMessage());\n-    //         return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n-    //     }\n-    // }\n-\n-    public function saveFolioPersona2()\n-    {\n-        echo \"hola\";\n-    }\n-    public function saveFolioPersona(Request $request)\n-    {\n-        $request->validate([\n-            'fecha_emision' => 'required|date',\n-            'fecha_caducidad' => 'nullable|date',\n-            'codFolio' => 'required|integer',\n-            'codPersonal' => 'required|string',\n-            'imagenes' => 'required|array',\n-            'imagenes.*' => 'image|max:5120' // máximo 5MB por imagen (ajusta según tu necesidad)\n-        ]);\n-\n-        $fechaEmision = $request->input('fecha_emision');\n-        $fechaCaducidad = $request->input('fecha_caducidad');\n-        $codFolio = $request->input('codFolio');\n-        $codPersonal = $request->input('codPersonal');\n-        $imagenes = $request->file('imagenes');\n-\n-        // Obtiene las rutas de carpeta según el folio\n-        $subCarpetas = FileControl::getRutaFolio($codFolio); // devuelve un array de rutas\n-\n-        print_r($subCarpetas);\n-        /*\n-        if (count($subCarpetas) !== count($imagenes)) {\n-            return response()->json([\n-                'error' => 'El número de imágenes no coincide con el número de rutas esperadas para el folio.'\n-            ], 400);\n-        }\n-\n-        foreach ($imagenes as $index => $imagen) {\n-            $rutaSubcarpeta = $subCarpetas[$index] ?? null;\n-\n-            if (!$rutaSubcarpeta) {\n-                continue; // O lanza un error si lo prefieres\n-            }\n-\n-            $rutaDestino = public_path('Biblioteca_Grafica/' . $rutaSubcarpeta);\n-\n-            // Crea la carpeta si no existe\n-            if (!file_exists($rutaDestino)) {\n-                mkdir($rutaDestino, 0777, true);\n-            }\n-\n-            // Guarda la imagen con el nombre del codPersonal\n-            $nombreArchivo = $codPersonal . '.' . $imagen->getClientOriginalExtension();\n-\n-            $imagen->move($rutaDestino, $nombreArchivo);\n-        }\n-\n-        // Aquí podrías guardar los datos en la BD si lo necesitas\n-        // ...\n-\n-        return response()->json([\n-            'message' => 'Folio guardado exitosamente.',\n-        ]);\n-        */\n-    }\n-\n-\n-    //DE EVER\n-    /*public function saveFolioPersona(Request $request)\n-    {\n-        $validated = $request->validate([\n-            'fecha_emision'     => 'required|date',\n-            'fecha_caducidad'   => 'nullable|date',\n-            'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n-            'codPersonal'       => 'required|string',\n-            'codFolio'          => 'required|string',\n-        ]);\n-\n-        try {\n-            $codPersonal = $validated['codPersonal'];\n-            $codFolio    = $validated['codFolio'];\n-            $archivos    = $request->file('imagenes');\n-            $total       = count($archivos);\n-\n-            // Subcarpeta relativa dentro de public/\n-            $subCarpeta = FileControl::getRutaFolio($codFolio); // ejemplo: \"folios/F123\"\n-            $rutaBase = public_path($subCarpeta);\n-\n-            if (!File::exists($rutaBase)) {\n-                File::makeDirectory($rutaBase, 0777, true);\n-            }\n-\n-            foreach ($archivos as $index => $archivo) {\n-                $nombreArchivo = ($total === 1)\n-                    ? \"{$codPersonal}.jpg\"\n-                    : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n-\n-                $rutaFinal = $rutaBase . '/' . $nombreArchivo;\n-\n-                // Guardar archivo en public/\n-                file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n-            }\n-\n-            // Guardar en BD\n-            FileControl::saveFolioPersonal(\n-                $validated['fecha_emision'],\n-                $validated['fecha_caducidad'],\n-                $codFolio,\n-                $codPersonal\n-            );\n-\n-            return response()->json(['message' => 'Folios guardados correctamente.']);\n-\n-        } catch (\\Exception $e) {\n-            Log::error('Error al guardar folios en public/: ' . $e->getMessage());\n-            return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n-        }\n-    }\n-        */\n-\n-    public function saveFolio(Request $request)\n-    {\n-        $codigo = $request->input('codigo');\n-        $nombre = $request->input('nombre');\n-        $tipo = $request->input('tipo');\n-        $obligatorio = $request->input('obligatorio');\n-        $vencimiento = $request->input('vencimiento');\n-        $tipo_fecha = $request->input('periodo');\n-        $plataforma = $request->input('plataforma');\n-\n-        if (empty($codigo)) {\n-            $inserted = FileControl::saveFolio($nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n-        } else {\n-            $inserted = FileControl::updateFolio($codigo, $nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n-        }\n-\n-        if ($inserted) {\n-            return response()->json(['success' => true, 'message' => 'Folio guardado correctamente']);\n-        } else {\n-            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n-        }\n-\n-        //return response()->json(['message' => 'Folios creados']);\n-    }\n-\n-    public function disabledFolio(Request $request){\n-        $codigo = $request->codigo;\n-        $result = FileControl::disabledFolio($codigo);\n-\n-        if ($result) {\n-            return response()->json(['message' => 'Folio deshabilitado exitosamente'], 200);\n-        } else {\n-            return response()->json(['message' => 'Folio no encontrado o error al deshabilitar'], 404);\n-        }\n-    }\n-\n-    public function saveCargo(Request $request){\n-        $descripcion = $request->input('descripcion');\n-        $nombre = $request->input('nombre');\n-        $cod_tipo = $request->input('tipoCargo');\n-        $abreviatura = $request->input('abreviatura');\n-        $cod_servicio = $request->input('codPosicion');\n-        $cod_subservicio = $request->input('codGrupo');\n-        $cod_area = $request->input('codArea');\n-\n-        $usuario = session('usuario');\n-\n-        $inserted = FileControl::saveCargo($descripcion, $nombre, $abreviatura, $cod_servicio, $cod_subservicio, $cod_tipo, $cod_area, $usuario);\n-\n-        return response()->json(['message' => 'Cargo creado']);\n-    }\n-\n-    public function dashboard()\n-    {\n-        return view('file_control.dashboard');\n-    }\n-\n-    //-----------------\n-\n-    public function getFoliosXLegajo($codCliente, $codCargo){\n-        $folios = FileControl::getFoliosXLegajo($codCliente, $codCargo);\n-        return response()->json($folios);\n-    }\n-\n-    public function getAreas(){\n-        $areas = FileControl::getAreas();\n-        return response()->json($areas);\n-    }\n-\n-    public function getPosicion(){\n-        $data = FileControl::getPosicion();\n-        return response()->json($data);\n-    }\n-\n-    public function getGrupo(){\n-        $data = FileControl::getGrupo();\n-        return response()->json($data);\n-    }\n-\n-    public function getGrupoId($codigo){\n-        //$codigo = $request->input('codigo');\n-        $data = FileControl::getGrupoId($codigo);\n-        return response()->json($data);\n-    }\n-\n-    public function saveLegajo(Request $request){\n-        $folios = $request->input('folios');\n-        $codCliente = $request->input('codCliente');\n-        $codCargo = $request->input('codCargo');\n-        $codLegajo = $request->input('codLegajo');\n-        $nombre  = $request->input('nombre');\n-\n-        $usuario = session('usuario');\n-\n-        if($codLegajo != '0'){//MODIFICAR LEGAJO\n-            $codigos = FileControl::QuitarTodosLegajos($codLegajo, $usuario);\n-\n-            for ($i = 0; $i < count($codigos); $i++) {\n-                if (!in_array($codigos[$i], $folios)) {\n-                    FileControl::actualizarNotificacionDes($codigos[$i], $codCliente, $codCargo);\n-                }\n-            }\n-\n-            for($i = 0; $i < count($folios); $i++){\n-                $folio = $folios[$i];\n-                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $codLegajo);\n-                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n-\n-                if(empty($validar)){\n-                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n-                }else{\n-                    FileControl::updateLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n-                }\n-            }\n-        }else{//CREAR NUEVO LEGAJO\n-            $legajo = FileControl::saveLegajoMain($nombre);\n-\n-            for($i = 0; $i < count($folios); $i++){\n-                $folio = $folios[$i];\n-                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $legajo);\n-                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n-                if(empty($validar)){\n-                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $legajo, $usuario);\n-                }\n-\n-            }\n-        }\n-    }\n-\n-    /* GESTION DE CARGOS */\n-    public function insertarCargo(Request $request)\n-    {\n-        $tipo = $request->input('tipoCargo');\n-        $codArea = $request->input('codArea');\n-        $nombre = $request->input('nombre');\n-        $descripcion = $request->input('descripcion');\n-        $abreviatura = $request->input('abreviatura');\n-        $codPosicion = $request->input('codPosicion');\n-        $codGrupo = $request->input('codGrupo');\n-\n-        $data = [\n-            $tipo,\n-            $codArea,\n-            $nombre,\n-            $descripcion,\n-            $abreviatura,\n-            $codPosicion,\n-            $codGrupo,\n-            'SISTEMA'\n-        ];\n-\n-        $inserted = FileControl::insertarCargo($data);\n-\n-        return response()->json(['message' => 'Cargo creado']);\n-    }\n-    public function updateCargo(Request $request)\n-    {\n-        $tipo = $request->input('tipoCargo');\n-        $codArea = $request->input('codArea');\n-        $nombre = $request->input('nombre');\n-        $descripcion = $request->input('descripcion');\n-        $abreviatura = $request->input('abreviatura');\n-        $codPosicion = $request->input('codPosicion');\n-        $codGrupo = $request->input('codGrupo');\n-        $codigo = $request->input('codigo');\n-\n-        $data = [\n-            $codigo,\n-            $tipo,\n-            $codArea,\n-            $nombre,\n-            $descripcion,\n-            $abreviatura,\n-            $codPosicion,\n-            $codGrupo,\n-            'SISTEMA'\n-        ];\n-\n-        $inserted = FileControl::updateCargo($data);\n-\n-\n-        if ($inserted) {\n-            return response()->json(['success' => true, 'message' => 'Cargo modificado correctamente']);\n-        } else {\n-            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n-        }\n-\n-        //return response()->json(['message' => 'Folios creados']);\n-    }\n-\n-\n-    public function getCargosXCodigo($codigo){\n-        $data = FileControl::getCargosXCodigo($codigo);\n-        return response()->json($data);\n-    }\n-\n-\n-    public function eliminarCargo(Request $request){\n-        $codigo = $request->input('codigo');\n-        $data = 0;\n-        $inserted = FileControl::activarCargo($codigo, $data);\n-        return response()->json(['message' => 'Cargo modificdo']);\n-    }\n-\n-    public function activarCargo(Request $request){\n-        $codigo = $request->input('codigo');\n-        $data = 1;\n-        $inserted = FileControl::activarCargo($codigo, $data);\n-        return response()->json(['message' => 'Cargo modificdo']);\n-    }\n-\n-    public function ViewLegajo_comercial(){\n-\n-        return view('file_control.legajos_comercial');\n-    }\n-\n-    public function saveSolicitud(Request $request){\n-        $codigo = $request->input('codigo');\n-        $tiene = $request->input('tiene');\n-        $cargo = $request->input('cargo');\n-        $cliente = $request->input('cliente');\n-\n-        $usuario = session('usuario');\n-\n-        FileControl::saveSolicitud($codigo, $tiene, $cargo, $cliente, $usuario);\n-        return response()->json(['message' => 'Solicitud creado']);\n-    }\n-\n-}\n"
                },
                {
                    "date": 1753333276899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -710,17 +710,17 @@\n     //         return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n     //     }\n     // }\n \n-    public function saveFolioPersona2(Request $request)\n+    public function saveFolioPersona3(Request $request)\n {\n     \\Log::info('TEMP DIR: ' . sys_get_temp_dir());\n     \\Log::info('_FILES', $_FILES);\n     \\Log::info('REQUEST', $request->all());\n \n     return response()->json(['message' => 'Revisado en log.'], 200);\n }\n-    public function saveFolioPersona3(Request $request)\n+    public function saveFolioPersona2(Request $request)\n     {\n         /*$fechaEmision = $request->input('fecha_emision');\n         $fechaCaducidad = $request->input('fecha_caducidad');\n         $codFolio = $request->input('codFolio');\n"
                },
                {
                    "date": 1753333292534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -733,9 +733,9 @@\n         } else {\n             return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n         }*/\n         \n-        /*$cant = 0;\n+        $cant = 0;\n         if ($request->hasFile('archivos')) {\n             foreach ($request->file('archivos') as $archivo) {\n                 //$nombre = time() . '_' . $archivo->getClientOriginalName();\n                 //$archivo->move(public_path('archivos_folio'), $nombre);\n@@ -743,9 +743,9 @@\n             }\n         }\n     \n         return response()->json(\"hay \".$cant.\" archivos\");\n-        */\n+        \n     }\n \n     public function saveFolioPersona(Request $request)\n     {\n"
                },
                {
                    "date": 1753338932720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -734,10 +734,10 @@\n             return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n         }*/\n         \n         $cant = 0;\n-        if ($request->hasFile('archivos')) {\n-            foreach ($request->file('archivos') as $archivo) {\n+        if ($request->hasFile('imagenes')) {\n+            foreach ($request->file('imagenes') as $archivo) {\n                 //$nombre = time() . '_' . $archivo->getClientOriginalName();\n                 //$archivo->move(public_path('archivos_folio'), $nombre);\n                 $cant = $cant + 1;\n             }\n"
                },
                {
                    "date": 1753339493486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -766,10 +766,9 @@\n \n         // Obtiene las rutas de carpeta según el folio\n         $subCarpetas = FileControl::getRutaFolio($codFolio); // devuelve un array de rutas\n \n-        print_r($subCarpetas);\n-        /*\n+       \n         if (count($subCarpetas) !== count($imagenes)) {\n             return response()->json([\n                 'error' => 'El número de imágenes no coincide con el número de rutas esperadas para el folio.'\n             ], 400);\n@@ -800,9 +799,9 @@\n \n         return response()->json([\n             'message' => 'Folio guardado exitosamente.',\n         ]);\n-        */\n+        \n     }\n \n \n     //DE EVER\n"
                },
                {
                    "date": 1753339561833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -746,8 +746,9 @@\n         return response()->json(\"hay \".$cant.\" archivos\");\n         \n     }\n \n+    //GUARDAR EN PUBLIC\n     public function saveFolioPersona(Request $request)\n     {\n         $request->validate([\n             'fecha_emision' => 'required|date',\n"
                },
                {
                    "date": 1753339637007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1089 @@\n+<?php\n+\n+namespace App\\Http\\Controllers;\n+\n+use App\\Helpers\\PdfHelper;\n+use App\\Helpers\\ImagenHelper;\n+use Barryvdh\\Snappy\\Facades\\SnappyPdf;\n+use Illuminate\\Http\\Request;\n+use App\\Models\\FileControl;\n+use Illuminate\\Support\\Facades\\App;\n+use Illuminate\\Support\\Facades\\Log;\n+use Illuminate\\Support\\Facades\\Http;\n+use Illuminate\\Support\\Str;\n+use Illuminate\\Support\\Facades\\File;\n+use Illuminate\\Support\\Facades\\Storage;\n+use ZipArchive;\n+\n+class FileController extends Controller{\n+    public function index(){\n+        $personal = FileControl::getPersonal();\n+        //$cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientesLegajos();\n+        $sucursales = FileControl::getSucursales();\n+\n+        return view('file_control.chargefile', compact('personal', 'clientes', 'sucursales'));\n+    }\n+\n+    public function getCargosXCliente(Request $request){\n+        $cliente = $request->input('cliente');\n+        $cargos = FileControl::getCargosXCliente($cliente);\n+        return response()->json($cargos);\n+    }\n+\n+    public function ViewDashboard(){\n+        /*$personal = FileControl::getPersonal();\n+        $cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientes();\n+        $sucursales = FileControl::getSucursales();*/\n+\n+        return view('file_control.dashboard'/*, compact('personal', 'cargos', 'clientes', 'sucursales')*/);\n+    }\n+\n+    public function getPersonal(Request $request){\n+        $personal = FileControl::getPersonal();\n+        return response()->json($personal);\n+    }\n+\n+    public function getDocumentosXPersonal($codPersonal){\n+        $docs_personal = FileControl::getDocsXPersona($codPersonal);\n+        return response()->json($docs_personal);\n+    }\n+\n+    public function getFoliosXPersonas(Request $request){\n+        $personas = $request->personas;\n+        $folios = $request->folios;\n+        $resultados = [];\n+        //Averiguando la sucursal de la persona\n+\n+\n+        foreach ($personas as $persona) {\n+            $sucursal = FileControl::getSucursalXPersona($persona['CODI_PERS']);\n+            foreach ($folios as $folio) {\n+                $datosFolioPersona = FileControl::getFoliosInfoPersona($persona['CODI_PERS'], $folio['codigo']);\n+                foreach ($datosFolioPersona as $dato) {\n+                    $resultados[] = [\n+                        //'persona' => $persona['personal'],\n+                        'persona' => $dato->personal ?? null,\n+                        'nroDoc' => $dato->nroDoc ?? null,\n+                        'codPersonal' => $persona['CODI_PERS'],\n+                        'folio' => $folio['nombre'],\n+                        'sucursal' => $sucursal,\n+                        'ruta' => $dato->ruta_archivo ?? null,\n+                        'ancho' => $dato->ancho ?? null,\n+                        'hojas' => $dato->cantidad_hojas ?? null,\n+                        'documento' => $dato->documento ?? null,\n+                        'cargo' => $dato->cargo ?? null,\n+                        'es_formato' => $dato->es_formato ?? null,\n+                    ];\n+                }\n+                /*$resultados[] = [\n+                    'persona' => $persona['personal'],\n+                    'folio' => $folio['nombre'],\n+                    'ruta' => $datosFolioPersona[0]->ruta_archivo ?? null,\n+                ];*/\n+            }\n+        }\n+        return response()->json($resultados);\n+    }\n+\n+    public function getFoliosXPersona_uno(Request $request){\n+        $persona = $request->input('codPersona');\n+        $folios = $request->folios;\n+        $resultados = [];\n+\n+        $sucursal = FileControl::getSucursalXPersona($persona);\n+\n+        foreach ($folios as $folio) {\n+            $datosFolioPersona = FileControl::getFoliosInfoPersona($persona, $folio['codigo']);\n+            foreach ($datosFolioPersona as $dato) {\n+                $resultados[] = [\n+                    'persona' => $dato->personal ?? null,\n+                    'nroDoc' => $dato->nroDoc ?? null,\n+                    'codPersonal' => $persona,\n+                    'folio' => $folio['nombre'],\n+                    'sucursal' => $sucursal,\n+                    'ruta' => $dato->ruta_archivo ?? null,\n+                    'ancho' => $dato->ancho ?? null,\n+                    'hojas' => $dato->cantidad_hojas ?? null,\n+                    'documento' => $dato->documento ?? null,\n+                    'cargo' => $dato->cargo ?? null,\n+                    'es_formato' => $dato->es_formato ?? null,\n+                ];\n+            }\n+        }\n+\n+        return response()->json($resultados);\n+    }\n+\n+    // public function generarPDFsPorPersona(Request $request){\n+    //     $resultados = $request->input('resultados');\n+\n+    //     // Agrupar todos los datos por persona\n+    //     $agrupados = [];\n+    //     foreach ($resultados as $item) {\n+    //         $cod = $item['codPersonal'];\n+    //         $agrupados[$cod][] = $item;\n+    //     }\n+\n+    //     $carpetaTemporal = storage_path('app/temp_pdfs');\n+    //     if (!File::exists($carpetaTemporal)) {\n+    //         File::makeDirectory($carpetaTemporal, 0777, true, true);\n+    //     }\n+\n+    //     $pdfsGenerados = [];\n+\n+    //     foreach ($agrupados as $codPersonal => $documentosPersona) {\n+    //         $persona = $documentosPersona[0]['persona'] ?? 'persona_sin_nombre';\n+\n+    //         // Carátula: datos únicos de persona\n+    //         $caratula = [\n+    //             'persona' => $persona,\n+    //             'codPersonal' => $codPersonal,\n+    //             'sucursal' => $documentosPersona[0]['sucursal'] ?? '',\n+    //             'cargo' => $documentosPersona[0]['cargo'] ?? '',\n+    //         ];\n+\n+    //         // Separar documentos: escaneados vs formatos Blade\n+    //         $urls = [];\n+    //         $itemsFinales = [];\n+\n+    //         foreach ($documentosPersona as $doc) {\n+    //             if (!empty($doc['ruta'])) {\n+    //                 $urls[] = [\n+    //                     'ruta' => $doc['ruta'],\n+    //                     'codPersonal' => $codPersonal,\n+    //                     'ancho' => $doc['ancho'],\n+    //                     'hojas' => $doc['hojas'],\n+    //                     'documento' => $doc['documento'],\n+    //                     'es_formato' => $doc['es_formato'],\n+    //                 ];\n+    //             }\n+\n+    //             if ($doc['es_formato'] == 1) {\n+    //                 $itemsFinales[] = [\n+    //                     'es_formato' => 1,\n+    //                     'codPersonal' => $codPersonal,\n+    //                     'documento' => $doc['documento'],\n+    //                     'nombre_vista' => $this->obtenerNombreVista($doc),\n+    //                     'datos' => $doc,\n+    //                     'firma' => public_path('temp_legajos') . '/FIRMAS/PERSONAL/' . $codPersonal . '.jpg',\n+    //                     'huella' => public_path('temp_legajos') . '/HUELLAS_DIGITALES/PERSONAL/' . $codPersonal . '.jpg',\n+    //                 ];\n+\n+    //                 // Descargar imágenes del formato (firma y huella)\n+    //                 ImagenHelper::descargarImagenesFormato($codPersonal);\n+    //             }\n+    //         }\n+\n+    //         // Descargar imágenes escaneadas\n+    //         $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n+\n+    //         foreach ($rutasLocales as $img) {\n+    //             $itemsFinales[] = [\n+    //                 'es_formato' => 0,\n+    //                 'codPersonal' => $codPersonal,\n+    //                 'ruta' => $img['ruta'],\n+    //                 'documento' => $img['documento'],\n+    //                 'hojas' => $img['hojas'],\n+    //                 'ancho' => $img['ancho'],\n+    //             ];\n+    //         }\n+\n+    //         // Render PDF de esta persona\n+    //         $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n+    //             'personas' => [$caratula], // vista espera array\n+    //             'resultados' => $documentosPersona,\n+    //             'imagenes' => $rutasLocales,\n+    //             'items' => $itemsFinales,\n+    //         ])->setOption('enable-local-file-access', true);\n+\n+    //         $nombreArchivo = 'PDF_' . Str::slug($persona) . '_' . $codPersonal . '.pdf';\n+    //         $rutaArchivo = $carpetaTemporal . '/' . $nombreArchivo;\n+\n+    //         $pdf->save($rutaArchivo);\n+    //         $pdfsGenerados[] = $rutaArchivo;\n+    //     }\n+\n+    //     // Comprimir todo en ZIP\n+    //     $zipPath = storage_path('app/documentos_por_persona.zip');\n+    //     $zip = new \\ZipArchive();\n+\n+    //     if ($zip->open($zipPath, \\ZipArchive::CREATE | \\ZipArchive::OVERWRITE) === true) {\n+    //         foreach ($pdfsGenerados as $archivo) {\n+    //             $zip->addFile($archivo, basename($archivo));\n+    //         }\n+    //         $zip->close();\n+    //     }\n+\n+    //     return response()->download($zipPath)->deleteFileAfterSend(true);\n+    // }\n+\n+    public function generarPDF_env(Request $request){\n+        echo \"Hola\";\n+    }\n+\n+    public function pdf_vacio()\n+    {\n+        // Aquí cargas una vista muy simple (puedes crear un blade vacío o con texto simple)\n+        $pdf = SnappyPdf::loadView('file_control.pdf.reporte_vacio');\n+\n+        // Lo envías para que se descargue (o inline si quieres verlo en navegador)\n+        return $pdf->inline('reporte_vacio.pdf');\n+    }\n+\n+\n+    public function generarPDF(Request $request){\n+        $resultados = $request->input('resultados');\n+        //dd($resultados);\n+        //exit;\n+        //Agrupar los datos para mostrar en la carátula\n+        $unicos = [];\n+\n+        $nombreNuevo = 'Reporte';\n+\n+        foreach ($resultados as $item) {\n+            $clave = $item['persona'] . '|' . $item['sucursal'] . '|' . $item['codPersonal'] . '|' . $item['cargo'];\n+            if(!isset($unicos[$clave])) {\n+                $unicos[$clave] = [\n+                    'persona' => $item['persona'],\n+                    'codPersonal' => $item['codPersonal'],\n+                    'sucursal' => $item['sucursal'],\n+                    'cargo' => $item['cargo'],\n+                ];\n+\n+\n+            }\n+\n+             $nombreNuevo = $item['codPersonal'].'_'.$item['persona'] . '_' . date('Ymd_Hi');\n+        }\n+\n+        $personasUnicas = array_values($unicos);\n+\n+        //Para los FORMATOS\n+        // $formatosBlade = [\n+        //     'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n+        //     'DECLARACION JURADA ' => 'file_control.pdf.declaracion_jurada',\n+        // ];\n+\n+        $urls = [];\n+\n+        foreach ($resultados as $resultado) {\n+            if (!empty($resultado['ruta']) && !empty($resultado['codPersonal'])) {\n+                $urls[] = [\n+                    'ruta' => $resultado['ruta'],\n+                    'codPersonal' => $resultado['codPersonal'],\n+                    'ancho' => $resultado['ancho'],\n+                    'hojas' => $resultado['hojas'],\n+                    'documento' => $resultado['documento'],\n+                    'es_formato' => $resultado['es_formato'],\n+                ];\n+            }\n+        };\n+\n+        $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n+\n+        $itemsFinales = [];\n+        //Los que tienen imagen en ruta\n+        foreach ($rutasLocales as $item) {\n+            $itemsFinales[] = [\n+                'es_formato' => $item['es_formato'],\n+                'codPersonal' => $item['codPersonal'],\n+                'ruta' => $item['ruta'],\n+                'documento' => $item['documento'],\n+                'hojas' => $item['hojas'],\n+                'ancho' => $item['ancho'],\n+            ];\n+        }\n+\n+        // Los que deben renderizar una vista Blade porque son formatos (es_formato == 1)\n+        foreach ($resultados as $resultado) {\n+            if ($resultado['es_formato'] == 1) {\n+                $itemsFinales[] = [\n+                    'es_formato' => $resultado['es_formato'],\n+                    'codPersonal' => $resultado['codPersonal'],\n+                    'documento' => $resultado['documento'],\n+                    'nombre_vista' => $this->obtenerNombreVista($resultado), // Función que defines\n+                    'datos' => $resultado,\n+                    'firma' => public_path('temp_legajos').'/FIRMAS/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n+                    'huella' => public_path('temp_legajos').'/HUELLAS_DIGITALES/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n+                ];\n+                //Hacer la copia local de la FIRMA y HUELLA DIGITAL\n+                $rutasLocalesFormato = ImagenHelper::descargarImagenesFormato($resultado['codPersonal']);\n+            }\n+        }\n+\n+        //print_r($itemsFinales);\n+        $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n+            'personas' => $personasUnicas,\n+            'resultados' => $resultados,\n+            'imagenes' => $rutasLocales,\n+            'items' => $itemsFinales,\n+        ])->setOption('enable-local-file-access', true);\n+\n+        return response()->streamDownload(function () use ($pdf) {\n+            echo $pdf->output();\n+        }, $nombreNuevo . '.pdf', [\n+            'Content-Type' => 'application/pdf',\n+            'X-Nombre-Archivo' => $nombreNuevo . '.pdf', // <- aquí\n+        ]);\n+    }\n+\n+    public function obtenerNombreVista($resultado) {\n+        $mapa = [\n+            'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n+            'DECLARACION JURADA DE CUMPLIMIENTO DE DISPOSICIONES' => 'file_control.pdf.declaracion_jurada',\n+            'EVALUACION DEL POSTULANTE' => 'file_control.pdf.evaluacion_postulante',\n+            'COMPROMISO DE CONFIABILIDAD' => 'file_control.pdf.compromiso_confidencialidad',\n+            'CUMPLIMIENTO DE cumpliDISPOSICION' => 'file_control.pdf.dj_complumiento_disposicion',\n+            'ESTUDIO DE SEGURIDAD DE TRABAJADORES' => 'file_control.pdf.dj_complumiento_disposicion',\n+            'VISITA DOMICILIARIA' => 'file_control.pdf.visita_domiciliaria_concluciones'\n+        ];\n+\n+        return $mapa[$resultado['documento']] ?? null;\n+    }\n+\n+    public function generarReporteConsulta(Request $request){\n+        $codigo =  $request->input('valor');\n+        $data = FileControl::getReporteFiltro($codigo);\n+        return response()->json($data);\n+    }\n+\n+\n+    public function generarPDF2(Request $request) {\n+        $resultados = $request->input('resultados');\n+        $html = '';\n+\n+        $vistas = [\n+            'file_control.pdf.evaluacion-postulante',\n+            'file_control.pdf.declaracion-jurada',\n+            'file_control.pdf.acta_compromiso',\n+            'file_control.pdf.compromiso_confidencialidad',\n+            'file_control.pdf.dj_cumplimiento_disposicion',\n+            'file_control.pdf.estudio_seguridad_empleado',\n+            'file_control.pdf.estudio_seguridad_empleado_2',\n+            'file_control.pdf.visita_domiciliaria',\n+            'file_control.pdf.visita_domiciliaria_concluciones',\n+        ];\n+\n+        foreach ($vistas as $vista) {\n+\n+            $html .= view($vista, [\n+                'resultados' => $resultados\n+            ])->render();\n+\n+            $html .= '<div style=\"page-break-after: always;\"></div>';\n+        }\n+\n+        $pdf = SnappyPdf::loadHTML($html)->setOption('enable-local-file-access', true);\n+\n+        return response($pdf->inline('reporte_completo.pdf'))->header('Content-Type', 'application/pdf');\n+    }\n+\n+    public function getAllCargo()\n+    {\n+        $data = FileControl::getAllCargo();\n+        return response()->json($data);\n+    }\n+\n+    public function getClientes(){\n+        $data = FileControl::getClientes();\n+        return response()->json($data);\n+    }\n+\n+    public function getClientesLegajos(){\n+        $data = FileControl::getClientesLegajos();\n+        return response()->json($data);\n+    }\n+\n+    public function getLegajos(Request $request)\n+    {\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+        $codPersonal = $request->input('codigo');\n+\n+        $legajos = FileControl::getLegajos($cliente, $cargo, $codPersonal);\n+        return response()->json($legajos);\n+    }\n+\n+    public function getFoliosClienteCargo(Request $request){\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+\n+        $legajos = FileControl::getFoliosClienteCargo($cliente, $cargo);\n+        return response()->json($legajos);\n+    }\n+\n+    public function getFoliosXLegajo_comercial($codCliente, $codCargo){\n+        $folios = FileControl::getFoliosXLegajo_comercial($codCliente, $codCargo);\n+        return response()->json($folios);\n+    }\n+\n+    public function getCargos(){\n+        $cargos = FileControl::getCargos();\n+        return response()->json($cargos);\n+    }\n+\n+    public function getFolios(){\n+        $folios = FileControl::getFolios();\n+        return response()->json($folios);\n+    }\n+\n+    public function ViewCargo()\n+    {\n+        $todos = \\DB::table('sw_cargos')\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $operativo = \\DB::table('sw_cargos')\n+                    ->where('cod_tipo', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $administrativo = \\DB::table('sw_cargos')\n+                    ->where('cod_tipo', 2)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        return view('file_control.cargo',compact('todos', 'operativo', 'administrativo'));\n+    }\n+\n+    public function ViewLegajo()\n+    {\n+         $notif = FileControl::listarNotificaciones();\n+        return view('file_control.legajos', [\n+            'notify' => $notif\n+        ]);\n+    }\n+\n+    public function ViewFolios()\n+    {\n+        $periodos = FileControl::getPeriodos();\n+        $todos = \\DB::table('sw_folios')\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $principal = \\DB::table('sw_folios')\n+                    ->where('obligatorio', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $adicional = \\DB::table('sw_folios')\n+                    ->where('obligatorio', 0)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $documento = \\DB::table('sw_folios')\n+                    ->where('tipo', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $formato = \\DB::table('sw_folios')\n+                    ->where('tipo', 2)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $certificado = \\DB::table('sw_folios')\n+                    ->where('tipo', 3)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+\n+        return view('file_control.folios', compact('periodos', 'todos', 'principal', 'adicional', 'documento', 'formato', 'certificado'));\n+    }\n+\n+    public function ViewBusquedaLegajo()\n+    {\n+        $personal = FileControl::getPersonalLegajos();\n+        $cargos = FileControl::getCargos();\n+        //$clientes = FileControl::getClientes();\n+        $clientes = FileControl::getClientesLegajos();\n+\n+        return view('file_control.search_legajos', compact('personal', 'cargos', 'clientes'));\n+    }\n+\n+    public function ViewLegajoPdf()\n+    {\n+        $sucursales = FileControl::getSucursales();\n+        $cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientes();\n+        return view('file_control.legajos_pdf', compact('sucursales','cargos','clientes'));\n+    }\n+\n+    public function getPersonalLegajos(Request $request)\n+    {\n+        $personal = FileControl::getPersonalLegajos();\n+        return response()->json($personal);\n+    }\n+\n+    public function getCoincidencias(Request $request)\n+    {\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+\n+        $legajos = FileControl::getCoincidencias($cliente, $cargo);\n+        return response()->json($legajos);\n+    }\n+\n+    //GUARDAR DATOS\n+    public function saveFolioPersona(Request $request){\n+        //dd($request->file('imagenes'));\n+\n+\n+        // Validar los datos del formulario\n+        $validated = $request->validate([\n+            'fecha_emision' => 'required|date',\n+            'fecha_caducidad' => 'nullable|date',\n+            //'file' => 'nullable|file|mimes:pdf,jpg,jpeg,png|max:1024',\n+        ]);\n+\n+        // Para guardar el arcivo con la codificación del personal\n+\n+        $codPersonal = $request->input('codPersonal');\n+        $total = count($request->file('imagenes'));\n+        foreach ($request->file('imagenes') as $index => $archivo) {\n+            //$nombre = 'folio_'.$id.'_'.$index.'.jpg';\n+            //Condición si es 1 archivo o varios, para asignar el nombre al archivo\n+            if($total == 1){\n+                $nameFile = $codPersonal.'.jpg';\n+            }else{\n+                $nameFile = $codPersonal.'_'.($index+1).'.jpg';\n+            }\n+\n+            // Averiguar el nombre de la carpeta o ruta donde debe de guardarse el archivo\n+            $rutaArchivo = FileControl::getRutaFolio($request->input('codFolio'));\n+\n+            //$filePath = null;\n+            // Llamar al microservicio para guardar el archivo en el servidor local\n+            //$filePath = 'http://190.116.178.163/Biblioteca_Grafica/'.$rutaArchivo.'/'.$nameFile;\n+\n+            $response = Http::withToken('457862h45hj7u5126h58d2s51s2s') // Autenticación con el token\n+                ->attach('archivo', file_get_contents($archivo), $archivo->getClientOriginalName()) // Adjuntar el archivo\n+                //->post('https://sisolmar.gruposolmar.pe/apps/api/file-control/charge-file.php', [\n+                ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n+                    'nameFile' => $nameFile,\n+                    'ruta' => $rutaArchivo\n+                ]);\n+\n+            if ($response->failed()) {\n+                return response()->json(['error' => 'No se pudo guardar el archivo en el servidor local'], 500);\n+            }\n+\n+            $archivo->storeAs('uploads/folios', $nameFile);\n+        }\n+\n+\n+\n+        // Llamar al método saveFolioPersonal pasando los datos y el archivo\n+        $inserted = FileControl::saveFolioPersonal(\n+            $validated['fecha_emision'],\n+            $validated['fecha_caducidad'],\n+            $request->codFolio,\n+            $request->codPersonal,\n+            //$filePath // Pasamos la ruta del archivo\n+        );\n+\n+        return response()->json(['message' => 'Folios del persona guardados']);\n+\n+    }\n+\n+\n+     public function getViewDocumentsPer($codPersonal, $codFolio)\n+    {\n+        $result = FileControl::getViewPerDocs($codPersonal, $codFolio);\n+\n+        if (empty($result)) {\n+            return response()->json(['success' => false, 'message' => 'No se encontraron rutas'], 404);\n+        }\n+\n+        $extensiones = ['jpg', 'jpeg', 'png', 'pdf'];\n+        $rutasValidas = [];\n+\n+        foreach ($result as $item) {\n+            $rutaEncontrada = false;\n+\n+            // Probar primero con ruta_aux\n+            if (isset($item->ruta_aux)) {\n+                $rutaBase = str_replace('//', 'http://', $item->ruta_aux);\n+\n+                foreach ($extensiones as $ext) {\n+                    $rutaConExt = $rutaBase . '.' . $ext;\n+\n+                    if (self::urlExiste($rutaConExt)) {\n+                        $rutasValidas[] = $rutaConExt;\n+                        $rutaEncontrada = true;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            // Si no se encontró nada en ruta_aux, probar con ruta\n+            if (!$rutaEncontrada && isset($item->ruta)) {\n+                $rutaBase = str_replace('//', 'http://', $item->ruta);\n+\n+                foreach ($extensiones as $ext) {\n+                    $rutaConExt = $rutaBase . '.' . $ext;\n+\n+                    if (self::urlExiste($rutaConExt)) {\n+                        $rutasValidas[] = $rutaConExt;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (empty($rutasValidas)) {\n+            return response()->json([\n+                'success' => false,\n+                'message' => 'No se encontraron archivos accesibles desde la red'\n+            ]);\n+        }\n+\n+        return response()->json([\n+            'success' => true,\n+            'rutas' => $rutasValidas\n+        ]);\n+    }\n+\n+    // Función para validar si la URL existe\n+    private static function urlExiste($url)\n+    {\n+        $ch = curl_init($url);\n+        curl_setopt($ch, CURLOPT_NOBODY, true);\n+        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n+        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n+        curl_exec($ch);\n+        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n+        curl_close($ch);\n+\n+        return $statusCode === 200;\n+    }\n+\n+\n+\n+    // public function saveFolioPersona(Request $request)\n+    // {\n+    //     $validated = $request->validate([\n+    //         'fecha_emision'     => 'required|date',\n+    //         'fecha_caducidad'   => 'nullable|date',\n+    //         'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n+    //         'codPersonal'       => 'required|string',\n+    //         'codFolio'          => 'required|string',\n+    //     ]);\n+\n+    //     try {\n+    //         $codPersonal = $validated['codPersonal'];\n+    //         $codFolio    = $validated['codFolio'];\n+    //         $archivos    = $request->file('imagenes');\n+    //         $total       = count($archivos);\n+\n+    //         // Obtener ruta lógica relativa\n+    //         $subCarpeta = FileControl::getRutaFolio($codFolio); // Ejemplo: \"FOLIOS/2025/F123\"\n+\n+    //         foreach ($archivos as $index => $archivo) {\n+    //             $nombreArchivo = ($total === 1)\n+    //                 ? \"{$codPersonal}.jpg\"\n+    //                 : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n+\n+    //             $rutaRelativa = $subCarpeta . '/' . $nombreArchivo;\n+\n+    //             if (App::environment('local')) {\n+    //                 // Guardado directo en ruta de red en entorno local\n+    //                 $rutaFinal = \"\\\\\\\\192.168.10.5:86\\\\sisolmar\\\\DATA_SISOLMAR\\\\\" . $subCarpeta . \"\\\\\" . $nombreArchivo;\n+\n+    //                 if (!file_exists(dirname($rutaFinal))) {\n+    //                     mkdir(dirname($rutaFinal), 0777, true);\n+    //                 }\n+\n+    //                 file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n+    //             }\n+\n+    //             if (App::environment('production')) {\n+    //                 // Guardado en D:\\ mediante Storage\n+    //                 Storage::disk('disk_d')->put($rutaRelativa, file_get_contents($archivo->getRealPath()));\n+    //             }\n+    //         }\n+\n+    //         // Lógica adicional de BD\n+    //         FileControl::saveFolioPersonal(\n+    //             $validated['fecha_emision'],\n+    //             $validated['fecha_caducidad'],\n+    //             $codFolio,\n+    //             $codPersonal\n+    //         );\n+\n+    //         return response()->json(['message' => 'Folios del personal guardados correctamente.']);\n+\n+    //     } catch (\\Exception $e) {\n+    //         Log::error('Error al guardar folios: ' . $e->getMessage());\n+    //         return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n+    //     }\n+    // }\n+\n+    public function saveFolioPersona3(Request $request)\n+{\n+    \\Log::info('TEMP DIR: ' . sys_get_temp_dir());\n+    \\Log::info('_FILES', $_FILES);\n+    \\Log::info('REQUEST', $request->all());\n+\n+    return response()->json(['message' => 'Revisado en log.'], 200);\n+}\n+    public function saveFolioPersona2(Request $request)\n+    {\n+        /*$fechaEmision = $request->input('fecha_emision');\n+        $fechaCaducidad = $request->input('fecha_caducidad');\n+        $codFolio = $request->input('codFolio');\n+        $codPersonal = $request->input('codPersonal');\n+\n+        $inserted = FileControl::saveFolioPersonal($fechaEmision,$fechaCaducidad,$codFolio,$codPersonal);\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'El folio del personal, guardado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }*/\n+        \n+        $cant = 0;\n+        if ($request->hasFile('imagenes')) {\n+            foreach ($request->file('imagenes') as $archivo) {\n+                //$nombre = time() . '_' . $archivo->getClientOriginalName();\n+                //$archivo->move(public_path('archivos_folio'), $nombre);\n+                $cant = $cant + 1;\n+            }\n+        }\n+    \n+        return response()->json(\"hay \".$cant.\" archivos\");\n+        \n+    }\n+\n+    //GUARDAR EN PUBLIC\n+    public function saveFolioPersona0(Request $request)\n+    {\n+        $request->validate([\n+            'fecha_emision' => 'required|date',\n+            'fecha_caducidad' => 'nullable|date',\n+            'codFolio' => 'required|integer',\n+            'codPersonal' => 'required|string',\n+            'imagenes' => 'required|array',\n+            'imagenes.*' => 'image|max:5120' // máximo 5MB por imagen (ajusta según tu necesidad)\n+        ]);\n+\n+        $fechaEmision = $request->input('fecha_emision');\n+        $fechaCaducidad = $request->input('fecha_caducidad');\n+        $codFolio = $request->input('codFolio');\n+        $codPersonal = $request->input('codPersonal');\n+        $imagenes = $request->file('imagenes');\n+\n+        // Obtiene las rutas de carpeta según el folio\n+        $subCarpetas = FileControl::getRutaFolio($codFolio); // devuelve un array de rutas\n+\n+       \n+        if (count($subCarpetas) !== count($imagenes)) {\n+            return response()->json([\n+                'error' => 'El número de imágenes no coincide con el número de rutas esperadas para el folio.'\n+            ], 400);\n+        }\n+\n+        foreach ($imagenes as $index => $imagen) {\n+            $rutaSubcarpeta = $subCarpetas[$index] ?? null;\n+\n+            if (!$rutaSubcarpeta) {\n+                continue; // O lanza un error si lo prefieres\n+            }\n+\n+            $rutaDestino = public_path('Biblioteca_Grafica/' . $rutaSubcarpeta);\n+\n+            // Crea la carpeta si no existe\n+            if (!file_exists($rutaDestino)) {\n+                mkdir($rutaDestino, 0777, true);\n+            }\n+\n+            // Guarda la imagen con el nombre del codPersonal\n+            $nombreArchivo = $codPersonal . '.' . $imagen->getClientOriginalExtension();\n+\n+            $imagen->move($rutaDestino, $nombreArchivo);\n+        }\n+\n+        // Aquí podrías guardar los datos en la BD si lo necesitas\n+        // ...\n+\n+        return response()->json([\n+            'message' => 'Folio guardado exitosamente.',\n+        ]);\n+        \n+    }\n+\n+\n+    //DE EVER\n+    /*public function saveFolioPersona(Request $request)\n+    {\n+        $validated = $request->validate([\n+            'fecha_emision'     => 'required|date',\n+            'fecha_caducidad'   => 'nullable|date',\n+            'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n+            'codPersonal'       => 'required|string',\n+            'codFolio'          => 'required|string',\n+        ]);\n+\n+        try {\n+            $codPersonal = $validated['codPersonal'];\n+            $codFolio    = $validated['codFolio'];\n+            $archivos    = $request->file('imagenes');\n+            $total       = count($archivos);\n+\n+            // Subcarpeta relativa dentro de public/\n+            $subCarpeta = FileControl::getRutaFolio($codFolio); // ejemplo: \"folios/F123\"\n+            $rutaBase = public_path($subCarpeta);\n+\n+            if (!File::exists($rutaBase)) {\n+                File::makeDirectory($rutaBase, 0777, true);\n+            }\n+\n+            foreach ($archivos as $index => $archivo) {\n+                $nombreArchivo = ($total === 1)\n+                    ? \"{$codPersonal}.jpg\"\n+                    : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n+\n+                $rutaFinal = $rutaBase . '/' . $nombreArchivo;\n+\n+                // Guardar archivo en public/\n+                file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n+            }\n+\n+            // Guardar en BD\n+            FileControl::saveFolioPersonal(\n+                $validated['fecha_emision'],\n+                $validated['fecha_caducidad'],\n+                $codFolio,\n+                $codPersonal\n+            );\n+\n+            return response()->json(['message' => 'Folios guardados correctamente.']);\n+\n+        } catch (\\Exception $e) {\n+            Log::error('Error al guardar folios en public/: ' . $e->getMessage());\n+            return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n+        }\n+    }\n+        */\n+\n+    public function saveFolio(Request $request)\n+    {\n+        $codigo = $request->input('codigo');\n+        $nombre = $request->input('nombre');\n+        $tipo = $request->input('tipo');\n+        $obligatorio = $request->input('obligatorio');\n+        $vencimiento = $request->input('vencimiento');\n+        $tipo_fecha = $request->input('periodo');\n+        $plataforma = $request->input('plataforma');\n+\n+        if (empty($codigo)) {\n+            $inserted = FileControl::saveFolio($nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n+        } else {\n+            $inserted = FileControl::updateFolio($codigo, $nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n+        }\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'Folio guardado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }\n+\n+        //return response()->json(['message' => 'Folios creados']);\n+    }\n+\n+    public function disabledFolio(Request $request){\n+        $codigo = $request->codigo;\n+        $result = FileControl::disabledFolio($codigo);\n+\n+        if ($result) {\n+            return response()->json(['message' => 'Folio deshabilitado exitosamente'], 200);\n+        } else {\n+            return response()->json(['message' => 'Folio no encontrado o error al deshabilitar'], 404);\n+        }\n+    }\n+\n+    public function saveCargo(Request $request){\n+        $descripcion = $request->input('descripcion');\n+        $nombre = $request->input('nombre');\n+        $cod_tipo = $request->input('tipoCargo');\n+        $abreviatura = $request->input('abreviatura');\n+        $cod_servicio = $request->input('codPosicion');\n+        $cod_subservicio = $request->input('codGrupo');\n+        $cod_area = $request->input('codArea');\n+\n+        $usuario = session('usuario');\n+\n+        $inserted = FileControl::saveCargo($descripcion, $nombre, $abreviatura, $cod_servicio, $cod_subservicio, $cod_tipo, $cod_area, $usuario);\n+\n+        return response()->json(['message' => 'Cargo creado']);\n+    }\n+\n+    public function dashboard()\n+    {\n+        return view('file_control.dashboard');\n+    }\n+\n+    //-----------------\n+\n+    public function getFoliosXLegajo($codCliente, $codCargo){\n+        $folios = FileControl::getFoliosXLegajo($codCliente, $codCargo);\n+        return response()->json($folios);\n+    }\n+\n+    public function getAreas(){\n+        $areas = FileControl::getAreas();\n+        return response()->json($areas);\n+    }\n+\n+    public function getPosicion(){\n+        $data = FileControl::getPosicion();\n+        return response()->json($data);\n+    }\n+\n+    public function getGrupo(){\n+        $data = FileControl::getGrupo();\n+        return response()->json($data);\n+    }\n+\n+    public function getGrupoId($codigo){\n+        //$codigo = $request->input('codigo');\n+        $data = FileControl::getGrupoId($codigo);\n+        return response()->json($data);\n+    }\n+\n+    public function saveLegajo(Request $request){\n+        $folios = $request->input('folios');\n+        $codCliente = $request->input('codCliente');\n+        $codCargo = $request->input('codCargo');\n+        $codLegajo = $request->input('codLegajo');\n+        $nombre  = $request->input('nombre');\n+\n+        $usuario = session('usuario');\n+\n+        if($codLegajo != '0'){//MODIFICAR LEGAJO\n+            $codigos = FileControl::QuitarTodosLegajos($codLegajo, $usuario);\n+\n+            for ($i = 0; $i < count($codigos); $i++) {\n+                if (!in_array($codigos[$i], $folios)) {\n+                    FileControl::actualizarNotificacionDes($codigos[$i], $codCliente, $codCargo);\n+                }\n+            }\n+\n+            for($i = 0; $i < count($folios); $i++){\n+                $folio = $folios[$i];\n+                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $codLegajo);\n+                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n+\n+                if(empty($validar)){\n+                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n+                }else{\n+                    FileControl::updateLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n+                }\n+            }\n+        }else{//CREAR NUEVO LEGAJO\n+            $legajo = FileControl::saveLegajoMain($nombre);\n+\n+            for($i = 0; $i < count($folios); $i++){\n+                $folio = $folios[$i];\n+                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $legajo);\n+                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n+                if(empty($validar)){\n+                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $legajo, $usuario);\n+                }\n+\n+            }\n+        }\n+    }\n+\n+    /* GESTION DE CARGOS */\n+    public function insertarCargo(Request $request)\n+    {\n+        $tipo = $request->input('tipoCargo');\n+        $codArea = $request->input('codArea');\n+        $nombre = $request->input('nombre');\n+        $descripcion = $request->input('descripcion');\n+        $abreviatura = $request->input('abreviatura');\n+        $codPosicion = $request->input('codPosicion');\n+        $codGrupo = $request->input('codGrupo');\n+\n+        $data = [\n+            $tipo,\n+            $codArea,\n+            $nombre,\n+            $descripcion,\n+            $abreviatura,\n+            $codPosicion,\n+            $codGrupo,\n+            'SISTEMA'\n+        ];\n+\n+        $inserted = FileControl::insertarCargo($data);\n+\n+        return response()->json(['message' => 'Cargo creado']);\n+    }\n+    public function updateCargo(Request $request)\n+    {\n+        $tipo = $request->input('tipoCargo');\n+        $codArea = $request->input('codArea');\n+        $nombre = $request->input('nombre');\n+        $descripcion = $request->input('descripcion');\n+        $abreviatura = $request->input('abreviatura');\n+        $codPosicion = $request->input('codPosicion');\n+        $codGrupo = $request->input('codGrupo');\n+        $codigo = $request->input('codigo');\n+\n+        $data = [\n+            $codigo,\n+            $tipo,\n+            $codArea,\n+            $nombre,\n+            $descripcion,\n+            $abreviatura,\n+            $codPosicion,\n+            $codGrupo,\n+            'SISTEMA'\n+        ];\n+\n+        $inserted = FileControl::updateCargo($data);\n+\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'Cargo modificado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }\n+\n+        //return response()->json(['message' => 'Folios creados']);\n+    }\n+\n+\n+    public function getCargosXCodigo($codigo){\n+        $data = FileControl::getCargosXCodigo($codigo);\n+        return response()->json($data);\n+    }\n+\n+\n+    public function eliminarCargo(Request $request){\n+        $codigo = $request->input('codigo');\n+        $data = 0;\n+        $inserted = FileControl::activarCargo($codigo, $data);\n+        return response()->json(['message' => 'Cargo modificdo']);\n+    }\n+\n+    public function activarCargo(Request $request){\n+        $codigo = $request->input('codigo');\n+        $data = 1;\n+        $inserted = FileControl::activarCargo($codigo, $data);\n+        return response()->json(['message' => 'Cargo modificdo']);\n+    }\n+\n+    public function ViewLegajo_comercial(){\n+\n+        return view('file_control.legajos_comercial');\n+    }\n+\n+    public function saveSolicitud(Request $request){\n+        $codigo = $request->input('codigo');\n+        $tiene = $request->input('tiene');\n+        $cargo = $request->input('cargo');\n+        $cliente = $request->input('cliente');\n+\n+        $usuario = session('usuario');\n+\n+        FileControl::saveSolicitud($codigo, $tiene, $cargo, $cliente, $usuario);\n+        return response()->json(['message' => 'Solicitud creado']);\n+    }\n+\n+}\n"
                },
                {
                    "date": 1753339857167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -527,9 +527,9 @@\n             'fecha_caducidad' => 'nullable|date',\n             //'file' => 'nullable|file|mimes:pdf,jpg,jpeg,png|max:1024',\n         ]);\n \n-        // Para guardar el arcivo con la codificación del personal\n+        // Para guardar el archivo con la codificación del personal\n \n         $codPersonal = $request->input('codPersonal');\n         $total = count($request->file('imagenes'));\n         foreach ($request->file('imagenes') as $index => $archivo) {\n"
                },
                {
                    "date": 1753340193372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -547,15 +547,18 @@\n             //$filePath = null;\n             // Llamar al microservicio para guardar el archivo en el servidor local\n             //$filePath = 'http://190.116.178.163/Biblioteca_Grafica/'.$rutaArchivo.'/'.$nameFile;\n \n-            $response = Http::withToken('457862h45hj7u5126h58d2s51s2s') // Autenticación con el token\n-                ->attach('archivo', file_get_contents($archivo), $archivo->getClientOriginalName()) // Adjuntar el archivo\n-                //->post('https://sisolmar.gruposolmar.pe/apps/api/file-control/charge-file.php', [\n-                ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n-                    'nameFile' => $nameFile,\n-                    'ruta' => $rutaArchivo\n-                ]);\n+            $response = Http::withToken('457862h45hj7u5126h58d2s51s2s')\n+            ->attach(\n+                'archivo',\n+                file_get_contents($archivo->getPathname()), // ✅ CORRECTO\n+                $archivo->getClientOriginalName()\n+            )\n+            ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n+                'nameFile' => $nameFile,\n+                'ruta' => $rutaArchivo\n+            ]);\n \n             if ($response->failed()) {\n                 return response()->json(['error' => 'No se pudo guardar el archivo en el servidor local'], 500);\n             }\n"
                },
                {
                    "date": 1753340271578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1089,1093 +1089,4 @@\n         return response()->json(['message' => 'Solicitud creado']);\n     }\n \n }\n-<?php\n-\n-namespace App\\Http\\Controllers;\n-\n-use App\\Helpers\\PdfHelper;\n-use App\\Helpers\\ImagenHelper;\n-use Barryvdh\\Snappy\\Facades\\SnappyPdf;\n-use Illuminate\\Http\\Request;\n-use App\\Models\\FileControl;\n-use Illuminate\\Support\\Facades\\App;\n-use Illuminate\\Support\\Facades\\Log;\n-use Illuminate\\Support\\Facades\\Http;\n-use Illuminate\\Support\\Str;\n-use Illuminate\\Support\\Facades\\File;\n-use Illuminate\\Support\\Facades\\Storage;\n-use ZipArchive;\n-\n-class FileController extends Controller{\n-    public function index(){\n-        $personal = FileControl::getPersonal();\n-        //$cargos = FileControl::getCargos();\n-        $clientes = FileControl::getClientesLegajos();\n-        $sucursales = FileControl::getSucursales();\n-\n-        return view('file_control.chargefile', compact('personal', 'clientes', 'sucursales'));\n-    }\n-\n-    public function getCargosXCliente(Request $request){\n-        $cliente = $request->input('cliente');\n-        $cargos = FileControl::getCargosXCliente($cliente);\n-        return response()->json($cargos);\n-    }\n-\n-    public function ViewDashboard(){\n-        /*$personal = FileControl::getPersonal();\n-        $cargos = FileControl::getCargos();\n-        $clientes = FileControl::getClientes();\n-        $sucursales = FileControl::getSucursales();*/\n-\n-        return view('file_control.dashboard'/*, compact('personal', 'cargos', 'clientes', 'sucursales')*/);\n-    }\n-\n-    public function getPersonal(Request $request){\n-        $personal = FileControl::getPersonal();\n-        return response()->json($personal);\n-    }\n-\n-    public function getDocumentosXPersonal($codPersonal){\n-        $docs_personal = FileControl::getDocsXPersona($codPersonal);\n-        return response()->json($docs_personal);\n-    }\n-\n-    public function getFoliosXPersonas(Request $request){\n-        $personas = $request->personas;\n-        $folios = $request->folios;\n-        $resultados = [];\n-        //Averiguando la sucursal de la persona\n-\n-\n-        foreach ($personas as $persona) {\n-            $sucursal = FileControl::getSucursalXPersona($persona['CODI_PERS']);\n-            foreach ($folios as $folio) {\n-                $datosFolioPersona = FileControl::getFoliosInfoPersona($persona['CODI_PERS'], $folio['codigo']);\n-                foreach ($datosFolioPersona as $dato) {\n-                    $resultados[] = [\n-                        //'persona' => $persona['personal'],\n-                        'persona' => $dato->personal ?? null,\n-                        'nroDoc' => $dato->nroDoc ?? null,\n-                        'codPersonal' => $persona['CODI_PERS'],\n-                        'folio' => $folio['nombre'],\n-                        'sucursal' => $sucursal,\n-                        'ruta' => $dato->ruta_archivo ?? null,\n-                        'ancho' => $dato->ancho ?? null,\n-                        'hojas' => $dato->cantidad_hojas ?? null,\n-                        'documento' => $dato->documento ?? null,\n-                        'cargo' => $dato->cargo ?? null,\n-                        'es_formato' => $dato->es_formato ?? null,\n-                    ];\n-                }\n-                /*$resultados[] = [\n-                    'persona' => $persona['personal'],\n-                    'folio' => $folio['nombre'],\n-                    'ruta' => $datosFolioPersona[0]->ruta_archivo ?? null,\n-                ];*/\n-            }\n-        }\n-        return response()->json($resultados);\n-    }\n-\n-    public function getFoliosXPersona_uno(Request $request){\n-        $persona = $request->input('codPersona');\n-        $folios = $request->folios;\n-        $resultados = [];\n-\n-        $sucursal = FileControl::getSucursalXPersona($persona);\n-\n-        foreach ($folios as $folio) {\n-            $datosFolioPersona = FileControl::getFoliosInfoPersona($persona, $folio['codigo']);\n-            foreach ($datosFolioPersona as $dato) {\n-                $resultados[] = [\n-                    'persona' => $dato->personal ?? null,\n-                    'nroDoc' => $dato->nroDoc ?? null,\n-                    'codPersonal' => $persona,\n-                    'folio' => $folio['nombre'],\n-                    'sucursal' => $sucursal,\n-                    'ruta' => $dato->ruta_archivo ?? null,\n-                    'ancho' => $dato->ancho ?? null,\n-                    'hojas' => $dato->cantidad_hojas ?? null,\n-                    'documento' => $dato->documento ?? null,\n-                    'cargo' => $dato->cargo ?? null,\n-                    'es_formato' => $dato->es_formato ?? null,\n-                ];\n-            }\n-        }\n-\n-        return response()->json($resultados);\n-    }\n-\n-    // public function generarPDFsPorPersona(Request $request){\n-    //     $resultados = $request->input('resultados');\n-\n-    //     // Agrupar todos los datos por persona\n-    //     $agrupados = [];\n-    //     foreach ($resultados as $item) {\n-    //         $cod = $item['codPersonal'];\n-    //         $agrupados[$cod][] = $item;\n-    //     }\n-\n-    //     $carpetaTemporal = storage_path('app/temp_pdfs');\n-    //     if (!File::exists($carpetaTemporal)) {\n-    //         File::makeDirectory($carpetaTemporal, 0777, true, true);\n-    //     }\n-\n-    //     $pdfsGenerados = [];\n-\n-    //     foreach ($agrupados as $codPersonal => $documentosPersona) {\n-    //         $persona = $documentosPersona[0]['persona'] ?? 'persona_sin_nombre';\n-\n-    //         // Carátula: datos únicos de persona\n-    //         $caratula = [\n-    //             'persona' => $persona,\n-    //             'codPersonal' => $codPersonal,\n-    //             'sucursal' => $documentosPersona[0]['sucursal'] ?? '',\n-    //             'cargo' => $documentosPersona[0]['cargo'] ?? '',\n-    //         ];\n-\n-    //         // Separar documentos: escaneados vs formatos Blade\n-    //         $urls = [];\n-    //         $itemsFinales = [];\n-\n-    //         foreach ($documentosPersona as $doc) {\n-    //             if (!empty($doc['ruta'])) {\n-    //                 $urls[] = [\n-    //                     'ruta' => $doc['ruta'],\n-    //                     'codPersonal' => $codPersonal,\n-    //                     'ancho' => $doc['ancho'],\n-    //                     'hojas' => $doc['hojas'],\n-    //                     'documento' => $doc['documento'],\n-    //                     'es_formato' => $doc['es_formato'],\n-    //                 ];\n-    //             }\n-\n-    //             if ($doc['es_formato'] == 1) {\n-    //                 $itemsFinales[] = [\n-    //                     'es_formato' => 1,\n-    //                     'codPersonal' => $codPersonal,\n-    //                     'documento' => $doc['documento'],\n-    //                     'nombre_vista' => $this->obtenerNombreVista($doc),\n-    //                     'datos' => $doc,\n-    //                     'firma' => public_path('temp_legajos') . '/FIRMAS/PERSONAL/' . $codPersonal . '.jpg',\n-    //                     'huella' => public_path('temp_legajos') . '/HUELLAS_DIGITALES/PERSONAL/' . $codPersonal . '.jpg',\n-    //                 ];\n-\n-    //                 // Descargar imágenes del formato (firma y huella)\n-    //                 ImagenHelper::descargarImagenesFormato($codPersonal);\n-    //             }\n-    //         }\n-\n-    //         // Descargar imágenes escaneadas\n-    //         $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n-\n-    //         foreach ($rutasLocales as $img) {\n-    //             $itemsFinales[] = [\n-    //                 'es_formato' => 0,\n-    //                 'codPersonal' => $codPersonal,\n-    //                 'ruta' => $img['ruta'],\n-    //                 'documento' => $img['documento'],\n-    //                 'hojas' => $img['hojas'],\n-    //                 'ancho' => $img['ancho'],\n-    //             ];\n-    //         }\n-\n-    //         // Render PDF de esta persona\n-    //         $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n-    //             'personas' => [$caratula], // vista espera array\n-    //             'resultados' => $documentosPersona,\n-    //             'imagenes' => $rutasLocales,\n-    //             'items' => $itemsFinales,\n-    //         ])->setOption('enable-local-file-access', true);\n-\n-    //         $nombreArchivo = 'PDF_' . Str::slug($persona) . '_' . $codPersonal . '.pdf';\n-    //         $rutaArchivo = $carpetaTemporal . '/' . $nombreArchivo;\n-\n-    //         $pdf->save($rutaArchivo);\n-    //         $pdfsGenerados[] = $rutaArchivo;\n-    //     }\n-\n-    //     // Comprimir todo en ZIP\n-    //     $zipPath = storage_path('app/documentos_por_persona.zip');\n-    //     $zip = new \\ZipArchive();\n-\n-    //     if ($zip->open($zipPath, \\ZipArchive::CREATE | \\ZipArchive::OVERWRITE) === true) {\n-    //         foreach ($pdfsGenerados as $archivo) {\n-    //             $zip->addFile($archivo, basename($archivo));\n-    //         }\n-    //         $zip->close();\n-    //     }\n-\n-    //     return response()->download($zipPath)->deleteFileAfterSend(true);\n-    // }\n-\n-    public function generarPDF_env(Request $request){\n-        echo \"Hola\";\n-    }\n-\n-    public function pdf_vacio()\n-    {\n-        // Aquí cargas una vista muy simple (puedes crear un blade vacío o con texto simple)\n-        $pdf = SnappyPdf::loadView('file_control.pdf.reporte_vacio');\n-\n-        // Lo envías para que se descargue (o inline si quieres verlo en navegador)\n-        return $pdf->inline('reporte_vacio.pdf');\n-    }\n-\n-\n-    public function generarPDF(Request $request){\n-        $resultados = $request->input('resultados');\n-        //dd($resultados);\n-        //exit;\n-        //Agrupar los datos para mostrar en la carátula\n-        $unicos = [];\n-\n-        $nombreNuevo = 'Reporte';\n-\n-        foreach ($resultados as $item) {\n-            $clave = $item['persona'] . '|' . $item['sucursal'] . '|' . $item['codPersonal'] . '|' . $item['cargo'];\n-            if(!isset($unicos[$clave])) {\n-                $unicos[$clave] = [\n-                    'persona' => $item['persona'],\n-                    'codPersonal' => $item['codPersonal'],\n-                    'sucursal' => $item['sucursal'],\n-                    'cargo' => $item['cargo'],\n-                ];\n-\n-\n-            }\n-\n-             $nombreNuevo = $item['codPersonal'].'_'.$item['persona'] . '_' . date('Ymd_Hi');\n-        }\n-\n-        $personasUnicas = array_values($unicos);\n-\n-        //Para los FORMATOS\n-        // $formatosBlade = [\n-        //     'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n-        //     'DECLARACION JURADA ' => 'file_control.pdf.declaracion_jurada',\n-        // ];\n-\n-        $urls = [];\n-\n-        foreach ($resultados as $resultado) {\n-            if (!empty($resultado['ruta']) && !empty($resultado['codPersonal'])) {\n-                $urls[] = [\n-                    'ruta' => $resultado['ruta'],\n-                    'codPersonal' => $resultado['codPersonal'],\n-                    'ancho' => $resultado['ancho'],\n-                    'hojas' => $resultado['hojas'],\n-                    'documento' => $resultado['documento'],\n-                    'es_formato' => $resultado['es_formato'],\n-                ];\n-            }\n-        };\n-\n-        $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n-\n-        $itemsFinales = [];\n-        //Los que tienen imagen en ruta\n-        foreach ($rutasLocales as $item) {\n-            $itemsFinales[] = [\n-                'es_formato' => $item['es_formato'],\n-                'codPersonal' => $item['codPersonal'],\n-                'ruta' => $item['ruta'],\n-                'documento' => $item['documento'],\n-                'hojas' => $item['hojas'],\n-                'ancho' => $item['ancho'],\n-            ];\n-        }\n-\n-        // Los que deben renderizar una vista Blade porque son formatos (es_formato == 1)\n-        foreach ($resultados as $resultado) {\n-            if ($resultado['es_formato'] == 1) {\n-                $itemsFinales[] = [\n-                    'es_formato' => $resultado['es_formato'],\n-                    'codPersonal' => $resultado['codPersonal'],\n-                    'documento' => $resultado['documento'],\n-                    'nombre_vista' => $this->obtenerNombreVista($resultado), // Función que defines\n-                    'datos' => $resultado,\n-                    'firma' => public_path('temp_legajos').'/FIRMAS/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n-                    'huella' => public_path('temp_legajos').'/HUELLAS_DIGITALES/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n-                ];\n-                //Hacer la copia local de la FIRMA y HUELLA DIGITAL\n-                $rutasLocalesFormato = ImagenHelper::descargarImagenesFormato($resultado['codPersonal']);\n-            }\n-        }\n-\n-        //print_r($itemsFinales);\n-        $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n-            'personas' => $personasUnicas,\n-            'resultados' => $resultados,\n-            'imagenes' => $rutasLocales,\n-            'items' => $itemsFinales,\n-        ])->setOption('enable-local-file-access', true);\n-\n-        return response()->streamDownload(function () use ($pdf) {\n-            echo $pdf->output();\n-        }, $nombreNuevo . '.pdf', [\n-            'Content-Type' => 'application/pdf',\n-            'X-Nombre-Archivo' => $nombreNuevo . '.pdf', // <- aquí\n-        ]);\n-    }\n-\n-    public function obtenerNombreVista($resultado) {\n-        $mapa = [\n-            'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n-            'DECLARACION JURADA DE CUMPLIMIENTO DE DISPOSICIONES' => 'file_control.pdf.declaracion_jurada',\n-            'EVALUACION DEL POSTULANTE' => 'file_control.pdf.evaluacion_postulante',\n-            'COMPROMISO DE CONFIABILIDAD' => 'file_control.pdf.compromiso_confidencialidad',\n-            'CUMPLIMIENTO DE cumpliDISPOSICION' => 'file_control.pdf.dj_complumiento_disposicion',\n-            'ESTUDIO DE SEGURIDAD DE TRABAJADORES' => 'file_control.pdf.dj_complumiento_disposicion',\n-            'VISITA DOMICILIARIA' => 'file_control.pdf.visita_domiciliaria_concluciones'\n-        ];\n-\n-        return $mapa[$resultado['documento']] ?? null;\n-    }\n-\n-    public function generarReporteConsulta(Request $request){\n-        $codigo =  $request->input('valor');\n-        $data = FileControl::getReporteFiltro($codigo);\n-        return response()->json($data);\n-    }\n-\n-\n-    public function generarPDF2(Request $request) {\n-        $resultados = $request->input('resultados');\n-        $html = '';\n-\n-        $vistas = [\n-            'file_control.pdf.evaluacion-postulante',\n-            'file_control.pdf.declaracion-jurada',\n-            'file_control.pdf.acta_compromiso',\n-            'file_control.pdf.compromiso_confidencialidad',\n-            'file_control.pdf.dj_cumplimiento_disposicion',\n-            'file_control.pdf.estudio_seguridad_empleado',\n-            'file_control.pdf.estudio_seguridad_empleado_2',\n-            'file_control.pdf.visita_domiciliaria',\n-            'file_control.pdf.visita_domiciliaria_concluciones',\n-        ];\n-\n-        foreach ($vistas as $vista) {\n-\n-            $html .= view($vista, [\n-                'resultados' => $resultados\n-            ])->render();\n-\n-            $html .= '<div style=\"page-break-after: always;\"></div>';\n-        }\n-\n-        $pdf = SnappyPdf::loadHTML($html)->setOption('enable-local-file-access', true);\n-\n-        return response($pdf->inline('reporte_completo.pdf'))->header('Content-Type', 'application/pdf');\n-    }\n-\n-    public function getAllCargo()\n-    {\n-        $data = FileControl::getAllCargo();\n-        return response()->json($data);\n-    }\n-\n-    public function getClientes(){\n-        $data = FileControl::getClientes();\n-        return response()->json($data);\n-    }\n-\n-    public function getClientesLegajos(){\n-        $data = FileControl::getClientesLegajos();\n-        return response()->json($data);\n-    }\n-\n-    public function getLegajos(Request $request)\n-    {\n-        $cliente = $request->input('cliente');\n-        $cargo = $request->input('cargo');\n-        $codPersonal = $request->input('codigo');\n-\n-        $legajos = FileControl::getLegajos($cliente, $cargo, $codPersonal);\n-        return response()->json($legajos);\n-    }\n-\n-    public function getFoliosClienteCargo(Request $request){\n-        $cliente = $request->input('cliente');\n-        $cargo = $request->input('cargo');\n-\n-        $legajos = FileControl::getFoliosClienteCargo($cliente, $cargo);\n-        return response()->json($legajos);\n-    }\n-\n-    public function getFoliosXLegajo_comercial($codCliente, $codCargo){\n-        $folios = FileControl::getFoliosXLegajo_comercial($codCliente, $codCargo);\n-        return response()->json($folios);\n-    }\n-\n-    public function getCargos(){\n-        $cargos = FileControl::getCargos();\n-        return response()->json($cargos);\n-    }\n-\n-    public function getFolios(){\n-        $folios = FileControl::getFolios();\n-        return response()->json($folios);\n-    }\n-\n-    public function ViewCargo()\n-    {\n-        $todos = \\DB::table('sw_cargos')\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $operativo = \\DB::table('sw_cargos')\n-                    ->where('cod_tipo', 1)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $administrativo = \\DB::table('sw_cargos')\n-                    ->where('cod_tipo', 2)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        return view('file_control.cargo',compact('todos', 'operativo', 'administrativo'));\n-    }\n-\n-    public function ViewLegajo()\n-    {\n-         $notif = FileControl::listarNotificaciones();\n-        return view('file_control.legajos', [\n-            'notify' => $notif\n-        ]);\n-    }\n-\n-    public function ViewFolios()\n-    {\n-        $periodos = FileControl::getPeriodos();\n-        $todos = \\DB::table('sw_folios')\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $principal = \\DB::table('sw_folios')\n-                    ->where('obligatorio', 1)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $adicional = \\DB::table('sw_folios')\n-                    ->where('obligatorio', 0)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $documento = \\DB::table('sw_folios')\n-                    ->where('tipo', 1)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $formato = \\DB::table('sw_folios')\n-                    ->where('tipo', 2)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-        $certificado = \\DB::table('sw_folios')\n-                    ->where('tipo', 3)\n-                    ->where('habilitado', 1)\n-                    ->count();\n-\n-        return view('file_control.folios', compact('periodos', 'todos', 'principal', 'adicional', 'documento', 'formato', 'certificado'));\n-    }\n-\n-    public function ViewBusquedaLegajo()\n-    {\n-        $personal = FileControl::getPersonalLegajos();\n-        $cargos = FileControl::getCargos();\n-        //$clientes = FileControl::getClientes();\n-        $clientes = FileControl::getClientesLegajos();\n-\n-        return view('file_control.search_legajos', compact('personal', 'cargos', 'clientes'));\n-    }\n-\n-    public function ViewLegajoPdf()\n-    {\n-        $sucursales = FileControl::getSucursales();\n-        $cargos = FileControl::getCargos();\n-        $clientes = FileControl::getClientes();\n-        return view('file_control.legajos_pdf', compact('sucursales','cargos','clientes'));\n-    }\n-\n-    public function getPersonalLegajos(Request $request)\n-    {\n-        $personal = FileControl::getPersonalLegajos();\n-        return response()->json($personal);\n-    }\n-\n-    public function getCoincidencias(Request $request)\n-    {\n-        $cliente = $request->input('cliente');\n-        $cargo = $request->input('cargo');\n-\n-        $legajos = FileControl::getCoincidencias($cliente, $cargo);\n-        return response()->json($legajos);\n-    }\n-\n-    //GUARDAR DATOS\n-    // public function saveFolioPersona(Request $request){\n-    //     //dd($request->file('imagenes'));\n-\n-\n-    //     // Validar los datos del formulario\n-    //     $validated = $request->validate([\n-    //         'fecha_emision' => 'required|date',\n-    //         'fecha_caducidad' => 'nullable|date',\n-    //         //'file' => 'nullable|file|mimes:pdf,jpg,jpeg,png|max:1024',\n-    //     ]);\n-\n-    //     // Para guardar el arcivo con la codificación del personal\n-\n-    //     $codPersonal = $request->input('codPersonal');\n-    //     $total = count($request->file('imagenes'));\n-    //     foreach ($request->file('imagenes') as $index => $archivo) {\n-    //         //$nombre = 'folio_'.$id.'_'.$index.'.jpg';\n-    //         //Condición si es 1 archivo o varios, para asignar el nombre al archivo\n-    //         if($total == 1){\n-    //             $nameFile = $codPersonal.'.jpg';\n-    //         }else{\n-    //             $nameFile = $codPersonal.'_'.($index+1).'.jpg';\n-    //         }\n-\n-    //         // Averiguar el nombre de la carpeta o ruta donde debe de guardarse el archivo\n-    //         $rutaArchivo = FileControl::getRutaFolio($request->input('codFolio'));\n-\n-    //         //$filePath = null;\n-    //         // Llamar al microservicio para guardar el archivo en el servidor local\n-    //         //$filePath = 'http://190.116.178.163/Biblioteca_Grafica/'.$rutaArchivo.'/'.$nameFile;\n-\n-    //         $response = Http::withToken('457862h45hj7u5126h58d2s51s2s') // Autenticación con el token\n-    //             ->attach('archivo', file_get_contents($archivo), $archivo->getClientOriginalName()) // Adjuntar el archivo\n-    //             //->post('https://sisolmar.gruposolmar.pe/apps/api/file-control/charge-file.php', [\n-    //             ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n-    //                 'nameFile' => $nameFile,\n-    //                 'ruta' => $rutaArchivo\n-    //             ]);\n-\n-    //         if ($response->failed()) {\n-    //             return response()->json(['error' => 'No se pudo guardar el archivo en el servidor local'], 500);\n-    //         }\n-\n-    //         $archivo->storeAs('uploads/folios', $nameFile);\n-    //     }\n-\n-\n-\n-    //     // Llamar al método saveFolioPersonal pasando los datos y el archivo\n-    //     $inserted = FileControl::saveFolioPersonal(\n-    //         $validated['fecha_emision'],\n-    //         $validated['fecha_caducidad'],\n-    //         $request->codFolio,\n-    //         $request->codPersonal,\n-    //         //$filePath // Pasamos la ruta del archivo\n-    //     );\n-\n-    //     return response()->json(['message' => 'Folios del persona guardados']);\n-\n-    // }\n-\n-\n-     public function getViewDocumentsPer($codPersonal, $codFolio)\n-    {\n-        $result = FileControl::getViewPerDocs($codPersonal, $codFolio);\n-\n-        if (empty($result)) {\n-            return response()->json(['success' => false, 'message' => 'No se encontraron rutas'], 404);\n-        }\n-\n-        $extensiones = ['jpg', 'jpeg', 'png', 'pdf'];\n-        $rutasValidas = [];\n-\n-        foreach ($result as $item) {\n-            $rutaEncontrada = false;\n-\n-            // Probar primero con ruta_aux\n-            if (isset($item->ruta_aux)) {\n-                $rutaBase = str_replace('//', 'http://', $item->ruta_aux);\n-\n-                foreach ($extensiones as $ext) {\n-                    $rutaConExt = $rutaBase . '.' . $ext;\n-\n-                    if (self::urlExiste($rutaConExt)) {\n-                        $rutasValidas[] = $rutaConExt;\n-                        $rutaEncontrada = true;\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            // Si no se encontró nada en ruta_aux, probar con ruta\n-            if (!$rutaEncontrada && isset($item->ruta)) {\n-                $rutaBase = str_replace('//', 'http://', $item->ruta);\n-\n-                foreach ($extensiones as $ext) {\n-                    $rutaConExt = $rutaBase . '.' . $ext;\n-\n-                    if (self::urlExiste($rutaConExt)) {\n-                        $rutasValidas[] = $rutaConExt;\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-\n-        if (empty($rutasValidas)) {\n-            return response()->json([\n-                'success' => false,\n-                'message' => 'No se encontraron archivos accesibles desde la red'\n-            ]);\n-        }\n-\n-        return response()->json([\n-            'success' => true,\n-            'rutas' => $rutasValidas\n-        ]);\n-    }\n-\n-    // Función para validar si la URL existe\n-    private static function urlExiste($url)\n-    {\n-        $ch = curl_init($url);\n-        curl_setopt($ch, CURLOPT_NOBODY, true);\n-        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n-        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n-        curl_exec($ch);\n-        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n-        curl_close($ch);\n-\n-        return $statusCode === 200;\n-    }\n-\n-\n-\n-    // public function saveFolioPersona(Request $request)\n-    // {\n-    //     $validated = $request->validate([\n-    //         'fecha_emision'     => 'required|date',\n-    //         'fecha_caducidad'   => 'nullable|date',\n-    //         'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n-    //         'codPersonal'       => 'required|string',\n-    //         'codFolio'          => 'required|string',\n-    //     ]);\n-\n-    //     try {\n-    //         $codPersonal = $validated['codPersonal'];\n-    //         $codFolio    = $validated['codFolio'];\n-    //         $archivos    = $request->file('imagenes');\n-    //         $total       = count($archivos);\n-\n-    //         // Obtener ruta lógica relativa\n-    //         $subCarpeta = FileControl::getRutaFolio($codFolio); // Ejemplo: \"FOLIOS/2025/F123\"\n-\n-    //         foreach ($archivos as $index => $archivo) {\n-    //             $nombreArchivo = ($total === 1)\n-    //                 ? \"{$codPersonal}.jpg\"\n-    //                 : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n-\n-    //             $rutaRelativa = $subCarpeta . '/' . $nombreArchivo;\n-\n-    //             if (App::environment('local')) {\n-    //                 // Guardado directo en ruta de red en entorno local\n-    //                 $rutaFinal = \"\\\\\\\\192.168.10.5:86\\\\sisolmar\\\\DATA_SISOLMAR\\\\\" . $subCarpeta . \"\\\\\" . $nombreArchivo;\n-\n-    //                 if (!file_exists(dirname($rutaFinal))) {\n-    //                     mkdir(dirname($rutaFinal), 0777, true);\n-    //                 }\n-\n-    //                 file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n-    //             }\n-\n-    //             if (App::environment('production')) {\n-    //                 // Guardado en D:\\ mediante Storage\n-    //                 Storage::disk('disk_d')->put($rutaRelativa, file_get_contents($archivo->getRealPath()));\n-    //             }\n-    //         }\n-\n-    //         // Lógica adicional de BD\n-    //         FileControl::saveFolioPersonal(\n-    //             $validated['fecha_emision'],\n-    //             $validated['fecha_caducidad'],\n-    //             $codFolio,\n-    //             $codPersonal\n-    //         );\n-\n-    //         return response()->json(['message' => 'Folios del personal guardados correctamente.']);\n-\n-    //     } catch (\\Exception $e) {\n-    //         Log::error('Error al guardar folios: ' . $e->getMessage());\n-    //         return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n-    //     }\n-    // }\n-\n-    public function saveFolioPersona3(Request $request)\n-{\n-    \\Log::info('TEMP DIR: ' . sys_get_temp_dir());\n-    \\Log::info('_FILES', $_FILES);\n-    \\Log::info('REQUEST', $request->all());\n-\n-    return response()->json(['message' => 'Revisado en log.'], 200);\n-}\n-    public function saveFolioPersona2(Request $request)\n-    {\n-        /*$fechaEmision = $request->input('fecha_emision');\n-        $fechaCaducidad = $request->input('fecha_caducidad');\n-        $codFolio = $request->input('codFolio');\n-        $codPersonal = $request->input('codPersonal');\n-\n-        $inserted = FileControl::saveFolioPersonal($fechaEmision,$fechaCaducidad,$codFolio,$codPersonal);\n-\n-        if ($inserted) {\n-            return response()->json(['success' => true, 'message' => 'El folio del personal, guardado correctamente']);\n-        } else {\n-            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n-        }*/\n-        \n-        $cant = 0;\n-        if ($request->hasFile('imagenes')) {\n-            foreach ($request->file('imagenes') as $archivo) {\n-                //$nombre = time() . '_' . $archivo->getClientOriginalName();\n-                //$archivo->move(public_path('archivos_folio'), $nombre);\n-                $cant = $cant + 1;\n-            }\n-        }\n-    \n-        return response()->json(\"hay \".$cant.\" archivos\");\n-        \n-    }\n-\n-    //GUARDAR EN PUBLIC\n-    public function saveFolioPersona(Request $request)\n-    {\n-        $request->validate([\n-            'fecha_emision' => 'required|date',\n-            'fecha_caducidad' => 'nullable|date',\n-            'codFolio' => 'required|integer',\n-            'codPersonal' => 'required|string',\n-            'imagenes' => 'required|array',\n-            'imagenes.*' => 'image|max:5120' // máximo 5MB por imagen (ajusta según tu necesidad)\n-        ]);\n-\n-        $fechaEmision = $request->input('fecha_emision');\n-        $fechaCaducidad = $request->input('fecha_caducidad');\n-        $codFolio = $request->input('codFolio');\n-        $codPersonal = $request->input('codPersonal');\n-        $imagenes = $request->file('imagenes');\n-\n-        // Obtiene las rutas de carpeta según el folio\n-        $subCarpetas = FileControl::getRutaFolio($codFolio); // devuelve un array de rutas\n-\n-       \n-        if (count($subCarpetas) !== count($imagenes)) {\n-            return response()->json([\n-                'error' => 'El número de imágenes no coincide con el número de rutas esperadas para el folio.'\n-            ], 400);\n-        }\n-\n-        foreach ($imagenes as $index => $imagen) {\n-            $rutaSubcarpeta = $subCarpetas[$index] ?? null;\n-\n-            if (!$rutaSubcarpeta) {\n-                continue; // O lanza un error si lo prefieres\n-            }\n-\n-            $rutaDestino = public_path('Biblioteca_Grafica/' . $rutaSubcarpeta);\n-\n-            // Crea la carpeta si no existe\n-            if (!file_exists($rutaDestino)) {\n-                mkdir($rutaDestino, 0777, true);\n-            }\n-\n-            // Guarda la imagen con el nombre del codPersonal\n-            $nombreArchivo = $codPersonal . '.' . $imagen->getClientOriginalExtension();\n-\n-            $imagen->move($rutaDestino, $nombreArchivo);\n-        }\n-\n-        // Aquí podrías guardar los datos en la BD si lo necesitas\n-        // ...\n-\n-        return response()->json([\n-            'message' => 'Folio guardado exitosamente.',\n-        ]);\n-        \n-    }\n-\n-\n-    //DE EVER\n-    /*public function saveFolioPersona(Request $request)\n-    {\n-        $validated = $request->validate([\n-            'fecha_emision'     => 'required|date',\n-            'fecha_caducidad'   => 'nullable|date',\n-            'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n-            'codPersonal'       => 'required|string',\n-            'codFolio'          => 'required|string',\n-        ]);\n-\n-        try {\n-            $codPersonal = $validated['codPersonal'];\n-            $codFolio    = $validated['codFolio'];\n-            $archivos    = $request->file('imagenes');\n-            $total       = count($archivos);\n-\n-            // Subcarpeta relativa dentro de public/\n-            $subCarpeta = FileControl::getRutaFolio($codFolio); // ejemplo: \"folios/F123\"\n-            $rutaBase = public_path($subCarpeta);\n-\n-            if (!File::exists($rutaBase)) {\n-                File::makeDirectory($rutaBase, 0777, true);\n-            }\n-\n-            foreach ($archivos as $index => $archivo) {\n-                $nombreArchivo = ($total === 1)\n-                    ? \"{$codPersonal}.jpg\"\n-                    : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n-\n-                $rutaFinal = $rutaBase . '/' . $nombreArchivo;\n-\n-                // Guardar archivo en public/\n-                file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n-            }\n-\n-            // Guardar en BD\n-            FileControl::saveFolioPersonal(\n-                $validated['fecha_emision'],\n-                $validated['fecha_caducidad'],\n-                $codFolio,\n-                $codPersonal\n-            );\n-\n-            return response()->json(['message' => 'Folios guardados correctamente.']);\n-\n-        } catch (\\Exception $e) {\n-            Log::error('Error al guardar folios en public/: ' . $e->getMessage());\n-            return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n-        }\n-    }\n-        */\n-\n-    public function saveFolio(Request $request)\n-    {\n-        $codigo = $request->input('codigo');\n-        $nombre = $request->input('nombre');\n-        $tipo = $request->input('tipo');\n-        $obligatorio = $request->input('obligatorio');\n-        $vencimiento = $request->input('vencimiento');\n-        $tipo_fecha = $request->input('periodo');\n-        $plataforma = $request->input('plataforma');\n-\n-        if (empty($codigo)) {\n-            $inserted = FileControl::saveFolio($nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n-        } else {\n-            $inserted = FileControl::updateFolio($codigo, $nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n-        }\n-\n-        if ($inserted) {\n-            return response()->json(['success' => true, 'message' => 'Folio guardado correctamente']);\n-        } else {\n-            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n-        }\n-\n-        //return response()->json(['message' => 'Folios creados']);\n-    }\n-\n-    public function disabledFolio(Request $request){\n-        $codigo = $request->codigo;\n-        $result = FileControl::disabledFolio($codigo);\n-\n-        if ($result) {\n-            return response()->json(['message' => 'Folio deshabilitado exitosamente'], 200);\n-        } else {\n-            return response()->json(['message' => 'Folio no encontrado o error al deshabilitar'], 404);\n-        }\n-    }\n-\n-    public function saveCargo(Request $request){\n-        $descripcion = $request->input('descripcion');\n-        $nombre = $request->input('nombre');\n-        $cod_tipo = $request->input('tipoCargo');\n-        $abreviatura = $request->input('abreviatura');\n-        $cod_servicio = $request->input('codPosicion');\n-        $cod_subservicio = $request->input('codGrupo');\n-        $cod_area = $request->input('codArea');\n-\n-        $usuario = session('usuario');\n-\n-        $inserted = FileControl::saveCargo($descripcion, $nombre, $abreviatura, $cod_servicio, $cod_subservicio, $cod_tipo, $cod_area, $usuario);\n-\n-        return response()->json(['message' => 'Cargo creado']);\n-    }\n-\n-    public function dashboard()\n-    {\n-        return view('file_control.dashboard');\n-    }\n-\n-    //-----------------\n-\n-    public function getFoliosXLegajo($codCliente, $codCargo){\n-        $folios = FileControl::getFoliosXLegajo($codCliente, $codCargo);\n-        return response()->json($folios);\n-    }\n-\n-    public function getAreas(){\n-        $areas = FileControl::getAreas();\n-        return response()->json($areas);\n-    }\n-\n-    public function getPosicion(){\n-        $data = FileControl::getPosicion();\n-        return response()->json($data);\n-    }\n-\n-    public function getGrupo(){\n-        $data = FileControl::getGrupo();\n-        return response()->json($data);\n-    }\n-\n-    public function getGrupoId($codigo){\n-        //$codigo = $request->input('codigo');\n-        $data = FileControl::getGrupoId($codigo);\n-        return response()->json($data);\n-    }\n-\n-    public function saveLegajo(Request $request){\n-        $folios = $request->input('folios');\n-        $codCliente = $request->input('codCliente');\n-        $codCargo = $request->input('codCargo');\n-        $codLegajo = $request->input('codLegajo');\n-        $nombre  = $request->input('nombre');\n-\n-        $usuario = session('usuario');\n-\n-        if($codLegajo != '0'){//MODIFICAR LEGAJO\n-            $codigos = FileControl::QuitarTodosLegajos($codLegajo, $usuario);\n-\n-            for ($i = 0; $i < count($codigos); $i++) {\n-                if (!in_array($codigos[$i], $folios)) {\n-                    FileControl::actualizarNotificacionDes($codigos[$i], $codCliente, $codCargo);\n-                }\n-            }\n-\n-            for($i = 0; $i < count($folios); $i++){\n-                $folio = $folios[$i];\n-                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $codLegajo);\n-                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n-\n-                if(empty($validar)){\n-                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n-                }else{\n-                    FileControl::updateLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n-                }\n-            }\n-        }else{//CREAR NUEVO LEGAJO\n-            $legajo = FileControl::saveLegajoMain($nombre);\n-\n-            for($i = 0; $i < count($folios); $i++){\n-                $folio = $folios[$i];\n-                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $legajo);\n-                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n-                if(empty($validar)){\n-                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $legajo, $usuario);\n-                }\n-\n-            }\n-        }\n-    }\n-\n-    /* GESTION DE CARGOS */\n-    public function insertarCargo(Request $request)\n-    {\n-        $tipo = $request->input('tipoCargo');\n-        $codArea = $request->input('codArea');\n-        $nombre = $request->input('nombre');\n-        $descripcion = $request->input('descripcion');\n-        $abreviatura = $request->input('abreviatura');\n-        $codPosicion = $request->input('codPosicion');\n-        $codGrupo = $request->input('codGrupo');\n-\n-        $data = [\n-            $tipo,\n-            $codArea,\n-            $nombre,\n-            $descripcion,\n-            $abreviatura,\n-            $codPosicion,\n-            $codGrupo,\n-            'SISTEMA'\n-        ];\n-\n-        $inserted = FileControl::insertarCargo($data);\n-\n-        return response()->json(['message' => 'Cargo creado']);\n-    }\n-    public function updateCargo(Request $request)\n-    {\n-        $tipo = $request->input('tipoCargo');\n-        $codArea = $request->input('codArea');\n-        $nombre = $request->input('nombre');\n-        $descripcion = $request->input('descripcion');\n-        $abreviatura = $request->input('abreviatura');\n-        $codPosicion = $request->input('codPosicion');\n-        $codGrupo = $request->input('codGrupo');\n-        $codigo = $request->input('codigo');\n-\n-        $data = [\n-            $codigo,\n-            $tipo,\n-            $codArea,\n-            $nombre,\n-            $descripcion,\n-            $abreviatura,\n-            $codPosicion,\n-            $codGrupo,\n-            'SISTEMA'\n-        ];\n-\n-        $inserted = FileControl::updateCargo($data);\n-\n-\n-        if ($inserted) {\n-            return response()->json(['success' => true, 'message' => 'Cargo modificado correctamente']);\n-        } else {\n-            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n-        }\n-\n-        //return response()->json(['message' => 'Folios creados']);\n-    }\n-\n-\n-    public function getCargosXCodigo($codigo){\n-        $data = FileControl::getCargosXCodigo($codigo);\n-        return response()->json($data);\n-    }\n-\n-\n-    public function eliminarCargo(Request $request){\n-        $codigo = $request->input('codigo');\n-        $data = 0;\n-        $inserted = FileControl::activarCargo($codigo, $data);\n-        return response()->json(['message' => 'Cargo modificdo']);\n-    }\n-\n-    public function activarCargo(Request $request){\n-        $codigo = $request->input('codigo');\n-        $data = 1;\n-        $inserted = FileControl::activarCargo($codigo, $data);\n-        return response()->json(['message' => 'Cargo modificdo']);\n-    }\n-\n-    public function ViewLegajo_comercial(){\n-\n-        return view('file_control.legajos_comercial');\n-    }\n-\n-    public function saveSolicitud(Request $request){\n-        $codigo = $request->input('codigo');\n-        $tiene = $request->input('tiene');\n-        $cargo = $request->input('cargo');\n-        $cliente = $request->input('cliente');\n-\n-        $usuario = session('usuario');\n-\n-        FileControl::saveSolicitud($codigo, $tiene, $cargo, $cliente, $usuario);\n-        return response()->json(['message' => 'Solicitud creado']);\n-    }\n-\n-}\n"
                },
                {
                    "date": 1753340311933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1092 @@\n+<?php\n+\n+namespace App\\Http\\Controllers;\n+\n+use App\\Helpers\\PdfHelper;\n+use App\\Helpers\\ImagenHelper;\n+use Barryvdh\\Snappy\\Facades\\SnappyPdf;\n+use Illuminate\\Http\\Request;\n+use App\\Models\\FileControl;\n+use Illuminate\\Support\\Facades\\App;\n+use Illuminate\\Support\\Facades\\Log;\n+use Illuminate\\Support\\Facades\\Http;\n+use Illuminate\\Support\\Str;\n+use Illuminate\\Support\\Facades\\File;\n+use Illuminate\\Support\\Facades\\Storage;\n+use ZipArchive;\n+\n+class FileController extends Controller{\n+    public function index(){\n+        $personal = FileControl::getPersonal();\n+        //$cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientesLegajos();\n+        $sucursales = FileControl::getSucursales();\n+\n+        return view('file_control.chargefile', compact('personal', 'clientes', 'sucursales'));\n+    }\n+\n+    public function getCargosXCliente(Request $request){\n+        $cliente = $request->input('cliente');\n+        $cargos = FileControl::getCargosXCliente($cliente);\n+        return response()->json($cargos);\n+    }\n+\n+    public function ViewDashboard(){\n+        /*$personal = FileControl::getPersonal();\n+        $cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientes();\n+        $sucursales = FileControl::getSucursales();*/\n+\n+        return view('file_control.dashboard'/*, compact('personal', 'cargos', 'clientes', 'sucursales')*/);\n+    }\n+\n+    public function getPersonal(Request $request){\n+        $personal = FileControl::getPersonal();\n+        return response()->json($personal);\n+    }\n+\n+    public function getDocumentosXPersonal($codPersonal){\n+        $docs_personal = FileControl::getDocsXPersona($codPersonal);\n+        return response()->json($docs_personal);\n+    }\n+\n+    public function getFoliosXPersonas(Request $request){\n+        $personas = $request->personas;\n+        $folios = $request->folios;\n+        $resultados = [];\n+        //Averiguando la sucursal de la persona\n+\n+\n+        foreach ($personas as $persona) {\n+            $sucursal = FileControl::getSucursalXPersona($persona['CODI_PERS']);\n+            foreach ($folios as $folio) {\n+                $datosFolioPersona = FileControl::getFoliosInfoPersona($persona['CODI_PERS'], $folio['codigo']);\n+                foreach ($datosFolioPersona as $dato) {\n+                    $resultados[] = [\n+                        //'persona' => $persona['personal'],\n+                        'persona' => $dato->personal ?? null,\n+                        'nroDoc' => $dato->nroDoc ?? null,\n+                        'codPersonal' => $persona['CODI_PERS'],\n+                        'folio' => $folio['nombre'],\n+                        'sucursal' => $sucursal,\n+                        'ruta' => $dato->ruta_archivo ?? null,\n+                        'ancho' => $dato->ancho ?? null,\n+                        'hojas' => $dato->cantidad_hojas ?? null,\n+                        'documento' => $dato->documento ?? null,\n+                        'cargo' => $dato->cargo ?? null,\n+                        'es_formato' => $dato->es_formato ?? null,\n+                    ];\n+                }\n+                /*$resultados[] = [\n+                    'persona' => $persona['personal'],\n+                    'folio' => $folio['nombre'],\n+                    'ruta' => $datosFolioPersona[0]->ruta_archivo ?? null,\n+                ];*/\n+            }\n+        }\n+        return response()->json($resultados);\n+    }\n+\n+    public function getFoliosXPersona_uno(Request $request){\n+        $persona = $request->input('codPersona');\n+        $folios = $request->folios;\n+        $resultados = [];\n+\n+        $sucursal = FileControl::getSucursalXPersona($persona);\n+\n+        foreach ($folios as $folio) {\n+            $datosFolioPersona = FileControl::getFoliosInfoPersona($persona, $folio['codigo']);\n+            foreach ($datosFolioPersona as $dato) {\n+                $resultados[] = [\n+                    'persona' => $dato->personal ?? null,\n+                    'nroDoc' => $dato->nroDoc ?? null,\n+                    'codPersonal' => $persona,\n+                    'folio' => $folio['nombre'],\n+                    'sucursal' => $sucursal,\n+                    'ruta' => $dato->ruta_archivo ?? null,\n+                    'ancho' => $dato->ancho ?? null,\n+                    'hojas' => $dato->cantidad_hojas ?? null,\n+                    'documento' => $dato->documento ?? null,\n+                    'cargo' => $dato->cargo ?? null,\n+                    'es_formato' => $dato->es_formato ?? null,\n+                ];\n+            }\n+        }\n+\n+        return response()->json($resultados);\n+    }\n+\n+    // public function generarPDFsPorPersona(Request $request){\n+    //     $resultados = $request->input('resultados');\n+\n+    //     // Agrupar todos los datos por persona\n+    //     $agrupados = [];\n+    //     foreach ($resultados as $item) {\n+    //         $cod = $item['codPersonal'];\n+    //         $agrupados[$cod][] = $item;\n+    //     }\n+\n+    //     $carpetaTemporal = storage_path('app/temp_pdfs');\n+    //     if (!File::exists($carpetaTemporal)) {\n+    //         File::makeDirectory($carpetaTemporal, 0777, true, true);\n+    //     }\n+\n+    //     $pdfsGenerados = [];\n+\n+    //     foreach ($agrupados as $codPersonal => $documentosPersona) {\n+    //         $persona = $documentosPersona[0]['persona'] ?? 'persona_sin_nombre';\n+\n+    //         // Carátula: datos únicos de persona\n+    //         $caratula = [\n+    //             'persona' => $persona,\n+    //             'codPersonal' => $codPersonal,\n+    //             'sucursal' => $documentosPersona[0]['sucursal'] ?? '',\n+    //             'cargo' => $documentosPersona[0]['cargo'] ?? '',\n+    //         ];\n+\n+    //         // Separar documentos: escaneados vs formatos Blade\n+    //         $urls = [];\n+    //         $itemsFinales = [];\n+\n+    //         foreach ($documentosPersona as $doc) {\n+    //             if (!empty($doc['ruta'])) {\n+    //                 $urls[] = [\n+    //                     'ruta' => $doc['ruta'],\n+    //                     'codPersonal' => $codPersonal,\n+    //                     'ancho' => $doc['ancho'],\n+    //                     'hojas' => $doc['hojas'],\n+    //                     'documento' => $doc['documento'],\n+    //                     'es_formato' => $doc['es_formato'],\n+    //                 ];\n+    //             }\n+\n+    //             if ($doc['es_formato'] == 1) {\n+    //                 $itemsFinales[] = [\n+    //                     'es_formato' => 1,\n+    //                     'codPersonal' => $codPersonal,\n+    //                     'documento' => $doc['documento'],\n+    //                     'nombre_vista' => $this->obtenerNombreVista($doc),\n+    //                     'datos' => $doc,\n+    //                     'firma' => public_path('temp_legajos') . '/FIRMAS/PERSONAL/' . $codPersonal . '.jpg',\n+    //                     'huella' => public_path('temp_legajos') . '/HUELLAS_DIGITALES/PERSONAL/' . $codPersonal . '.jpg',\n+    //                 ];\n+\n+    //                 // Descargar imágenes del formato (firma y huella)\n+    //                 ImagenHelper::descargarImagenesFormato($codPersonal);\n+    //             }\n+    //         }\n+\n+    //         // Descargar imágenes escaneadas\n+    //         $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n+\n+    //         foreach ($rutasLocales as $img) {\n+    //             $itemsFinales[] = [\n+    //                 'es_formato' => 0,\n+    //                 'codPersonal' => $codPersonal,\n+    //                 'ruta' => $img['ruta'],\n+    //                 'documento' => $img['documento'],\n+    //                 'hojas' => $img['hojas'],\n+    //                 'ancho' => $img['ancho'],\n+    //             ];\n+    //         }\n+\n+    //         // Render PDF de esta persona\n+    //         $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n+    //             'personas' => [$caratula], // vista espera array\n+    //             'resultados' => $documentosPersona,\n+    //             'imagenes' => $rutasLocales,\n+    //             'items' => $itemsFinales,\n+    //         ])->setOption('enable-local-file-access', true);\n+\n+    //         $nombreArchivo = 'PDF_' . Str::slug($persona) . '_' . $codPersonal . '.pdf';\n+    //         $rutaArchivo = $carpetaTemporal . '/' . $nombreArchivo;\n+\n+    //         $pdf->save($rutaArchivo);\n+    //         $pdfsGenerados[] = $rutaArchivo;\n+    //     }\n+\n+    //     // Comprimir todo en ZIP\n+    //     $zipPath = storage_path('app/documentos_por_persona.zip');\n+    //     $zip = new \\ZipArchive();\n+\n+    //     if ($zip->open($zipPath, \\ZipArchive::CREATE | \\ZipArchive::OVERWRITE) === true) {\n+    //         foreach ($pdfsGenerados as $archivo) {\n+    //             $zip->addFile($archivo, basename($archivo));\n+    //         }\n+    //         $zip->close();\n+    //     }\n+\n+    //     return response()->download($zipPath)->deleteFileAfterSend(true);\n+    // }\n+\n+    public function generarPDF_env(Request $request){\n+        echo \"Hola\";\n+    }\n+\n+    public function pdf_vacio()\n+    {\n+        // Aquí cargas una vista muy simple (puedes crear un blade vacío o con texto simple)\n+        $pdf = SnappyPdf::loadView('file_control.pdf.reporte_vacio');\n+\n+        // Lo envías para que se descargue (o inline si quieres verlo en navegador)\n+        return $pdf->inline('reporte_vacio.pdf');\n+    }\n+\n+\n+    public function generarPDF(Request $request){\n+        $resultados = $request->input('resultados');\n+        //dd($resultados);\n+        //exit;\n+        //Agrupar los datos para mostrar en la carátula\n+        $unicos = [];\n+\n+        $nombreNuevo = 'Reporte';\n+\n+        foreach ($resultados as $item) {\n+            $clave = $item['persona'] . '|' . $item['sucursal'] . '|' . $item['codPersonal'] . '|' . $item['cargo'];\n+            if(!isset($unicos[$clave])) {\n+                $unicos[$clave] = [\n+                    'persona' => $item['persona'],\n+                    'codPersonal' => $item['codPersonal'],\n+                    'sucursal' => $item['sucursal'],\n+                    'cargo' => $item['cargo'],\n+                ];\n+\n+\n+            }\n+\n+             $nombreNuevo = $item['codPersonal'].'_'.$item['persona'] . '_' . date('Ymd_Hi');\n+        }\n+\n+        $personasUnicas = array_values($unicos);\n+\n+        //Para los FORMATOS\n+        // $formatosBlade = [\n+        //     'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n+        //     'DECLARACION JURADA ' => 'file_control.pdf.declaracion_jurada',\n+        // ];\n+\n+        $urls = [];\n+\n+        foreach ($resultados as $resultado) {\n+            if (!empty($resultado['ruta']) && !empty($resultado['codPersonal'])) {\n+                $urls[] = [\n+                    'ruta' => $resultado['ruta'],\n+                    'codPersonal' => $resultado['codPersonal'],\n+                    'ancho' => $resultado['ancho'],\n+                    'hojas' => $resultado['hojas'],\n+                    'documento' => $resultado['documento'],\n+                    'es_formato' => $resultado['es_formato'],\n+                ];\n+            }\n+        };\n+\n+        $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n+\n+        $itemsFinales = [];\n+        //Los que tienen imagen en ruta\n+        foreach ($rutasLocales as $item) {\n+            $itemsFinales[] = [\n+                'es_formato' => $item['es_formato'],\n+                'codPersonal' => $item['codPersonal'],\n+                'ruta' => $item['ruta'],\n+                'documento' => $item['documento'],\n+                'hojas' => $item['hojas'],\n+                'ancho' => $item['ancho'],\n+            ];\n+        }\n+\n+        // Los que deben renderizar una vista Blade porque son formatos (es_formato == 1)\n+        foreach ($resultados as $resultado) {\n+            if ($resultado['es_formato'] == 1) {\n+                $itemsFinales[] = [\n+                    'es_formato' => $resultado['es_formato'],\n+                    'codPersonal' => $resultado['codPersonal'],\n+                    'documento' => $resultado['documento'],\n+                    'nombre_vista' => $this->obtenerNombreVista($resultado), // Función que defines\n+                    'datos' => $resultado,\n+                    'firma' => public_path('temp_legajos').'/FIRMAS/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n+                    'huella' => public_path('temp_legajos').'/HUELLAS_DIGITALES/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n+                ];\n+                //Hacer la copia local de la FIRMA y HUELLA DIGITAL\n+                $rutasLocalesFormato = ImagenHelper::descargarImagenesFormato($resultado['codPersonal']);\n+            }\n+        }\n+\n+        //print_r($itemsFinales);\n+        $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n+            'personas' => $personasUnicas,\n+            'resultados' => $resultados,\n+            'imagenes' => $rutasLocales,\n+            'items' => $itemsFinales,\n+        ])->setOption('enable-local-file-access', true);\n+\n+        return response()->streamDownload(function () use ($pdf) {\n+            echo $pdf->output();\n+        }, $nombreNuevo . '.pdf', [\n+            'Content-Type' => 'application/pdf',\n+            'X-Nombre-Archivo' => $nombreNuevo . '.pdf', // <- aquí\n+        ]);\n+    }\n+\n+    public function obtenerNombreVista($resultado) {\n+        $mapa = [\n+            'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n+            'DECLARACION JURADA DE CUMPLIMIENTO DE DISPOSICIONES' => 'file_control.pdf.declaracion_jurada',\n+            'EVALUACION DEL POSTULANTE' => 'file_control.pdf.evaluacion_postulante',\n+            'COMPROMISO DE CONFIABILIDAD' => 'file_control.pdf.compromiso_confidencialidad',\n+            'CUMPLIMIENTO DE cumpliDISPOSICION' => 'file_control.pdf.dj_complumiento_disposicion',\n+            'ESTUDIO DE SEGURIDAD DE TRABAJADORES' => 'file_control.pdf.dj_complumiento_disposicion',\n+            'VISITA DOMICILIARIA' => 'file_control.pdf.visita_domiciliaria_concluciones'\n+        ];\n+\n+        return $mapa[$resultado['documento']] ?? null;\n+    }\n+\n+    public function generarReporteConsulta(Request $request){\n+        $codigo =  $request->input('valor');\n+        $data = FileControl::getReporteFiltro($codigo);\n+        return response()->json($data);\n+    }\n+\n+\n+    public function generarPDF2(Request $request) {\n+        $resultados = $request->input('resultados');\n+        $html = '';\n+\n+        $vistas = [\n+            'file_control.pdf.evaluacion-postulante',\n+            'file_control.pdf.declaracion-jurada',\n+            'file_control.pdf.acta_compromiso',\n+            'file_control.pdf.compromiso_confidencialidad',\n+            'file_control.pdf.dj_cumplimiento_disposicion',\n+            'file_control.pdf.estudio_seguridad_empleado',\n+            'file_control.pdf.estudio_seguridad_empleado_2',\n+            'file_control.pdf.visita_domiciliaria',\n+            'file_control.pdf.visita_domiciliaria_concluciones',\n+        ];\n+\n+        foreach ($vistas as $vista) {\n+\n+            $html .= view($vista, [\n+                'resultados' => $resultados\n+            ])->render();\n+\n+            $html .= '<div style=\"page-break-after: always;\"></div>';\n+        }\n+\n+        $pdf = SnappyPdf::loadHTML($html)->setOption('enable-local-file-access', true);\n+\n+        return response($pdf->inline('reporte_completo.pdf'))->header('Content-Type', 'application/pdf');\n+    }\n+\n+    public function getAllCargo()\n+    {\n+        $data = FileControl::getAllCargo();\n+        return response()->json($data);\n+    }\n+\n+    public function getClientes(){\n+        $data = FileControl::getClientes();\n+        return response()->json($data);\n+    }\n+\n+    public function getClientesLegajos(){\n+        $data = FileControl::getClientesLegajos();\n+        return response()->json($data);\n+    }\n+\n+    public function getLegajos(Request $request)\n+    {\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+        $codPersonal = $request->input('codigo');\n+\n+        $legajos = FileControl::getLegajos($cliente, $cargo, $codPersonal);\n+        return response()->json($legajos);\n+    }\n+\n+    public function getFoliosClienteCargo(Request $request){\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+\n+        $legajos = FileControl::getFoliosClienteCargo($cliente, $cargo);\n+        return response()->json($legajos);\n+    }\n+\n+    public function getFoliosXLegajo_comercial($codCliente, $codCargo){\n+        $folios = FileControl::getFoliosXLegajo_comercial($codCliente, $codCargo);\n+        return response()->json($folios);\n+    }\n+\n+    public function getCargos(){\n+        $cargos = FileControl::getCargos();\n+        return response()->json($cargos);\n+    }\n+\n+    public function getFolios(){\n+        $folios = FileControl::getFolios();\n+        return response()->json($folios);\n+    }\n+\n+    public function ViewCargo()\n+    {\n+        $todos = \\DB::table('sw_cargos')\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $operativo = \\DB::table('sw_cargos')\n+                    ->where('cod_tipo', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $administrativo = \\DB::table('sw_cargos')\n+                    ->where('cod_tipo', 2)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        return view('file_control.cargo',compact('todos', 'operativo', 'administrativo'));\n+    }\n+\n+    public function ViewLegajo()\n+    {\n+         $notif = FileControl::listarNotificaciones();\n+        return view('file_control.legajos', [\n+            'notify' => $notif\n+        ]);\n+    }\n+\n+    public function ViewFolios()\n+    {\n+        $periodos = FileControl::getPeriodos();\n+        $todos = \\DB::table('sw_folios')\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $principal = \\DB::table('sw_folios')\n+                    ->where('obligatorio', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $adicional = \\DB::table('sw_folios')\n+                    ->where('obligatorio', 0)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $documento = \\DB::table('sw_folios')\n+                    ->where('tipo', 1)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $formato = \\DB::table('sw_folios')\n+                    ->where('tipo', 2)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+        $certificado = \\DB::table('sw_folios')\n+                    ->where('tipo', 3)\n+                    ->where('habilitado', 1)\n+                    ->count();\n+\n+        return view('file_control.folios', compact('periodos', 'todos', 'principal', 'adicional', 'documento', 'formato', 'certificado'));\n+    }\n+\n+    public function ViewBusquedaLegajo()\n+    {\n+        $personal = FileControl::getPersonalLegajos();\n+        $cargos = FileControl::getCargos();\n+        //$clientes = FileControl::getClientes();\n+        $clientes = FileControl::getClientesLegajos();\n+\n+        return view('file_control.search_legajos', compact('personal', 'cargos', 'clientes'));\n+    }\n+\n+    public function ViewLegajoPdf()\n+    {\n+        $sucursales = FileControl::getSucursales();\n+        $cargos = FileControl::getCargos();\n+        $clientes = FileControl::getClientes();\n+        return view('file_control.legajos_pdf', compact('sucursales','cargos','clientes'));\n+    }\n+\n+    public function getPersonalLegajos(Request $request)\n+    {\n+        $personal = FileControl::getPersonalLegajos();\n+        return response()->json($personal);\n+    }\n+\n+    public function getCoincidencias(Request $request)\n+    {\n+        $cliente = $request->input('cliente');\n+        $cargo = $request->input('cargo');\n+\n+        $legajos = FileControl::getCoincidencias($cliente, $cargo);\n+        return response()->json($legajos);\n+    }\n+\n+    //GUARDAR DATOS\n+    public function saveFolioPersona(Request $request){\n+        //dd($request->file('imagenes'));\n+\n+\n+        // Validar los datos del formulario\n+        $validated = $request->validate([\n+            'fecha_emision' => 'required|date',\n+            'fecha_caducidad' => 'nullable|date',\n+            //'file' => 'nullable|file|mimes:pdf,jpg,jpeg,png|max:1024',\n+        ]);\n+\n+        // Para guardar el archivo con la codificación del personal\n+\n+        $codPersonal = $request->input('codPersonal');\n+        $total = count($request->file('imagenes'));\n+        foreach ($request->file('imagenes') as $index => $archivo) {\n+            //$nombre = 'folio_'.$id.'_'.$index.'.jpg';\n+            //Condición si es 1 archivo o varios, para asignar el nombre al archivo\n+            if($total == 1){\n+                $nameFile = $codPersonal.'.jpg';\n+            }else{\n+                $nameFile = $codPersonal.'_'.($index+1).'.jpg';\n+            }\n+\n+            // Averiguar el nombre de la carpeta o ruta donde debe de guardarse el archivo\n+            $rutaArchivo = FileControl::getRutaFolio($request->input('codFolio'));\n+\n+            //$filePath = null;\n+            // Llamar al microservicio para guardar el archivo en el servidor local\n+            //$filePath = 'http://190.116.178.163/Biblioteca_Grafica/'.$rutaArchivo.'/'.$nameFile;\n+            /*\n+            $response = Http::withToken('457862h45hj7u5126h58d2s51s2s')\n+            ->attach(\n+                'archivo',\n+                file_get_contents($archivo->getPathname()), // ✅ CORRECTO\n+                $archivo->getClientOriginalName()\n+            )\n+            ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n+                'nameFile' => $nameFile,\n+                'ruta' => $rutaArchivo\n+            ]);*/\n+\n+            if ($response->failed()) {\n+                return response()->json(['error' => 'No se pudo guardar el archivo en el servidor local'], 500);\n+            }\n+\n+            $archivo->storeAs('uploads/folios', $nameFile);\n+        }\n+\n+\n+\n+        // Llamar al método saveFolioPersonal pasando los datos y el archivo\n+        $inserted = FileControl::saveFolioPersonal(\n+            $validated['fecha_emision'],\n+            $validated['fecha_caducidad'],\n+            $request->codFolio,\n+            $request->codPersonal,\n+            //$filePath // Pasamos la ruta del archivo\n+        );\n+\n+        return response()->json(['message' => 'Folios del persona guardados']);\n+\n+    }\n+\n+\n+     public function getViewDocumentsPer($codPersonal, $codFolio)\n+    {\n+        $result = FileControl::getViewPerDocs($codPersonal, $codFolio);\n+\n+        if (empty($result)) {\n+            return response()->json(['success' => false, 'message' => 'No se encontraron rutas'], 404);\n+        }\n+\n+        $extensiones = ['jpg', 'jpeg', 'png', 'pdf'];\n+        $rutasValidas = [];\n+\n+        foreach ($result as $item) {\n+            $rutaEncontrada = false;\n+\n+            // Probar primero con ruta_aux\n+            if (isset($item->ruta_aux)) {\n+                $rutaBase = str_replace('//', 'http://', $item->ruta_aux);\n+\n+                foreach ($extensiones as $ext) {\n+                    $rutaConExt = $rutaBase . '.' . $ext;\n+\n+                    if (self::urlExiste($rutaConExt)) {\n+                        $rutasValidas[] = $rutaConExt;\n+                        $rutaEncontrada = true;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            // Si no se encontró nada en ruta_aux, probar con ruta\n+            if (!$rutaEncontrada && isset($item->ruta)) {\n+                $rutaBase = str_replace('//', 'http://', $item->ruta);\n+\n+                foreach ($extensiones as $ext) {\n+                    $rutaConExt = $rutaBase . '.' . $ext;\n+\n+                    if (self::urlExiste($rutaConExt)) {\n+                        $rutasValidas[] = $rutaConExt;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (empty($rutasValidas)) {\n+            return response()->json([\n+                'success' => false,\n+                'message' => 'No se encontraron archivos accesibles desde la red'\n+            ]);\n+        }\n+\n+        return response()->json([\n+            'success' => true,\n+            'rutas' => $rutasValidas\n+        ]);\n+    }\n+\n+    // Función para validar si la URL existe\n+    private static function urlExiste($url)\n+    {\n+        $ch = curl_init($url);\n+        curl_setopt($ch, CURLOPT_NOBODY, true);\n+        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n+        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n+        curl_exec($ch);\n+        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n+        curl_close($ch);\n+\n+        return $statusCode === 200;\n+    }\n+\n+\n+\n+    // public function saveFolioPersona(Request $request)\n+    // {\n+    //     $validated = $request->validate([\n+    //         'fecha_emision'     => 'required|date',\n+    //         'fecha_caducidad'   => 'nullable|date',\n+    //         'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n+    //         'codPersonal'       => 'required|string',\n+    //         'codFolio'          => 'required|string',\n+    //     ]);\n+\n+    //     try {\n+    //         $codPersonal = $validated['codPersonal'];\n+    //         $codFolio    = $validated['codFolio'];\n+    //         $archivos    = $request->file('imagenes');\n+    //         $total       = count($archivos);\n+\n+    //         // Obtener ruta lógica relativa\n+    //         $subCarpeta = FileControl::getRutaFolio($codFolio); // Ejemplo: \"FOLIOS/2025/F123\"\n+\n+    //         foreach ($archivos as $index => $archivo) {\n+    //             $nombreArchivo = ($total === 1)\n+    //                 ? \"{$codPersonal}.jpg\"\n+    //                 : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n+\n+    //             $rutaRelativa = $subCarpeta . '/' . $nombreArchivo;\n+\n+    //             if (App::environment('local')) {\n+    //                 // Guardado directo en ruta de red en entorno local\n+    //                 $rutaFinal = \"\\\\\\\\192.168.10.5:86\\\\sisolmar\\\\DATA_SISOLMAR\\\\\" . $subCarpeta . \"\\\\\" . $nombreArchivo;\n+\n+    //                 if (!file_exists(dirname($rutaFinal))) {\n+    //                     mkdir(dirname($rutaFinal), 0777, true);\n+    //                 }\n+\n+    //                 file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n+    //             }\n+\n+    //             if (App::environment('production')) {\n+    //                 // Guardado en D:\\ mediante Storage\n+    //                 Storage::disk('disk_d')->put($rutaRelativa, file_get_contents($archivo->getRealPath()));\n+    //             }\n+    //         }\n+\n+    //         // Lógica adicional de BD\n+    //         FileControl::saveFolioPersonal(\n+    //             $validated['fecha_emision'],\n+    //             $validated['fecha_caducidad'],\n+    //             $codFolio,\n+    //             $codPersonal\n+    //         );\n+\n+    //         return response()->json(['message' => 'Folios del personal guardados correctamente.']);\n+\n+    //     } catch (\\Exception $e) {\n+    //         Log::error('Error al guardar folios: ' . $e->getMessage());\n+    //         return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n+    //     }\n+    // }\n+\n+    public function saveFolioPersona3(Request $request)\n+{\n+    \\Log::info('TEMP DIR: ' . sys_get_temp_dir());\n+    \\Log::info('_FILES', $_FILES);\n+    \\Log::info('REQUEST', $request->all());\n+\n+    return response()->json(['message' => 'Revisado en log.'], 200);\n+}\n+    public function saveFolioPersona2(Request $request)\n+    {\n+        /*$fechaEmision = $request->input('fecha_emision');\n+        $fechaCaducidad = $request->input('fecha_caducidad');\n+        $codFolio = $request->input('codFolio');\n+        $codPersonal = $request->input('codPersonal');\n+\n+        $inserted = FileControl::saveFolioPersonal($fechaEmision,$fechaCaducidad,$codFolio,$codPersonal);\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'El folio del personal, guardado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }*/\n+        \n+        $cant = 0;\n+        if ($request->hasFile('imagenes')) {\n+            foreach ($request->file('imagenes') as $archivo) {\n+                //$nombre = time() . '_' . $archivo->getClientOriginalName();\n+                //$archivo->move(public_path('archivos_folio'), $nombre);\n+                $cant = $cant + 1;\n+            }\n+        }\n+    \n+        return response()->json(\"hay \".$cant.\" archivos\");\n+        \n+    }\n+\n+    //GUARDAR EN PUBLIC\n+    public function saveFolioPersona0(Request $request)\n+    {\n+        $request->validate([\n+            'fecha_emision' => 'required|date',\n+            'fecha_caducidad' => 'nullable|date',\n+            'codFolio' => 'required|integer',\n+            'codPersonal' => 'required|string',\n+            'imagenes' => 'required|array',\n+            'imagenes.*' => 'image|max:5120' // máximo 5MB por imagen (ajusta según tu necesidad)\n+        ]);\n+\n+        $fechaEmision = $request->input('fecha_emision');\n+        $fechaCaducidad = $request->input('fecha_caducidad');\n+        $codFolio = $request->input('codFolio');\n+        $codPersonal = $request->input('codPersonal');\n+        $imagenes = $request->file('imagenes');\n+\n+        // Obtiene las rutas de carpeta según el folio\n+        $subCarpetas = FileControl::getRutaFolio($codFolio); // devuelve un array de rutas\n+\n+       \n+        if (count($subCarpetas) !== count($imagenes)) {\n+            return response()->json([\n+                'error' => 'El número de imágenes no coincide con el número de rutas esperadas para el folio.'\n+            ], 400);\n+        }\n+\n+        foreach ($imagenes as $index => $imagen) {\n+            $rutaSubcarpeta = $subCarpetas[$index] ?? null;\n+\n+            if (!$rutaSubcarpeta) {\n+                continue; // O lanza un error si lo prefieres\n+            }\n+\n+            $rutaDestino = public_path('Biblioteca_Grafica/' . $rutaSubcarpeta);\n+\n+            // Crea la carpeta si no existe\n+            if (!file_exists($rutaDestino)) {\n+                mkdir($rutaDestino, 0777, true);\n+            }\n+\n+            // Guarda la imagen con el nombre del codPersonal\n+            $nombreArchivo = $codPersonal . '.' . $imagen->getClientOriginalExtension();\n+\n+            $imagen->move($rutaDestino, $nombreArchivo);\n+        }\n+\n+        // Aquí podrías guardar los datos en la BD si lo necesitas\n+        // ...\n+\n+        return response()->json([\n+            'message' => 'Folio guardado exitosamente.',\n+        ]);\n+        \n+    }\n+\n+\n+    //DE EVER\n+    /*public function saveFolioPersona(Request $request)\n+    {\n+        $validated = $request->validate([\n+            'fecha_emision'     => 'required|date',\n+            'fecha_caducidad'   => 'nullable|date',\n+            'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n+            'codPersonal'       => 'required|string',\n+            'codFolio'          => 'required|string',\n+        ]);\n+\n+        try {\n+            $codPersonal = $validated['codPersonal'];\n+            $codFolio    = $validated['codFolio'];\n+            $archivos    = $request->file('imagenes');\n+            $total       = count($archivos);\n+\n+            // Subcarpeta relativa dentro de public/\n+            $subCarpeta = FileControl::getRutaFolio($codFolio); // ejemplo: \"folios/F123\"\n+            $rutaBase = public_path($subCarpeta);\n+\n+            if (!File::exists($rutaBase)) {\n+                File::makeDirectory($rutaBase, 0777, true);\n+            }\n+\n+            foreach ($archivos as $index => $archivo) {\n+                $nombreArchivo = ($total === 1)\n+                    ? \"{$codPersonal}.jpg\"\n+                    : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n+\n+                $rutaFinal = $rutaBase . '/' . $nombreArchivo;\n+\n+                // Guardar archivo en public/\n+                file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n+            }\n+\n+            // Guardar en BD\n+            FileControl::saveFolioPersonal(\n+                $validated['fecha_emision'],\n+                $validated['fecha_caducidad'],\n+                $codFolio,\n+                $codPersonal\n+            );\n+\n+            return response()->json(['message' => 'Folios guardados correctamente.']);\n+\n+        } catch (\\Exception $e) {\n+            Log::error('Error al guardar folios en public/: ' . $e->getMessage());\n+            return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n+        }\n+    }\n+        */\n+\n+    public function saveFolio(Request $request)\n+    {\n+        $codigo = $request->input('codigo');\n+        $nombre = $request->input('nombre');\n+        $tipo = $request->input('tipo');\n+        $obligatorio = $request->input('obligatorio');\n+        $vencimiento = $request->input('vencimiento');\n+        $tipo_fecha = $request->input('periodo');\n+        $plataforma = $request->input('plataforma');\n+\n+        if (empty($codigo)) {\n+            $inserted = FileControl::saveFolio($nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n+        } else {\n+            $inserted = FileControl::updateFolio($codigo, $nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n+        }\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'Folio guardado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }\n+\n+        //return response()->json(['message' => 'Folios creados']);\n+    }\n+\n+    public function disabledFolio(Request $request){\n+        $codigo = $request->codigo;\n+        $result = FileControl::disabledFolio($codigo);\n+\n+        if ($result) {\n+            return response()->json(['message' => 'Folio deshabilitado exitosamente'], 200);\n+        } else {\n+            return response()->json(['message' => 'Folio no encontrado o error al deshabilitar'], 404);\n+        }\n+    }\n+\n+    public function saveCargo(Request $request){\n+        $descripcion = $request->input('descripcion');\n+        $nombre = $request->input('nombre');\n+        $cod_tipo = $request->input('tipoCargo');\n+        $abreviatura = $request->input('abreviatura');\n+        $cod_servicio = $request->input('codPosicion');\n+        $cod_subservicio = $request->input('codGrupo');\n+        $cod_area = $request->input('codArea');\n+\n+        $usuario = session('usuario');\n+\n+        $inserted = FileControl::saveCargo($descripcion, $nombre, $abreviatura, $cod_servicio, $cod_subservicio, $cod_tipo, $cod_area, $usuario);\n+\n+        return response()->json(['message' => 'Cargo creado']);\n+    }\n+\n+    public function dashboard()\n+    {\n+        return view('file_control.dashboard');\n+    }\n+\n+    //-----------------\n+\n+    public function getFoliosXLegajo($codCliente, $codCargo){\n+        $folios = FileControl::getFoliosXLegajo($codCliente, $codCargo);\n+        return response()->json($folios);\n+    }\n+\n+    public function getAreas(){\n+        $areas = FileControl::getAreas();\n+        return response()->json($areas);\n+    }\n+\n+    public function getPosicion(){\n+        $data = FileControl::getPosicion();\n+        return response()->json($data);\n+    }\n+\n+    public function getGrupo(){\n+        $data = FileControl::getGrupo();\n+        return response()->json($data);\n+    }\n+\n+    public function getGrupoId($codigo){\n+        //$codigo = $request->input('codigo');\n+        $data = FileControl::getGrupoId($codigo);\n+        return response()->json($data);\n+    }\n+\n+    public function saveLegajo(Request $request){\n+        $folios = $request->input('folios');\n+        $codCliente = $request->input('codCliente');\n+        $codCargo = $request->input('codCargo');\n+        $codLegajo = $request->input('codLegajo');\n+        $nombre  = $request->input('nombre');\n+\n+        $usuario = session('usuario');\n+\n+        if($codLegajo != '0'){//MODIFICAR LEGAJO\n+            $codigos = FileControl::QuitarTodosLegajos($codLegajo, $usuario);\n+\n+            for ($i = 0; $i < count($codigos); $i++) {\n+                if (!in_array($codigos[$i], $folios)) {\n+                    FileControl::actualizarNotificacionDes($codigos[$i], $codCliente, $codCargo);\n+                }\n+            }\n+\n+            for($i = 0; $i < count($folios); $i++){\n+                $folio = $folios[$i];\n+                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $codLegajo);\n+                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n+\n+                if(empty($validar)){\n+                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n+                }else{\n+                    FileControl::updateLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n+                }\n+            }\n+        }else{//CREAR NUEVO LEGAJO\n+            $legajo = FileControl::saveLegajoMain($nombre);\n+\n+            for($i = 0; $i < count($folios); $i++){\n+                $folio = $folios[$i];\n+                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $legajo);\n+                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n+                if(empty($validar)){\n+                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $legajo, $usuario);\n+                }\n+\n+            }\n+        }\n+    }\n+\n+    /* GESTION DE CARGOS */\n+    public function insertarCargo(Request $request)\n+    {\n+        $tipo = $request->input('tipoCargo');\n+        $codArea = $request->input('codArea');\n+        $nombre = $request->input('nombre');\n+        $descripcion = $request->input('descripcion');\n+        $abreviatura = $request->input('abreviatura');\n+        $codPosicion = $request->input('codPosicion');\n+        $codGrupo = $request->input('codGrupo');\n+\n+        $data = [\n+            $tipo,\n+            $codArea,\n+            $nombre,\n+            $descripcion,\n+            $abreviatura,\n+            $codPosicion,\n+            $codGrupo,\n+            'SISTEMA'\n+        ];\n+\n+        $inserted = FileControl::insertarCargo($data);\n+\n+        return response()->json(['message' => 'Cargo creado']);\n+    }\n+    public function updateCargo(Request $request)\n+    {\n+        $tipo = $request->input('tipoCargo');\n+        $codArea = $request->input('codArea');\n+        $nombre = $request->input('nombre');\n+        $descripcion = $request->input('descripcion');\n+        $abreviatura = $request->input('abreviatura');\n+        $codPosicion = $request->input('codPosicion');\n+        $codGrupo = $request->input('codGrupo');\n+        $codigo = $request->input('codigo');\n+\n+        $data = [\n+            $codigo,\n+            $tipo,\n+            $codArea,\n+            $nombre,\n+            $descripcion,\n+            $abreviatura,\n+            $codPosicion,\n+            $codGrupo,\n+            'SISTEMA'\n+        ];\n+\n+        $inserted = FileControl::updateCargo($data);\n+\n+\n+        if ($inserted) {\n+            return response()->json(['success' => true, 'message' => 'Cargo modificado correctamente']);\n+        } else {\n+            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n+        }\n+\n+        //return response()->json(['message' => 'Folios creados']);\n+    }\n+\n+\n+    public function getCargosXCodigo($codigo){\n+        $data = FileControl::getCargosXCodigo($codigo);\n+        return response()->json($data);\n+    }\n+\n+\n+    public function eliminarCargo(Request $request){\n+        $codigo = $request->input('codigo');\n+        $data = 0;\n+        $inserted = FileControl::activarCargo($codigo, $data);\n+        return response()->json(['message' => 'Cargo modificdo']);\n+    }\n+\n+    public function activarCargo(Request $request){\n+        $codigo = $request->input('codigo');\n+        $data = 1;\n+        $inserted = FileControl::activarCargo($codigo, $data);\n+        return response()->json(['message' => 'Cargo modificdo']);\n+    }\n+\n+    public function ViewLegajo_comercial(){\n+\n+        return view('file_control.legajos_comercial');\n+    }\n+\n+    public function saveSolicitud(Request $request){\n+        $codigo = $request->input('codigo');\n+        $tiene = $request->input('tiene');\n+        $cargo = $request->input('cargo');\n+        $cliente = $request->input('cliente');\n+\n+        $usuario = session('usuario');\n+\n+        FileControl::saveSolicitud($codigo, $tiene, $cargo, $cliente, $usuario);\n+        return response()->json(['message' => 'Solicitud creado']);\n+    }\n+\n+}\n"
                },
                {
                    "date": 1753340355794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1086,5 +1086,7 @@\n         $usuario = session('usuario');\n \n         FileControl::saveSolicitud($codigo, $tiene, $cargo, $cliente, $usuario);\n         return response()->json(['message' => 'Solicitud creado']);\n-    }\n\\ No newline at end of file\n+    }\n+\n+}\n"
                },
                {
                    "date": 1753340947376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -530,45 +530,51 @@\n \n         // Para guardar el archivo con la codificación del personal\n \n         $codPersonal = $request->input('codPersonal');\n-        $total = count($request->file('imagenes'));\n-        foreach ($request->file('imagenes') as $index => $archivo) {\n-            //$nombre = 'folio_'.$id.'_'.$index.'.jpg';\n-            //Condición si es 1 archivo o varios, para asignar el nombre al archivo\n-            if($total == 1){\n-                $nameFile = $codPersonal.'.jpg';\n-            }else{\n-                $nameFile = $codPersonal.'_'.($index+1).'.jpg';\n+        $rutas = FileControl::getRutaFolio($request->input('codFolio')); // Siempre array\n+        $archivos = $request->file('imagenes');\n+\n+        $totalArchivos = count($archivos);\n+        $totalRutas = count($rutas);\n+\n+        // Validación\n+        if ($totalRutas !== 1 && $totalRutas !== $totalArchivos) {\n+            return response()->json(['error' => 'La cantidad de rutas no coincide con la cantidad de archivos.'], 400);\n+        }\n+\n+        // Recorrer archivos\n+        foreach ($archivos as $index => $archivo) {\n+            // Determinar nombre según el caso\n+            if ($totalRutas === $totalArchivos) {\n+                // Caso: un archivo por ruta → nombre sin sufijo\n+                $nameFile = $codPersonal . '.jpg';\n+                $rutaArchivo = $rutas[$index];\n+            } else {\n+                // Caso: múltiples archivos para una sola ruta → nombre con sufijo\n+                $nameFile = $codPersonal . '_' . ($index + 1) . '.jpg';\n+                $rutaArchivo = $rutas[0];\n             }\n \n-            // Averiguar el nombre de la carpeta o ruta donde debe de guardarse el archivo\n-            $rutaArchivo = FileControl::getRutaFolio($request->input('codFolio'));\n+            // Enviar al microservicio\n+            $response = Http::withToken('457862h45hj7u5126h58d2s51s2s')\n+                ->attach('archivo', file_get_contents($archivo), $archivo->getClientOriginalName())\n+                ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n+                    'nameFile' => $nameFile,\n+                    'ruta' => $rutaArchivo\n+                ]);\n \n-            //$filePath = null;\n-            // Llamar al microservicio para guardar el archivo en el servidor local\n-            //$filePath = 'http://190.116.178.163/Biblioteca_Grafica/'.$rutaArchivo.'/'.$nameFile;\n-            /*\n-            $response = Http::withToken('457862h45hj7u5126h58d2s51s2s')\n-            ->attach(\n-                'archivo',\n-                file_get_contents($archivo->getPathname()), // ✅ CORRECTO\n-                $archivo->getClientOriginalName()\n-            )\n-            ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n-                'nameFile' => $nameFile,\n-                'ruta' => $rutaArchivo\n-            ]);*/\n-/*\n             if ($response->failed()) {\n-                return response()->json(['error' => 'No se pudo guardar el archivo en el servidor local'], 500);\n-            }*/\n+                return response()->json([\n+                    'error' => 'No se pudo guardar el archivo en el servidor remoto',\n+                    'detalle' => $response->body()\n+                ], 500);\n+            }\n \n+            // Opcional: guardar localmente\n             $archivo->storeAs('uploads/folios', $nameFile);\n         }\n-\n-\n-\n+        \n         // Llamar al método saveFolioPersonal pasando los datos y el archivo\n         $inserted = FileControl::saveFolioPersonal(\n             $validated['fecha_emision'],\n             $validated['fecha_caducidad'],\n"
                }
            ],
            "date": 1753309035590,
            "name": "Commit-0",
            "content": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Helpers\\PdfHelper;\nuse App\\Helpers\\ImagenHelper;\nuse Barryvdh\\Snappy\\Facades\\SnappyPdf;\nuse Illuminate\\Http\\Request;\nuse App\\Models\\FileControl;\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Facades\\Http;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Facades\\File;\nuse Illuminate\\Support\\Facades\\Storage;\nuse ZipArchive;\n\nclass FileController extends Controller{\n    public function index(){\n        $personal = FileControl::getPersonal();\n        //$cargos = FileControl::getCargos();\n        $clientes = FileControl::getClientesLegajos();\n        $sucursales = FileControl::getSucursales();\n\n        return view('file_control.chargefile', compact('personal', 'clientes', 'sucursales'));\n    }\n\n    public function getCargosXCliente(Request $request){\n        $cliente = $request->input('cliente');\n        $cargos = FileControl::getCargosXCliente($cliente);\n        return response()->json($cargos);\n    }\n\n    public function ViewDashboard(){\n        /*$personal = FileControl::getPersonal();\n        $cargos = FileControl::getCargos();\n        $clientes = FileControl::getClientes();\n        $sucursales = FileControl::getSucursales();*/\n\n        return view('file_control.dashboard'/*, compact('personal', 'cargos', 'clientes', 'sucursales')*/);\n    }\n\n    public function getPersonal(Request $request){\n        $personal = FileControl::getPersonal();\n        return response()->json($personal);\n    }\n\n    public function getDocumentosXPersonal($codPersonal){\n        $docs_personal = FileControl::getDocsXPersona($codPersonal);\n        return response()->json($docs_personal);\n    }\n\n    public function getFoliosXPersonas(Request $request){\n        $personas = $request->personas;\n        $folios = $request->folios;\n        $resultados = [];\n        //Averiguando la sucursal de la persona\n\n\n        foreach ($personas as $persona) {\n            $sucursal = FileControl::getSucursalXPersona($persona['CODI_PERS']);\n            foreach ($folios as $folio) {\n                $datosFolioPersona = FileControl::getFoliosInfoPersona($persona['CODI_PERS'], $folio['codigo']);\n                foreach ($datosFolioPersona as $dato) {\n                    $resultados[] = [\n                        //'persona' => $persona['personal'],\n                        'persona' => $dato->personal ?? null,\n                        'nroDoc' => $dato->nroDoc ?? null,\n                        'codPersonal' => $persona['CODI_PERS'],\n                        'folio' => $folio['nombre'],\n                        'sucursal' => $sucursal,\n                        'ruta' => $dato->ruta_archivo ?? null,\n                        'ancho' => $dato->ancho ?? null,\n                        'hojas' => $dato->cantidad_hojas ?? null,\n                        'documento' => $dato->documento ?? null,\n                        'cargo' => $dato->cargo ?? null,\n                        'es_formato' => $dato->es_formato ?? null,\n                    ];\n                }\n                /*$resultados[] = [\n                    'persona' => $persona['personal'],\n                    'folio' => $folio['nombre'],\n                    'ruta' => $datosFolioPersona[0]->ruta_archivo ?? null,\n                ];*/\n            }\n        }\n        return response()->json($resultados);\n    }\n\n    public function getFoliosXPersona_uno(Request $request){\n        $persona = $request->input('codPersona');\n        $folios = $request->folios;\n        $resultados = [];\n\n        $sucursal = FileControl::getSucursalXPersona($persona);\n\n        foreach ($folios as $folio) {\n            $datosFolioPersona = FileControl::getFoliosInfoPersona($persona, $folio['codigo']);\n            foreach ($datosFolioPersona as $dato) {\n                $resultados[] = [\n                    'persona' => $dato->personal ?? null,\n                    'nroDoc' => $dato->nroDoc ?? null,\n                    'codPersonal' => $persona,\n                    'folio' => $folio['nombre'],\n                    'sucursal' => $sucursal,\n                    'ruta' => $dato->ruta_archivo ?? null,\n                    'ancho' => $dato->ancho ?? null,\n                    'hojas' => $dato->cantidad_hojas ?? null,\n                    'documento' => $dato->documento ?? null,\n                    'cargo' => $dato->cargo ?? null,\n                    'es_formato' => $dato->es_formato ?? null,\n                ];\n            }\n        }\n\n        return response()->json($resultados);\n    }\n\n    // public function generarPDFsPorPersona(Request $request){\n    //     $resultados = $request->input('resultados');\n\n    //     // Agrupar todos los datos por persona\n    //     $agrupados = [];\n    //     foreach ($resultados as $item) {\n    //         $cod = $item['codPersonal'];\n    //         $agrupados[$cod][] = $item;\n    //     }\n\n    //     $carpetaTemporal = storage_path('app/temp_pdfs');\n    //     if (!File::exists($carpetaTemporal)) {\n    //         File::makeDirectory($carpetaTemporal, 0777, true, true);\n    //     }\n\n    //     $pdfsGenerados = [];\n\n    //     foreach ($agrupados as $codPersonal => $documentosPersona) {\n    //         $persona = $documentosPersona[0]['persona'] ?? 'persona_sin_nombre';\n\n    //         // Carátula: datos únicos de persona\n    //         $caratula = [\n    //             'persona' => $persona,\n    //             'codPersonal' => $codPersonal,\n    //             'sucursal' => $documentosPersona[0]['sucursal'] ?? '',\n    //             'cargo' => $documentosPersona[0]['cargo'] ?? '',\n    //         ];\n\n    //         // Separar documentos: escaneados vs formatos Blade\n    //         $urls = [];\n    //         $itemsFinales = [];\n\n    //         foreach ($documentosPersona as $doc) {\n    //             if (!empty($doc['ruta'])) {\n    //                 $urls[] = [\n    //                     'ruta' => $doc['ruta'],\n    //                     'codPersonal' => $codPersonal,\n    //                     'ancho' => $doc['ancho'],\n    //                     'hojas' => $doc['hojas'],\n    //                     'documento' => $doc['documento'],\n    //                     'es_formato' => $doc['es_formato'],\n    //                 ];\n    //             }\n\n    //             if ($doc['es_formato'] == 1) {\n    //                 $itemsFinales[] = [\n    //                     'es_formato' => 1,\n    //                     'codPersonal' => $codPersonal,\n    //                     'documento' => $doc['documento'],\n    //                     'nombre_vista' => $this->obtenerNombreVista($doc),\n    //                     'datos' => $doc,\n    //                     'firma' => public_path('temp_legajos') . '/FIRMAS/PERSONAL/' . $codPersonal . '.jpg',\n    //                     'huella' => public_path('temp_legajos') . '/HUELLAS_DIGITALES/PERSONAL/' . $codPersonal . '.jpg',\n    //                 ];\n\n    //                 // Descargar imágenes del formato (firma y huella)\n    //                 ImagenHelper::descargarImagenesFormato($codPersonal);\n    //             }\n    //         }\n\n    //         // Descargar imágenes escaneadas\n    //         $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n\n    //         foreach ($rutasLocales as $img) {\n    //             $itemsFinales[] = [\n    //                 'es_formato' => 0,\n    //                 'codPersonal' => $codPersonal,\n    //                 'ruta' => $img['ruta'],\n    //                 'documento' => $img['documento'],\n    //                 'hojas' => $img['hojas'],\n    //                 'ancho' => $img['ancho'],\n    //             ];\n    //         }\n\n    //         // Render PDF de esta persona\n    //         $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n    //             'personas' => [$caratula], // vista espera array\n    //             'resultados' => $documentosPersona,\n    //             'imagenes' => $rutasLocales,\n    //             'items' => $itemsFinales,\n    //         ])->setOption('enable-local-file-access', true);\n\n    //         $nombreArchivo = 'PDF_' . Str::slug($persona) . '_' . $codPersonal . '.pdf';\n    //         $rutaArchivo = $carpetaTemporal . '/' . $nombreArchivo;\n\n    //         $pdf->save($rutaArchivo);\n    //         $pdfsGenerados[] = $rutaArchivo;\n    //     }\n\n    //     // Comprimir todo en ZIP\n    //     $zipPath = storage_path('app/documentos_por_persona.zip');\n    //     $zip = new \\ZipArchive();\n\n    //     if ($zip->open($zipPath, \\ZipArchive::CREATE | \\ZipArchive::OVERWRITE) === true) {\n    //         foreach ($pdfsGenerados as $archivo) {\n    //             $zip->addFile($archivo, basename($archivo));\n    //         }\n    //         $zip->close();\n    //     }\n\n    //     return response()->download($zipPath)->deleteFileAfterSend(true);\n    // }\n\n    public function generarPDF_env(Request $request){\n        echo \"Hola\";\n    }\n\n    public function pdf_vacio()\n    {\n        // Aquí cargas una vista muy simple (puedes crear un blade vacío o con texto simple)\n        $pdf = SnappyPdf::loadView('file_control.pdf.reporte_vacio');\n\n        // Lo envías para que se descargue (o inline si quieres verlo en navegador)\n        return $pdf->inline('reporte_vacio.pdf');\n    }\n\n\n    public function generarPDF(Request $request){\n        $resultados = $request->input('resultados');\n        //dd($resultados);\n        //exit;\n        //Agrupar los datos para mostrar en la carátula\n        $unicos = [];\n\n        $nombreNuevo = 'Reporte';\n\n        foreach ($resultados as $item) {\n            $clave = $item['persona'] . '|' . $item['sucursal'] . '|' . $item['codPersonal'] . '|' . $item['cargo'];\n            if(!isset($unicos[$clave])) {\n                $unicos[$clave] = [\n                    'persona' => $item['persona'],\n                    'codPersonal' => $item['codPersonal'],\n                    'sucursal' => $item['sucursal'],\n                    'cargo' => $item['cargo'],\n                ];\n\n\n            }\n\n             $nombreNuevo = $item['codPersonal'].'_'.$item['persona'] . '_' . date('Ymd_Hi');\n        }\n\n        $personasUnicas = array_values($unicos);\n\n        //Para los FORMATOS\n        // $formatosBlade = [\n        //     'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n        //     'DECLARACION JURADA ' => 'file_control.pdf.declaracion_jurada',\n        // ];\n\n        $urls = [];\n\n        foreach ($resultados as $resultado) {\n            if (!empty($resultado['ruta']) && !empty($resultado['codPersonal'])) {\n                $urls[] = [\n                    'ruta' => $resultado['ruta'],\n                    'codPersonal' => $resultado['codPersonal'],\n                    'ancho' => $resultado['ancho'],\n                    'hojas' => $resultado['hojas'],\n                    'documento' => $resultado['documento'],\n                    'es_formato' => $resultado['es_formato'],\n                ];\n            }\n        };\n\n        $rutasLocales = PdfHelper::descargarImagenesLegajo($urls);\n\n        $itemsFinales = [];\n        //Los que tienen imagen en ruta\n        foreach ($rutasLocales as $item) {\n            $itemsFinales[] = [\n                'es_formato' => $item['es_formato'],\n                'codPersonal' => $item['codPersonal'],\n                'ruta' => $item['ruta'],\n                'documento' => $item['documento'],\n                'hojas' => $item['hojas'],\n                'ancho' => $item['ancho'],\n            ];\n        }\n\n        // Los que deben renderizar una vista Blade porque son formatos (es_formato == 1)\n        foreach ($resultados as $resultado) {\n            if ($resultado['es_formato'] == 1) {\n                $itemsFinales[] = [\n                    'es_formato' => $resultado['es_formato'],\n                    'codPersonal' => $resultado['codPersonal'],\n                    'documento' => $resultado['documento'],\n                    'nombre_vista' => $this->obtenerNombreVista($resultado), // Función que defines\n                    'datos' => $resultado,\n                    'firma' => public_path('temp_legajos').'/FIRMAS/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n                    'huella' => public_path('temp_legajos').'/HUELLAS_DIGITALES/PERSONAL/'.$resultado['codPersonal'].'.jpg',\n                ];\n                //Hacer la copia local de la FIRMA y HUELLA DIGITAL\n                $rutasLocalesFormato = ImagenHelper::descargarImagenesFormato($resultado['codPersonal']);\n            }\n        }\n\n        //print_r($itemsFinales);\n        $pdf = SnappyPdf::loadView('file_control.pdf.reporte', [\n            'personas' => $personasUnicas,\n            'resultados' => $resultados,\n            'imagenes' => $rutasLocales,\n            'items' => $itemsFinales,\n        ])->setOption('enable-local-file-access', true);\n\n        return response()->streamDownload(function () use ($pdf) {\n            echo $pdf->output();\n        }, $nombreNuevo . '.pdf', [\n            'Content-Type' => 'application/pdf',\n            'X-Nombre-Archivo' => $nombreNuevo . '.pdf', // <- aquí\n        ]);\n    }\n\n    public function obtenerNombreVista($resultado) {\n        $mapa = [\n            'ACTA DE COMPROMISO' => 'file_control.pdf.acta_compromiso',\n            'DECLARACION JURADA DE CUMPLIMIENTO DE DISPOSICIONES' => 'file_control.pdf.declaracion_jurada',\n            'EVALUACION DEL POSTULANTE' => 'file_control.pdf.evaluacion_postulante',\n            'COMPROMISO DE CONFIABILIDAD' => 'file_control.pdf.compromiso_confidencialidad',\n            'CUMPLIMIENTO DE cumpliDISPOSICION' => 'file_control.pdf.dj_complumiento_disposicion',\n            'ESTUDIO DE SEGURIDAD DE TRABAJADORES' => 'file_control.pdf.dj_complumiento_disposicion',\n            'VISITA DOMICILIARIA' => 'file_control.pdf.visita_domiciliaria_concluciones'\n        ];\n\n        return $mapa[$resultado['documento']] ?? null;\n    }\n\n    public function generarReporteConsulta(Request $request){\n        $codigo =  $request->input('valor');\n        $data = FileControl::getReporteFiltro($codigo);\n        return response()->json($data);\n    }\n\n\n    public function generarPDF2(Request $request) {\n        $resultados = $request->input('resultados');\n        $html = '';\n\n        $vistas = [\n            'file_control.pdf.evaluacion-postulante',\n            'file_control.pdf.declaracion-jurada',\n            'file_control.pdf.acta_compromiso',\n            'file_control.pdf.compromiso_confidencialidad',\n            'file_control.pdf.dj_cumplimiento_disposicion',\n            'file_control.pdf.estudio_seguridad_empleado',\n            'file_control.pdf.estudio_seguridad_empleado_2',\n            'file_control.pdf.visita_domiciliaria',\n            'file_control.pdf.visita_domiciliaria_concluciones',\n        ];\n\n        foreach ($vistas as $vista) {\n\n            $html .= view($vista, [\n                'resultados' => $resultados\n            ])->render();\n\n            $html .= '<div style=\"page-break-after: always;\"></div>';\n        }\n\n        $pdf = SnappyPdf::loadHTML($html)->setOption('enable-local-file-access', true);\n\n        return response($pdf->inline('reporte_completo.pdf'))->header('Content-Type', 'application/pdf');\n    }\n\n    public function getAllCargo()\n    {\n        $data = FileControl::getAllCargo();\n        return response()->json($data);\n    }\n\n    public function getClientes(){\n        $data = FileControl::getClientes();\n        return response()->json($data);\n    }\n\n    public function getClientesLegajos(){\n        $data = FileControl::getClientesLegajos();\n        return response()->json($data);\n    }\n\n    public function getLegajos(Request $request)\n    {\n        $cliente = $request->input('cliente');\n        $cargo = $request->input('cargo');\n        $codPersonal = $request->input('codigo');\n\n        $legajos = FileControl::getLegajos($cliente, $cargo, $codPersonal);\n        return response()->json($legajos);\n    }\n\n    public function getFoliosClienteCargo(Request $request){\n        $cliente = $request->input('cliente');\n        $cargo = $request->input('cargo');\n\n        $legajos = FileControl::getFoliosClienteCargo($cliente, $cargo);\n        return response()->json($legajos);\n    }\n\n    public function getFoliosXLegajo_comercial($codCliente, $codCargo){\n        $folios = FileControl::getFoliosXLegajo_comercial($codCliente, $codCargo);\n        return response()->json($folios);\n    }\n\n    public function getCargos(){\n        $cargos = FileControl::getCargos();\n        return response()->json($cargos);\n    }\n\n    public function getFolios(){\n        $folios = FileControl::getFolios();\n        return response()->json($folios);\n    }\n\n    public function ViewCargo()\n    {\n        $todos = \\DB::table('sw_cargos')\n                    ->where('habilitado', 1)\n                    ->count();\n        $operativo = \\DB::table('sw_cargos')\n                    ->where('cod_tipo', 1)\n                    ->where('habilitado', 1)\n                    ->count();\n        $administrativo = \\DB::table('sw_cargos')\n                    ->where('cod_tipo', 2)\n                    ->where('habilitado', 1)\n                    ->count();\n        return view('file_control.cargo',compact('todos', 'operativo', 'administrativo'));\n    }\n\n    public function ViewLegajo()\n    {\n         $notif = FileControl::listarNotificaciones();\n        return view('file_control.legajos', [\n            'notify' => $notif\n        ]);\n    }\n\n    public function ViewFolios()\n    {\n        $periodos = FileControl::getPeriodos();\n        $todos = \\DB::table('sw_folios')\n                    ->where('habilitado', 1)\n                    ->count();\n        $principal = \\DB::table('sw_folios')\n                    ->where('obligatorio', 1)\n                    ->where('habilitado', 1)\n                    ->count();\n        $adicional = \\DB::table('sw_folios')\n                    ->where('obligatorio', 0)\n                    ->where('habilitado', 1)\n                    ->count();\n        $documento = \\DB::table('sw_folios')\n                    ->where('tipo', 1)\n                    ->where('habilitado', 1)\n                    ->count();\n        $formato = \\DB::table('sw_folios')\n                    ->where('tipo', 2)\n                    ->where('habilitado', 1)\n                    ->count();\n        $certificado = \\DB::table('sw_folios')\n                    ->where('tipo', 3)\n                    ->where('habilitado', 1)\n                    ->count();\n\n        return view('file_control.folios', compact('periodos', 'todos', 'principal', 'adicional', 'documento', 'formato', 'certificado'));\n    }\n\n    public function ViewBusquedaLegajo()\n    {\n        $personal = FileControl::getPersonalLegajos();\n        $cargos = FileControl::getCargos();\n        //$clientes = FileControl::getClientes();\n        $clientes = FileControl::getClientesLegajos();\n\n        return view('file_control.search_legajos', compact('personal', 'cargos', 'clientes'));\n    }\n\n    public function ViewLegajoPdf()\n    {\n        $sucursales = FileControl::getSucursales();\n        $cargos = FileControl::getCargos();\n        $clientes = FileControl::getClientes();\n        return view('file_control.legajos_pdf', compact('sucursales','cargos','clientes'));\n    }\n\n    public function getPersonalLegajos(Request $request)\n    {\n        $personal = FileControl::getPersonalLegajos();\n        return response()->json($personal);\n    }\n\n    public function getCoincidencias(Request $request)\n    {\n        $cliente = $request->input('cliente');\n        $cargo = $request->input('cargo');\n\n        $legajos = FileControl::getCoincidencias($cliente, $cargo);\n        return response()->json($legajos);\n    }\n\n    //GUARDAR DATOS\n    // public function saveFolioPersona(Request $request){\n    //     //dd($request->file('imagenes'));\n\n\n    //     // Validar los datos del formulario\n    //     $validated = $request->validate([\n    //         'fecha_emision' => 'required|date',\n    //         'fecha_caducidad' => 'nullable|date',\n    //         //'file' => 'nullable|file|mimes:pdf,jpg,jpeg,png|max:1024',\n    //     ]);\n\n    //     // Para guardar el arcivo con la codificación del personal\n\n    //     $codPersonal = $request->input('codPersonal');\n    //     $total = count($request->file('imagenes'));\n    //     foreach ($request->file('imagenes') as $index => $archivo) {\n    //         //$nombre = 'folio_'.$id.'_'.$index.'.jpg';\n    //         //Condición si es 1 archivo o varios, para asignar el nombre al archivo\n    //         if($total == 1){\n    //             $nameFile = $codPersonal.'.jpg';\n    //         }else{\n    //             $nameFile = $codPersonal.'_'.($index+1).'.jpg';\n    //         }\n\n    //         // Averiguar el nombre de la carpeta o ruta donde debe de guardarse el archivo\n    //         $rutaArchivo = FileControl::getRutaFolio($request->input('codFolio'));\n\n    //         //$filePath = null;\n    //         // Llamar al microservicio para guardar el archivo en el servidor local\n    //         //$filePath = 'http://190.116.178.163/Biblioteca_Grafica/'.$rutaArchivo.'/'.$nameFile;\n\n    //         $response = Http::withToken('457862h45hj7u5126h58d2s51s2s') // Autenticación con el token\n    //             ->attach('archivo', file_get_contents($archivo), $archivo->getClientOriginalName()) // Adjuntar el archivo\n    //             //->post('https://sisolmar.gruposolmar.pe/apps/api/file-control/charge-file.php', [\n    //             ->post('http://190.116.178.163/apps/api/file-control/charge-file_fin.php', [\n    //                 'nameFile' => $nameFile,\n    //                 'ruta' => $rutaArchivo\n    //             ]);\n\n    //         if ($response->failed()) {\n    //             return response()->json(['error' => 'No se pudo guardar el archivo en el servidor local'], 500);\n    //         }\n\n    //         $archivo->storeAs('uploads/folios', $nameFile);\n    //     }\n\n\n\n    //     // Llamar al método saveFolioPersonal pasando los datos y el archivo\n    //     $inserted = FileControl::saveFolioPersonal(\n    //         $validated['fecha_emision'],\n    //         $validated['fecha_caducidad'],\n    //         $request->codFolio,\n    //         $request->codPersonal,\n    //         //$filePath // Pasamos la ruta del archivo\n    //     );\n\n    //     return response()->json(['message' => 'Folios del persona guardados']);\n\n    // }\n\n\n     public function getViewDocumentsPer($codPersonal, $codFolio)\n    {\n        $result = FileControl::getViewPerDocs($codPersonal, $codFolio);\n\n        if (empty($result)) {\n            return response()->json(['success' => false, 'message' => 'No se encontraron rutas'], 404);\n        }\n\n        $extensiones = ['jpg', 'jpeg', 'png', 'pdf'];\n        $rutasValidas = [];\n\n        foreach ($result as $item) {\n            $rutaEncontrada = false;\n\n            // Probar primero con ruta_aux\n            if (isset($item->ruta_aux)) {\n                $rutaBase = str_replace('//', 'http://', $item->ruta_aux);\n\n                foreach ($extensiones as $ext) {\n                    $rutaConExt = $rutaBase . '.' . $ext;\n\n                    if (self::urlExiste($rutaConExt)) {\n                        $rutasValidas[] = $rutaConExt;\n                        $rutaEncontrada = true;\n                        break;\n                    }\n                }\n            }\n\n            // Si no se encontró nada en ruta_aux, probar con ruta\n            if (!$rutaEncontrada && isset($item->ruta)) {\n                $rutaBase = str_replace('//', 'http://', $item->ruta);\n\n                foreach ($extensiones as $ext) {\n                    $rutaConExt = $rutaBase . '.' . $ext;\n\n                    if (self::urlExiste($rutaConExt)) {\n                        $rutasValidas[] = $rutaConExt;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (empty($rutasValidas)) {\n            return response()->json([\n                'success' => false,\n                'message' => 'No se encontraron archivos accesibles desde la red'\n            ]);\n        }\n\n        return response()->json([\n            'success' => true,\n            'rutas' => $rutasValidas\n        ]);\n    }\n\n    // Función para validar si la URL existe\n    private static function urlExiste($url)\n    {\n        $ch = curl_init($url);\n        curl_setopt($ch, CURLOPT_NOBODY, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 5);\n        curl_exec($ch);\n        $statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        return $statusCode === 200;\n    }\n\n\n\n    // public function saveFolioPersona(Request $request)\n    // {\n    //     $validated = $request->validate([\n    //         'fecha_emision'     => 'required|date',\n    //         'fecha_caducidad'   => 'nullable|date',\n    //         'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n    //         'codPersonal'       => 'required|string',\n    //         'codFolio'          => 'required|string',\n    //     ]);\n\n    //     try {\n    //         $codPersonal = $validated['codPersonal'];\n    //         $codFolio    = $validated['codFolio'];\n    //         $archivos    = $request->file('imagenes');\n    //         $total       = count($archivos);\n\n    //         // Obtener ruta lógica relativa\n    //         $subCarpeta = FileControl::getRutaFolio($codFolio); // Ejemplo: \"FOLIOS/2025/F123\"\n\n    //         foreach ($archivos as $index => $archivo) {\n    //             $nombreArchivo = ($total === 1)\n    //                 ? \"{$codPersonal}.jpg\"\n    //                 : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n\n    //             $rutaRelativa = $subCarpeta . '/' . $nombreArchivo;\n\n    //             if (App::environment('local')) {\n    //                 // Guardado directo en ruta de red en entorno local\n    //                 $rutaFinal = \"\\\\\\\\192.168.10.5:86\\\\sisolmar\\\\DATA_SISOLMAR\\\\\" . $subCarpeta . \"\\\\\" . $nombreArchivo;\n\n    //                 if (!file_exists(dirname($rutaFinal))) {\n    //                     mkdir(dirname($rutaFinal), 0777, true);\n    //                 }\n\n    //                 file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n    //             }\n\n    //             if (App::environment('production')) {\n    //                 // Guardado en D:\\ mediante Storage\n    //                 Storage::disk('disk_d')->put($rutaRelativa, file_get_contents($archivo->getRealPath()));\n    //             }\n    //         }\n\n    //         // Lógica adicional de BD\n    //         FileControl::saveFolioPersonal(\n    //             $validated['fecha_emision'],\n    //             $validated['fecha_caducidad'],\n    //             $codFolio,\n    //             $codPersonal\n    //         );\n\n    //         return response()->json(['message' => 'Folios del personal guardados correctamente.']);\n\n    //     } catch (\\Exception $e) {\n    //         Log::error('Error al guardar folios: ' . $e->getMessage());\n    //         return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n    //     }\n    // }\n\n\n    public function saveFolioPersona(Request $request)\n    {\n        $request->validate([\n            'fecha_emision' => 'required|date',\n            'fecha_caducidad' => 'nullable|date',\n            'codFolio' => 'required|integer',\n            'codPersonal' => 'required|string',\n            'imagenes' => 'required|array',\n            'imagenes.*' => 'image|max:5120' // máximo 5MB por imagen (ajusta según tu necesidad)\n        ]);\n\n        $fechaEmision = $request->input('fecha_emision');\n        $fechaCaducidad = $request->input('fecha_caducidad');\n        $codFolio = $request->input('codFolio');\n        $codPersonal = $request->input('codPersonal');\n        $imagenes = $request->file('imagenes');\n\n        // Obtiene las rutas de carpeta según el folio\n        $subCarpetas = FileControl::getRutaFolio($codFolio); // devuelve un array de rutas\n\n        if (count($subCarpetas) !== count($imagenes)) {\n            return response()->json([\n                'error' => 'El número de imágenes no coincide con el número de rutas esperadas para el folio.'\n            ], 400);\n        }\n\n        foreach ($imagenes as $index => $imagen) {\n            $rutaSubcarpeta = $subCarpetas[$index] ?? null;\n\n            if (!$rutaSubcarpeta) {\n                continue; // O lanza un error si lo prefieres\n            }\n\n            $rutaDestino = public_path('Biblioteca_Grafica/' . $rutaSubcarpeta);\n\n            // Crea la carpeta si no existe\n            if (!file_exists($rutaDestino)) {\n                mkdir($rutaDestino, 0777, true);\n            }\n\n            // Guarda la imagen con el nombre del codPersonal\n            $nombreArchivo = $codPersonal . '.' . $imagen->getClientOriginalExtension();\n\n            $imagen->move($rutaDestino, $nombreArchivo);\n        }\n\n        // Aquí podrías guardar los datos en la BD si lo necesitas\n        // ...\n\n        return response()->json([\n            'message' => 'Folio guardado exitosamente.',\n        ]);\n    }\n\n\n    //DE EVER\n    /*public function saveFolioPersona(Request $request)\n    {\n        $validated = $request->validate([\n            'fecha_emision'     => 'required|date',\n            'fecha_caducidad'   => 'nullable|date',\n            'imagenes.*'        => 'required|file|mimes:jpg,jpeg,png|max:2048',\n            'codPersonal'       => 'required|string',\n            'codFolio'          => 'required|string',\n        ]);\n\n        try {\n            $codPersonal = $validated['codPersonal'];\n            $codFolio    = $validated['codFolio'];\n            $archivos    = $request->file('imagenes');\n            $total       = count($archivos);\n\n            // Subcarpeta relativa dentro de public/\n            $subCarpeta = FileControl::getRutaFolio($codFolio); // ejemplo: \"folios/F123\"\n            $rutaBase = public_path($subCarpeta);\n\n            if (!File::exists($rutaBase)) {\n                File::makeDirectory($rutaBase, 0777, true);\n            }\n\n            foreach ($archivos as $index => $archivo) {\n                $nombreArchivo = ($total === 1)\n                    ? \"{$codPersonal}.jpg\"\n                    : \"{$codPersonal}_\" . ($index + 1) . \".jpg\";\n\n                $rutaFinal = $rutaBase . '/' . $nombreArchivo;\n\n                // Guardar archivo en public/\n                file_put_contents($rutaFinal, file_get_contents($archivo->getRealPath()));\n            }\n\n            // Guardar en BD\n            FileControl::saveFolioPersonal(\n                $validated['fecha_emision'],\n                $validated['fecha_caducidad'],\n                $codFolio,\n                $codPersonal\n            );\n\n            return response()->json(['message' => 'Folios guardados correctamente.']);\n\n        } catch (\\Exception $e) {\n            Log::error('Error al guardar folios en public/: ' . $e->getMessage());\n            return response()->json(['error' => 'Error interno al guardar archivos.'], 500);\n        }\n    }\n        */\n\n    public function saveFolio(Request $request)\n    {\n        $codigo = $request->input('codigo');\n        $nombre = $request->input('nombre');\n        $tipo = $request->input('tipo');\n        $obligatorio = $request->input('obligatorio');\n        $vencimiento = $request->input('vencimiento');\n        $tipo_fecha = $request->input('periodo');\n        $plataforma = $request->input('plataforma');\n\n        if (empty($codigo)) {\n            $inserted = FileControl::saveFolio($nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n        } else {\n            $inserted = FileControl::updateFolio($codigo, $nombre, $tipo, $obligatorio, $vencimiento, $tipo_fecha, $plataforma);\n        }\n\n        if ($inserted) {\n            return response()->json(['success' => true, 'message' => 'Folio guardado correctamente']);\n        } else {\n            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n        }\n\n        //return response()->json(['message' => 'Folios creados']);\n    }\n\n    public function disabledFolio(Request $request){\n        $codigo = $request->codigo;\n        $result = FileControl::disabledFolio($codigo);\n\n        if ($result) {\n            return response()->json(['message' => 'Folio deshabilitado exitosamente'], 200);\n        } else {\n            return response()->json(['message' => 'Folio no encontrado o error al deshabilitar'], 404);\n        }\n    }\n\n    public function saveCargo(Request $request){\n        $descripcion = $request->input('descripcion');\n        $nombre = $request->input('nombre');\n        $cod_tipo = $request->input('tipoCargo');\n        $abreviatura = $request->input('abreviatura');\n        $cod_servicio = $request->input('codPosicion');\n        $cod_subservicio = $request->input('codGrupo');\n        $cod_area = $request->input('codArea');\n\n        $usuario = session('usuario');\n\n        $inserted = FileControl::saveCargo($descripcion, $nombre, $abreviatura, $cod_servicio, $cod_subservicio, $cod_tipo, $cod_area, $usuario);\n\n        return response()->json(['message' => 'Cargo creado']);\n    }\n\n    public function dashboard()\n    {\n        return view('file_control.dashboard');\n    }\n\n    //-----------------\n\n    public function getFoliosXLegajo($codCliente, $codCargo){\n        $folios = FileControl::getFoliosXLegajo($codCliente, $codCargo);\n        return response()->json($folios);\n    }\n\n    public function getAreas(){\n        $areas = FileControl::getAreas();\n        return response()->json($areas);\n    }\n\n    public function getPosicion(){\n        $data = FileControl::getPosicion();\n        return response()->json($data);\n    }\n\n    public function getGrupo(){\n        $data = FileControl::getGrupo();\n        return response()->json($data);\n    }\n\n    public function getGrupoId($codigo){\n        //$codigo = $request->input('codigo');\n        $data = FileControl::getGrupoId($codigo);\n        return response()->json($data);\n    }\n\n    public function saveLegajo(Request $request){\n        $folios = $request->input('folios');\n        $codCliente = $request->input('codCliente');\n        $codCargo = $request->input('codCargo');\n        $codLegajo = $request->input('codLegajo');\n        $nombre  = $request->input('nombre');\n\n        $usuario = session('usuario');\n\n        if($codLegajo != '0'){//MODIFICAR LEGAJO\n            $codigos = FileControl::QuitarTodosLegajos($codLegajo, $usuario);\n\n            for ($i = 0; $i < count($codigos); $i++) {\n                if (!in_array($codigos[$i], $folios)) {\n                    FileControl::actualizarNotificacionDes($codigos[$i], $codCliente, $codCargo);\n                }\n            }\n\n            for($i = 0; $i < count($folios); $i++){\n                $folio = $folios[$i];\n                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $codLegajo);\n                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n\n                if(empty($validar)){\n                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n                }else{\n                    FileControl::updateLegajo($folio, $codCliente, $codCargo, $codLegajo, $usuario);\n                }\n            }\n        }else{//CREAR NUEVO LEGAJO\n            $legajo = FileControl::saveLegajoMain($nombre);\n\n            for($i = 0; $i < count($folios); $i++){\n                $folio = $folios[$i];\n                $validar = FileControl::validarLegajo($folio, $codCliente, $codCargo, $legajo);\n                FileControl::actualizarNotificacion($folio, $codCliente, $codCargo);\n                if(empty($validar)){\n                    FileControl::saveLegajo($folio, $codCliente, $codCargo, $legajo, $usuario);\n                }\n\n            }\n        }\n    }\n\n    /* GESTION DE CARGOS */\n    public function insertarCargo(Request $request)\n    {\n        $tipo = $request->input('tipoCargo');\n        $codArea = $request->input('codArea');\n        $nombre = $request->input('nombre');\n        $descripcion = $request->input('descripcion');\n        $abreviatura = $request->input('abreviatura');\n        $codPosicion = $request->input('codPosicion');\n        $codGrupo = $request->input('codGrupo');\n\n        $data = [\n            $tipo,\n            $codArea,\n            $nombre,\n            $descripcion,\n            $abreviatura,\n            $codPosicion,\n            $codGrupo,\n            'SISTEMA'\n        ];\n\n        $inserted = FileControl::insertarCargo($data);\n\n        return response()->json(['message' => 'Cargo creado']);\n    }\n    public function updateCargo(Request $request)\n    {\n        $tipo = $request->input('tipoCargo');\n        $codArea = $request->input('codArea');\n        $nombre = $request->input('nombre');\n        $descripcion = $request->input('descripcion');\n        $abreviatura = $request->input('abreviatura');\n        $codPosicion = $request->input('codPosicion');\n        $codGrupo = $request->input('codGrupo');\n        $codigo = $request->input('codigo');\n\n        $data = [\n            $codigo,\n            $tipo,\n            $codArea,\n            $nombre,\n            $descripcion,\n            $abreviatura,\n            $codPosicion,\n            $codGrupo,\n            'SISTEMA'\n        ];\n\n        $inserted = FileControl::updateCargo($data);\n\n\n        if ($inserted) {\n            return response()->json(['success' => true, 'message' => 'Cargo modificado correctamente']);\n        } else {\n            return response()->json(['success' => false, 'message' => 'Error al guardar el folio'], 500);\n        }\n\n        //return response()->json(['message' => 'Folios creados']);\n    }\n\n\n    public function getCargosXCodigo($codigo){\n        $data = FileControl::getCargosXCodigo($codigo);\n        return response()->json($data);\n    }\n\n\n    public function eliminarCargo(Request $request){\n        $codigo = $request->input('codigo');\n        $data = 0;\n        $inserted = FileControl::activarCargo($codigo, $data);\n        return response()->json(['message' => 'Cargo modificdo']);\n    }\n\n    public function activarCargo(Request $request){\n        $codigo = $request->input('codigo');\n        $data = 1;\n        $inserted = FileControl::activarCargo($codigo, $data);\n        return response()->json(['message' => 'Cargo modificdo']);\n    }\n\n    public function ViewLegajo_comercial(){\n\n        return view('file_control.legajos_comercial');\n    }\n\n    public function saveSolicitud(Request $request){\n        $codigo = $request->input('codigo');\n        $tiene = $request->input('tiene');\n        $cargo = $request->input('cargo');\n        $cliente = $request->input('cliente');\n\n        $usuario = session('usuario');\n\n        FileControl::saveSolicitud($codigo, $tiene, $cargo, $cliente, $usuario);\n        return response()->json(['message' => 'Solicitud creado']);\n    }\n\n}\n"
        }
    ]
}