{
    "sourceFile": "resources/js/functions/legajos_pdf.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1753341662881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753341858522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -725,5 +725,6 @@\n         })\n         .catch(function(error) {\n             console.error('Error al guardar las fechas:', error);\n         });\n-    }\n\\ No newline at end of file\n+    }\n+});\n\\ No newline at end of file\n"
                }
            ],
            "date": 1753341662881,
            "name": "Commit-0",
            "content": "import axios from 'axios';\nimport {TabulatorFull as Tabulator} from 'tabulator-tables';\nimport 'tabulator-tables/dist/css/tabulator_simple.min.css';\nimport { jsPDF } from \"jspdf\";\n\naxios.defaults.headers.common['X-CSRF-TOKEN'] = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\n\n\ngetPersonal();\ngetFolios();\nnew TomSelect('#cargos');\n\n// Tabla de Personas\nconst tblPersonas = new Tabulator(\"#tblPersonas\", {\n    height: \"100%\",\n    layout: \"fitDataFill\",\n    responsiveLayout: \"collapse\",\n    pagination: true,\n    paginationSize: 10,\n    rowHeader:{formatter:\"responsiveCollapse\", width:30, minWidth:30, hozAlign:\"center\", resizable:false, headerSort:false},\n    locale: \"es\",\n    langs: {\n        \"es\": {\n            \"pagination\": {\n                \"first\": \"Primero\",\n                \"first_title\": \"Primera Página\",\n                \"last\": \"Último\",\n                \"last_title\": \"Última Página\",\n                \"prev\": \"Anterior\",\n                \"prev_title\": \"Página Anterior\",\n                \"next\": \"Siguiente\",\n                \"next_title\": \"Página Siguiente\",\n                \"all\": \"Todo\"\n            },\n            \"headerFilters\": {\n                \"default\": \"Filtrar...\", // Texto en filtros de encabezado\n            },\n            \"ajax\": {\n                \"loading\": \"Cargando datos...\",\n                \"error\": \"Error al cargar datos\"\n            },\n            \"data\": {\n                \"empty\": \"No hay datos disponibles\"\n            }\n        }\n    },\n    columns:[\n        {title:\"Código\", field:\"CODI_PERS\", hozAlign:\"center\", width: '15%'},\n        {title:\"Personal\", field:\"personal\", hozAlign:\"left\", width: '40%'},\n        {title:\"Nro DOC\", field:\"nroDoc\", hozAlign:\"center\", width: '19%'},\n        {title:\"Sucursal\", field:\"sucursal\", hozAlign:\"center\", width: '20%'},\n        {title: \"\", field: \"select\", hozAlign:\"center\", width: '5%', headerSort: false,\n            formatter: function(cell, formatterParams, onRendered) {\n                const checkbox = document.createElement(\"input\");\n                checkbox.type = \"checkbox\";\n                checkbox.classList.add(\"form-checkbox\", \"rounded\", \"text-dark\");\n                checkbox.checked = cell.getValue() || false; // Establece si está seleccionado según el valor de la celda\n                checkbox.addEventListener(\"change\", function() {\n                    cell.setValue(checkbox.checked);\n\n                    setTimeout(() => {\n                        // Mostrar todos los registros (limpiar filtro) y el input\n                        tblPersonas.clearFilter();\n                        document.getElementById('buscarPer').value = \"\";\n\n                        // Reordenar: seleccionados primero\n                        const allData = tblPersonas.getData();\n\n                        const selected = allData.filter(row => row.select === true);\n                        const unselected = allData.filter(row => row.select !== true);\n\n                        const sortedData = selected.concat(unselected);\n\n                        tblPersonas.replaceData(sortedData);\n                    }, 300);\n                });\n                return checkbox;\n            },\n        }\n    ],\n});\n\n\n// Para activar todos los checkbox del listado de personas\n/*document.getElementById('select-all-per').addEventListener('change', function() {\n    const isChecked = this.checked;\n    const rows = tblPersonas.getRows();\n\n    rows.forEach(row => {\n        const rowCheckbox = row.getCell(\"select\").getElement().querySelector('input[type=\"checkbox\"]');\n        rowCheckbox.checked = isChecked; // Marcar o desmarcar el checkbox de la fila\n        row.getCell(\"select\").setValue(isChecked); // Cambiar el valor de la celda\n    });\n});*/\n\n// Tabla de Folios\nconst tblFolios = new Tabulator(\"#tblFolios\", {\n    height: \"100%\",\n    layout: \"fitDataFill\",\n    responsiveLayout: \"collapse\",\n    pagination: true,\n    paginationSize: 10,\n    locale: \"es\",\n    langs: {\n        \"es\": {\n            \"pagination\": {\n                \"first\": \"Primero\",\n                \"first_title\": \"Primera Página\",\n                \"last\": \"Último\",\n                \"last_title\": \"Última Página\",\n                \"prev\": \"Anterior\",\n                \"prev_title\": \"Página Anterior\",\n                \"next\": \"Siguiente\",\n                \"next_title\": \"Página Siguiente\",\n                \"all\": \"Todo\"\n            },\n            \"headerFilters\": {\n                \"default\": \"Filtrar...\",\n            },\n            \"ajax\": {\n                \"loading\": \"Cargando datos...\",\n                \"error\": \"Error al cargar datos\"\n            },\n            \"data\": {\n                \"empty\": \"No hay datos disponibles\"\n            }\n        }\n    },\n    columns: [\n        { title: \"Folios\", field: \"nombre\", hozAlign: \"left\", width: '60%'},\n        {title: \"Tipo\",  field: \"tipoFolio\",  hozAlign: \"center\", width: '32%',\n            formatter: function(cell, formatterParams) {\n                var tipo = cell.getValue();\n                if (tipo === \"FORMATO\") {\n                    return '<span class=\"text-yellow2 font-bold\">FORMATO</span>'\n                } else if (tipo === \"DOCUMENTO\") {\n                    return '<span class=\"text-barnie font-bold\">DOCUMENTO</span>'\n                } else if (tipo === \"CERTIFICADO\") {\n                    return '<span class=\"text-green font-bold\">CERTIFICADO</span>'\n                }\n                return tipo;\n            }\n        },\n        {title: \"\", field: \"select\", hozAlign:\"center\", width: '5%', headerSort: false,\n            formatter: function(cell, formatterParams, onRendered) {\n                const checkbox = document.createElement(\"input\");\n                checkbox.type = \"checkbox\";\n                checkbox.classList.add(\"form-checkbox\", \"rounded\", \"text-dark\");\n                checkbox.checked = cell.getValue() || false; // Establece si está seleccionado según el valor de la celda\n                checkbox.addEventListener(\"change\", function() {\n                    cell.setValue(checkbox.checked);\n\n                    setTimeout(() => {\n                        // Mostrar todos los registros (limpiar filtro) y el input\n                        tblFolios.clearFilter();\n                        document.getElementById('buscarFol').value = \"\";\n\n                        // Reordenar: seleccionados primero\n                        const allData = tblFolios.getData();\n\n                        const selected = allData.filter(row => row.select === true);\n                        const unselected = allData.filter(row => row.select !== true);\n\n                        const sortedData = selected.concat(unselected);\n\n                        tblFolios.replaceData(sortedData);\n                    }, 300);\n                });\n                return checkbox;\n            },\n        }\n    ]\n});\n\n\n// Tabla de Legajos\nconst tblLegajos = new Tabulator(\"#tblLegajos\", {\n    height: \"100%\",\n    layout: \"fitDataFill\",\n    responsiveLayout: \"collapse\",\n    columns: [\n        { title: \"Folio\", field: \"documento\", hozAlign: \"left\", width: '40%' },\n        { title: \"Emision\", field: \"fecha_emision\", hozAlign: \"center\", width: '20%',\n            formatter: function(cell, formatterParams){\n                var emision = cell.getValue();\n                if (emision === null){\n                    return '-';\n                }else{\n                    return emision;\n                }\n            }\n        },\n        { title: \"Caducidad\", field: \"fecha_caducidad\", hozAlign: \"center\", width: '20%',\n            formatter: function(cell, formatterParams) {\n                var vigente = cell.getRow().getData().vigente;\n                var fechaCaducidad = cell.getValue();\n                if (vigente == 1) {\n                    return `<span class=\"text-vigente-800 font-bold\">${fechaCaducidad}</span>`\n                } else if (vigente == 0) {\n                    return `<span class=\"text-vencido-800 font-bold\">${fechaCaducidad}</span>`\n                } else {\n                    return '-';\n                }\n            }\n         },\n        { title: \"Acciones\", field: \"accionesy\", hozAlign: \"center\", width: '20%', headerSort: false,\n            formatter: function(cell, formatterParams, onRendered) {\n                var filePath = cell.getRow().getData().ruta_archivo;\n                var url = '/storage/' + filePath; // Concatenar el link a la ruta del archivo\n                if(filePath){\n                    var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"btn rounded-full view-btn bg-info/25 text-info hover:bg-info hover:text-white\"><i class=\"fa fa-eye view-btn\"></i></a>`;\n                }else{\n                    var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"pointer-events-none btn rounded-full view-btn bg-warning/25 text-warning-opa bg-gray-200 hover:bg-gray-200\"><i class=\"fa fa-eye\"></i></a>`;\n                }\n                var chargeBtnLeg = `<button type=\"button\" class=\"btn rounded-full charge-btn bg-success/25 text-success hover:bg-success hover:text-white\"><i class=\"fa fa-cloud-upload charge-btn\"></i></button>`;\n                return chargeBtnLeg+' '+viewBtn;\n            },\n            cellClick: function(e, cell) {\n                if (e.target.classList.contains('charge-btn-leg')) {\n                    const documento = cell.getRow().getData().documento;\n                    const periodo = cell.getRow().getData().periodo;\n                    const meses = cell.getRow().getData().meses;\n                    const codFolio = cell.getRow().getData().codFolio;\n                    const vencimiento = cell.getRow().getData().vencimiento;\n\n                    document.querySelector('#modal-file h3.modal-title').textContent = `Documento: ${documento}`;\n                    document.querySelector('#txtPeriodo').textContent = `${periodo}`;\n                    document.getElementById('codFolio').value = codFolio;\n                    document.getElementById('meses').value = meses;\n\n                    // Verificar si vencimiento es 0 y ocultar el campo de caducidad\n                    if (vencimiento == 0) {\n                        document.getElementById('divCaducidad').classList.add('hidden');\n                        document.getElementById('fecha_caducidad').removeAttribute('required');\n                    } else {\n                        document.getElementById('divCaducidad').classList.remove('hidden');\n                        document.getElementById('fecha_caducidad').setAttribute('required', 'required');\n                    };\n\n                    document.getElementById('btn-modal-docs').click();\n                }\n            }\n        },\n    ]\n});\n\n\ndocument.getElementById('select-all-fol').addEventListener('change', function() {\n    const isChecked = this.checked;\n    const rows = tblFolios.getRows(); // Obtener todas las filas de la tabla\n\n    rows.forEach(row => {\n        const rowCheckbox = row.getCell(\"select\").getElement().querySelector('input[type=\"checkbox\"]');\n        rowCheckbox.checked = isChecked; // Marcar o desmarcar el checkbox de la fila\n        row.getCell(\"select\").setValue(isChecked); // Cambiar el valor de la celda\n    });\n});\n\ndocument.getElementById('btnLeg2').classList.add(\"hidden\");\ndocument.getElementById('btnLeg1').classList.add(\"hidden\");\ndocument.getElementById('btnLeg3').classList.add(\"hidden\");\n\n// Obtener todos los enlaces dentro de las cards\nconst links = document.querySelectorAll('.card a');\n\nlinks.forEach(link => {\n    link.addEventListener('click', function(e) {\n        e.preventDefault(); // Prevenir el comportamiento por defecto del enlace\n\n        // Eliminar la clase 'active' de todas las cards\n        document.querySelectorAll('.card').forEach(card => {\n            card.classList.remove('active');\n        });\n\n        // Agregar la clase 'active' a la card actual\n        this.closest('.card').classList.add('active');\n    });\n});\n\n// Función para el MOSTRAR LAS CARDS de cada LEGAJO\ndocument.getElementById(\"legajo1\").addEventListener(\"click\", function() {\n    document.getElementById('personasDiv').classList.remove(\"hidden\");\n    document.getElementById('foliosDiv').classList.remove(\"hidden\");\n    document.getElementById('legajosDiv').classList.add(\"hidden\");\n    document.getElementById('btnLeg2').classList.add(\"hidden\");\n    document.getElementById('btnLeg3').classList.add(\"hidden\");\n    document.getElementById('btnLeg1').classList.remove(\"hidden\");\n    tblPersonas.redraw();\n    //tblFolios.redraw();\n\n});\ndocument.getElementById(\"legajo2\").addEventListener(\"click\", function() {\n    document.getElementById('personasDiv').classList.remove(\"hidden\");\n    document.getElementById('legajosDiv').classList.remove(\"hidden\");\n    document.getElementById('foliosDiv').classList.add(\"hidden\");\n    document.getElementById('btnLeg1').classList.add(\"hidden\");\n    document.getElementById('btnLeg3').classList.add(\"hidden\");\n    document.getElementById('btnLeg2').classList.remove(\"hidden\");\n    tblPersonas.redraw();\n    //tblFolios.redraw();\n\n});\ndocument.getElementById(\"legajo3\").addEventListener(\"click\", function() {\n    document.getElementById('personasDiv').classList.add(\"hidden\");\n    document.getElementById('legajosDiv').classList.add(\"hidden\");\n    document.getElementById('foliosDiv').classList.add(\"hidden\");\n    document.getElementById('btnLeg1').classList.add(\"hidden\");\n    document.getElementById('btnLeg2').classList.add(\"hidden\");\n    document.getElementById('btnLeg3').classList.remove(\"hidden\");\n\n});\ndocument.getElementById(\"legajo4\").addEventListener(\"click\", function() {\n    document.getElementById('personasDiv').classList.add(\"hidden\");\n    document.getElementById('legajosDiv').classList.add(\"hidden\");\n    document.getElementById('foliosDiv').classList.add(\"hidden\");\n    document.getElementById('btnLeg1').classList.add(\"hidden\");\n    document.getElementById('btnLeg2').classList.add(\"hidden\");\n\n});\n\n// Llenado de la tabla de legajos\ndocument.addEventListener('DOMContentLoaded', function() {\n    document.getElementById('clientes').addEventListener('change', function () {\n        document.getElementById('divCargos').classList.remove(\"hidden\");\n    });\n\n    document.getElementById('cargos').addEventListener('change', function () {\n        getLegajos();\n    });\n});\n\n// Función para obtener los legajos\nfunction getLegajos() {\n    document.getElementById('tblLegajos').classList.remove('hidden');\n    const cliente = document.getElementById('clientes').value;\n    const cargo = document.getElementById('cargos').value;\n\n    // Obtener las personas seleccionadas\n    var selectedPersona = null;\n    tblPersonas.getRows().forEach(function(row) {\n        if (row.getCell(\"select\").getValue()) {\n            var codiPers = row.getData().CODI_PERS;\n\n            // Verifica si el valor de CODI_PERS no está vacío\n            if (codiPers) {\n                selectedPersona = codiPers;\n            }\n        }\n    });\n\n    const codigoPer = selectedPersona;\n    axios.get(`${ VITE_URL_APP }/api/get-legajos`, {\n        params: {\n            cliente: cliente,\n            cargo: cargo,\n            codigo: codigoPer\n        }\n    })\n    .then(function (response) {\n        console.log(response.data);\n        tblLegajos.setData(response.data);\n    })\n    .catch(function (error) {\n        console.error(\"Error al obtener los legajos tabla:\", error);\n    });\n};\n\n// Función para actualizar la tabla de personas por SUCURSAL\nfunction filtroXSucursal() {\n    const sucursalSeleccionada = document.getElementById('sucursal').value;\n    if (!sucursalSeleccionada) {\n        tblPersonas.clearFilter();\n    } else if(sucursalSeleccionada == 'TODOS'){\n        tblPersonas.clearFilter();\n    } else{\n        tblPersonas.setFilter(\"sucursal\",\"=\",sucursalSeleccionada);\n    }\n}\ndocument.getElementById('sucursal').addEventListener('change', filtroXSucursal);\n\n// Función para actualizar la tabla de folios por TIPO\nfunction filterTableByTipoFolio() {\n    const tipoFolioSeleccionado = document.querySelector('input[name=\"tipo_folio\"]:checked').value;\n    tblDocs.setFilter(\"tipo_folio\", \"=\", tipoFolioSeleccionado);\n}\n\n// Escuchar los cambios en los radio buttons\ndocument.querySelectorAll('input[name=\"tipo_folio\"]').forEach(radio => {\n    radio.addEventListener('change', filterTableByTipoFolio);\n});\n\n// Función para BUSCAR\ndocument.getElementById(\"buscarPer\").addEventListener(\"keyup\", function () {\n    let valor = this.value.toLowerCase().trim();\n    tblPersonas.setFilter([\n        [\n            { field: \"CODI_PERS\", type: 'like',  value: valor },\n            { field: \"personal\", type: 'like',  value: valor },\n            { field: \"nroDoc\", type: 'like', value: valor },\n            { field: \"sucursal\", type: 'like', value: valor },\n            { field: \"col\", type: 'like', value: valor },\n        ]\n    ]);\n});\ndocument.getElementById(\"buscarFol\").addEventListener(\"keyup\", function () {\n    let valor = this.value.toLowerCase().trim();\n    tblFolios.setFilter([\n        [\n            { field: \"nombre\", type: 'like',  value: valor },\n            { field: \"periodo\", type: 'like',  value: valor },\n            { field: \"tipoFolio\", type: 'like', value: valor },\n        ]\n    ]);\n});\n\n// Función para el BOTON GENERAR PDF\ndocument.getElementById(\"btnLeg1\").addEventListener(\"click\", async function () {\n    var selectedFolios = [];\n    tblFolios.getRows().forEach(function(row) {\n        if (row.getCell(\"select\").getValue()) {\n            selectedFolios.push(row.getData());\n        }\n    });\n\n    for (const row of tblPersonas.getRows()) {\n        if (row.getCell(\"select\").getValue()) {\n            const personaData = row.getData();\n            const tempCod = personaData.CODI_PERS;\n\n            try {\n                await getArchivosXPersona_uno(tempCod, selectedFolios, 1);\n            } catch (e) {\n                console.warn(\"Falló para persona:\", tempCod);\n            }\n        }\n    }\n\n    console.log(\"Todos los legajos han sido generados.\");\n});\n\n\ndocument.getElementById(\"btnLeg2\").addEventListener(\"click\", async function () {\n    const cliente = document.getElementById('clientes').value;\n    const cargo = document.getElementById('cargos').value;\n    const foliosData = await getFoliosClienteCargo(cliente, cargo);\n\n    var selectedFolios = foliosData.map(folio => ({\n        nombre: folio.folio,\n        codigo: folio.codigo\n    }));\n\n    for (const row of tblPersonas.getRows()) {\n        if (row.getCell(\"select\").getValue()) {\n            const personaData = row.getData();\n            const tempCod = personaData.CODI_PERS;\n\n            try {\n                await getArchivosXPersona_uno(tempCod, selectedFolios, 1);\n            } catch (e) {\n                console.warn(\"Falló para persona:\", tempCod);\n            }\n        }\n    }\n\n    console.log(\"Todos los legajos han sido generados.\");\n});\n\n\n\n\n// Función para el BOTON GENERAR PDF 2\n// document.getElementById(\"btnLeg2\").addEventListener(\"click\", async function() {\n\n//     tblPersonas.getRows().forEach(function(row) {\n//         if (row.getCell(\"select\").getValue()) {\n\n//         }\n//     });\n\n//     const cliente = document.getElementById('clientes').value;\n//     const cargo = document.getElementById('cargos').value;\n//     const foliosData = await getFoliosClienteCargo(cliente, cargo);\n\n//     var selectedFolios = foliosData.map(folio => ({\n//         nombre: folio.folio,\n//         codigo: folio.codigo\n//     }));\n\n//     getArchivosXPersonas(selectedPersonas, selectedFolios, 2);\n// });\n\n// Función para el BOTON GENERAR PDF 3\ndocument.getElementById(\"btnLeg3\").addEventListener(\"click\", async function() {\n    /*var selectedPersonas = [];\n    tblPersonas.getRows().forEach(function(row) {\n        if (row.getCell(\"select\").getValue()) {\n            selectedPersonas.push(row.getData());\n        }\n    });\n\n    const cliente = document.getElementById('clientes').value;\n    const cargo = document.getElementById('cargos').value;\n    const foliosData = await getFoliosClienteCargo(cliente, cargo);\n\n    var selectedFolios = foliosData.map(folio => ({\n        nombre: folio.folio,\n        codigo: folio.codigo\n    }));\n\n    getArchivosXPersonas(selectedPersonas, selectedFolios, 3);*/\n    //Para las pruebas del generador de PDF\n    //alert(\"Hola\");\n    \n    try {\n        const response = await axios.post(`${ VITE_URL_APP }/pdf_vacio`, {}, {\n            responseType: 'blob'  // Muy importante para recibir archivos binarios (PDF)\n        });\n\n        // Crear URL para descargar/abrir el PDF\n        const url = window.URL.createObjectURL(new Blob([response.data], { type: 'application/pdf' }));\n\n        // Abrir el PDF en una nueva pestaña\n        window.open(url);\n\n        // Opcional: liberar el objeto URL después de usar\n        setTimeout(() => window.URL.revokeObjectURL(url), 10000);\n\n    } catch (error) {\n        console.error('Error al generar PDF vacío:', error);\n    }\n        \n});\n\n\n// Función para generar el PDF\nfunction generarPDF(data) {\n    return new Promise((resolve, reject) => {\n        Swal.fire({\n            title: 'Generando LEGAJO...',\n            text: 'Por favor espera unos segundos',\n            allowOutsideClick: false,\n            didOpen: () => {\n                Swal.showLoading();\n            }\n        });\n        axios.post(`${ VITE_URL_APP }/generar-pdf`, {\n            resultados: data\n        }, {\n            responseType: 'blob'\n        })\n        .then(response => {\n            Swal.close();\n\n            const blob = new Blob([response.data], { type: 'application/pdf' });\n            const url = URL.createObjectURL(blob);\n            const link = document.createElement('a');\n            link.href = url;\n\n            const nombreArchivo = response.headers['x-nombre-archivo'] || 'reporte.pdf';\n            link.download = nombreArchivo;\n\n            link.click();\n            resolve();\n        })\n        .catch(error => {\n            Swal.fire('Error', 'No se pudo generar el PDF', 'error');\n            console.error(\"Error al generar el PDF:\", error);\n            reject(error);\n        });\n    });\n}\n\n\n\n// Función para generar el PDF\nfunction generarPDF2(data) {\n    axios.post(`${ VITE_URL_APP }/generar-pdf2`, {\n        resultados: data\n    }, {\n        responseType: 'blob' // Para recibir el PDF\n    })\n    .then(response => {\n        const blob = new Blob([response.data], { type: 'application/pdf' });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = 'reporte.pdf';\n        link.click();\n    })\n    .catch(error => {\n        console.error(\"Error al generar el PDF:\", error);\n    });\n}\n\n\n\n//========================================== DATA CON AXIOS ==========================================//\n// Función para obtener el listados de personas\nfunction getPersonal(){\n    axios.get(`${ VITE_URL_APP }/api/get-personal`)\n    .then(response => {\n        const datosTabla = response.data;\n        tblPersonas.setData(datosTabla);\n    })\n    .catch(error => {\n        console.error(\"Hubo un error:\", error);\n    });\n}\n// Función para obtener los folios\nfunction getFolios(){\n    axios.get(`${ VITE_URL_APP }/api/get-folios`)\n    .then(response => {\n        tblFolios.setData(response.data);\n    })\n    .catch(error => {\n        console.error(\"Error al obtener los datos:\", error);\n    });\n};\n\n\n\nasync function getArchivosXPersona_uno(codPersonal, selectedFolios, tipo) {\n\n    if (tipo == 3) {\n        //await generarPDF2([]);\n        return;\n    }\n\n    try {\n        const response = await axios.get(`${ VITE_URL_APP }/api/get-folios-persona_uno`, {\n            params: {\n                codPersona: codPersonal,\n                folios: selectedFolios,\n            }\n        });\n\n        // ⏳ Espera que se genere y descargue el PDF\n        await generarPDF(response.data);\n\n    } catch (error) {\n        console.error(\"Error al obtener los folios o generar el PDF:\", error);\n        throw error;\n    }\n}\n\n\n\n\nfunction getArchivosXPersonas(selectedPersonas, selectedFolios, tipo){\n    //console.log(selectedPersonas);\n    //console.log(selectedFolios);\n    if(tipo == 3){\n        generarPDF2([]);\n        return;\n    }\n    axios.get(`${ VITE_URL_APP }/api/get-folios-personas`, {\n        params: {\n            personas: selectedPersonas,\n            folios: selectedFolios,\n        }\n    })\n    .then(function (response) {\n        // console.log(response);\n        // return;\n        generarPDF(response.data);\n    })\n    .catch(function (error) {\n        console.error(\"Error al obtener los folios por persona:\", error);\n    });\n}\n\n// Función para obtener los folios por persona\nfunction getDocsObligatorios(codigo){\n    axios.get(`${ VITE_URL_APP }/api/get-documentos/${codigo}`)\n    .then(response => {\n        tblDocs.setData(response.data);\n        // Aplicar filtro \"PRINCIPAL\" por defecto después de cargar los datos\n        filterTableByTipoFolio();\n    })\n    .catch(error => {\n        console.error(\"Error al obtener los datos:\", error);\n    });\n}\n\n// Función para obtener las coincidencias\nasync function getFoliosClienteCargo(cliente, cargo) {\n    try {\n        const response = await axios.get(`${ VITE_URL_APP }/api/get-folios-cliente-cargo`, {\n            params: {\n                cliente: cliente,\n                cargo: cargo\n            }\n        });\n\n        // Devuelve los datos de los folios obtenidos\n        return response.data;\n    } catch (error) {\n        console.error(\"Hubo un error:\", error);\n        return []; // Retorna un arreglo vacío en caso de error\n    }\n}\n\n//================================ GUARDAR LOS DATOS POR AXIOS ================================//\ndocument.getElementById('formFolioPersonal').addEventListener('submit', function(event) {\n    event.preventDefault();\n    var fechaEmision = document.getElementById('fecha_emision').value;\n    var fechaCaducidad = document.getElementById('fecha_caducidad').value;\n    var codigoPer = document.getElementById('codPersonal').value;\n    var codFolio = document.getElementById('codFolio').value;\n\n    if (fechaEmision /*&& fechaCaducidad*/) {\n        // Enviar los datos al servidor usando Axios\n        axios.post(`${ VITE_URL_APP }/api/save_folio_persona`, {\n            fecha_emision: fechaEmision,\n            fecha_caducidad: fechaCaducidad,\n            codFolio: codFolio,\n            codPersonal: codigoPer,\n        })\n        .then(function(response) {\n            //console.log('Datos guardados:', response.data);\n            document.getElementById('btn-modal-docs-close').click();\n            getDocsObligatorios(codigoPer);\n            document.getElementById('btnTraerFolios').click();\n            limpiarModal();\n        })\n        .catch(function(error) {\n            console.error('Error al guardar las fechas:', error);\n        });\n    }\n});"
        }
    ]
}