{
    "sourceFile": "resources/js/functions/chargeFile.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1753328689768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753331131786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -580,9 +580,13 @@\n     for (let i = 0; i < archivos.length; i++) {\n         formData.append('archivos[]', archivos[i]); // si son múltiples\n     }\n \n-    if (fechaEmision /*&& fechaCaducidad*/) {\n+    console.log(formData.get('archivo'));\n+\n+    /*\n+\n+    if (fechaEmision) {\n         // Enviar los datos al servidor usando Axios\n         axios.post(`${ VITE_URL_APP }/api/save_folio_persona`, formData, {\n             headers: {\n                 'Content-Type': 'multipart/form-data' // Es necesario para enviar archivos\n@@ -597,8 +601,9 @@\n         .catch(function(error) {\n             console.error('Error al guardar los datos:', error);\n         });\n     }\n+    */\n });\n \n \n \n"
                },
                {
                    "date": 1753331387640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -580,9 +580,12 @@\n     for (let i = 0; i < archivos.length; i++) {\n         formData.append('archivos[]', archivos[i]); // si son múltiples\n     }\n \n-    console.log(formData.get('archivo'));\n+    let files = formData.getAll('archivos[]');\n+    files.forEach((file, index) => {\n+        console.log(`Archivo ${index + 1}:`, file.name, file.type, file.size);\n+    });\n \n     /*\n \n     if (fechaEmision) {\n"
                },
                {
                    "date": 1753331662584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,616 @@\n+\n+import axios from 'axios';\n+import Swal from 'sweetalert2';\n+import {TabulatorFull as Tabulator} from 'tabulator-tables';\n+import 'tabulator-tables/dist/css/tabulator_simple.min.css';\n+\n+getPersonal();\n+window.archivosSeleccionados = [];\n+\n+//Tabla de Personas\n+const tblPersonas = new Tabulator(\"#tblPersonas\", {\n+    height: \"100%\",\n+    layout:\"fitData\",\n+    responsiveLayout:\"collapse\",\n+    pagination: true,\n+    paginationSize: 10,\n+    rowHeader:{formatter:\"responsiveCollapse\", width:30, minWidth:30, hozAlign:\"center\", resizable:false, headerSort:false},\n+    locale: \"es\",\n+    langs: {\n+        \"es\": {\n+            \"pagination\": {\n+                \"first\": \"Primero\",\n+                \"first_title\": \"Primera Página\",\n+                \"last\": \"Último\",\n+                \"last_title\": \"Última Página\",\n+                \"prev\": \"Anterior\",\n+                \"prev_title\": \"Página Anterior\",\n+                \"next\": \"Siguiente\",\n+                \"next_title\": \"Página Siguiente\",\n+                \"all\": \"Todo\"\n+            },\n+            \"headerFilters\": {\n+                \"default\": \"Filtrar...\", // Texto en filtros de encabezado\n+            },\n+            \"ajax\": {\n+                \"loading\": \"Cargando datos...\",\n+                \"error\": \"Error al cargar datos\"\n+            },\n+            \"data\": {\n+                \"empty\": \"No hay datos disponibles\"\n+            }\n+        }\n+    },\n+    columns:[\n+        {title:\"Cód.\", field:\"CODI_PERS\", hozAlign:\"center\", width: '10%'},\n+        {title:\"Personal\", field:\"personal\", hozAlign:\"left\", width: '30%'},\n+        {title:\"Nro Doc.\", field:\"nroDoc\", hozAlign:\"center\", width: '15%'},\n+        {title:\"Sucursal\", field:\"sucursal\", hozAlign:\"center\", width: '20%'},\n+        {title: \"Acciones\", field: \"acciones\", width: '25%', hozAlign: \"center\", headerSort: false,\n+            formatter: function(cell, formatterParams, onRendered) {\n+                var docsBtn = `<button type=\"button\" class=\"btn rounded-full docs-btn bg-success/25 text-success hover:bg-success hover:text-white\" >Folios</button>`;\n+                var legajoBtn = `<button type=\"button\" class=\"btn rounded-full legajo-btn bg-warning/25 text-warning hover:bg-warning hover:text-white\">Legajos</button>`;\n+\n+                return docsBtn + ' ' + legajoBtn;\n+            },\n+            cellClick: function(e, cell) {\n+                var registro = cell.getRow().getData();\n+                var codigo = registro.CODI_PERS;\n+                var persona = registro.personal;\n+                document.getElementById('codPersonal').value = codigo;\n+\n+                getDocsObligatorios(codigo);\n+\n+                if (e.target.classList.contains('docs-btn')) {\n+                    document.getElementById('dataDocs').classList.remove('hidden');\n+                    document.getElementById('dataDocsLeg').classList.add('hidden');\n+                    document.getElementById('divCoincidencias').classList.add('hidden');\n+                }else{\n+                    document.getElementById('dataDocsLeg').classList.remove('hidden');\n+                    document.getElementById('dataDocs').classList.add('hidden');\n+\n+                }\n+\n+                updateCardTitle(persona);\n+            }\n+        },\n+    ],\n+});\n+\n+\n+//Tabla de Folios\n+const tblDocs = new Tabulator(\"#tblDocs\", {\n+    height: \"100%\",\n+    layout:\"fitDataFill\",\n+    responsiveLayout: \"collapse\",\n+    pagination: true,\n+    paginationSize: 10,\n+    locale: \"es\",\n+    langs: {\n+        \"es\": {\n+            \"pagination\": {\n+                \"first\": \"Primero\",\n+                \"first_title\": \"Primera Página\",\n+                \"last\": \"Último\",\n+                \"last_title\": \"Última Página\",\n+                \"prev\": \"Anterior\",\n+                \"prev_title\": \"Página Anterior\",\n+                \"next\": \"Siguiente\",\n+                \"next_title\": \"Página Siguiente\",\n+                \"all\": \"Todo\"\n+            },\n+            \"headerFilters\": {\n+                \"default\": \"Filtrar...\",\n+            },\n+            \"ajax\": {\n+                \"loading\": \"Cargando datos...\",\n+                \"error\": \"Error al cargar datos\"\n+            },\n+            \"data\": {\n+                \"empty\": \"No hay datos disponibles\"\n+            }\n+        }\n+    },\n+    columns: [\n+        { title: \"Folio\", field: \"documento\", hozAlign: \"left\", width: '40%' },\n+        { title: \"Emision\", field: \"fecha_emision\", hozAlign: \"center\", width: '20%',\n+            formatter: function(cell, formatterParams){\n+                var emision = cell.getValue();\n+                if (emision === null){\n+                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n+                }else{\n+                    return emision;\n+                }\n+            }\n+        },\n+        { title: \"Caducidad\", field: \"fecha_caducidad\", hozAlign: \"center\", width: '20%',\n+            formatter: function(cell, formatterParams) {\n+                var vigente = cell.getRow().getData().vigente;\n+                var fechaCaducidad = cell.getValue();\n+                if (vigente == 1) {\n+                    return `<span class=\"text-vigente-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad}</span>`\n+                } else if (vigente == 0) {\n+                    return `<span class=\"text-vencido-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad}</span>`\n+                } else {\n+                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n+                }\n+            }\n+         },\n+        { title: \"Acciones\", field: \"acciones\", hozAlign: \"center\", width: '20%', headerSort: false,\n+            formatter: function(cell, formatterParams, onRendered) {\n+                // var filePath = cell.getRow().getData().ruta_archivo;\n+                // var url = filePath;\n+                // if(filePath){\n+                //     var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"btn rounded-full view-btn bg-info/25 text-info hover:bg-info hover:text-white\"><i class=\"fa fa-eye view-btn\"></i></a>`;\n+                // }else{\n+                //     var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"pointer-events-none btn rounded-full view-btn bg-warning/25 text-warning-opa bg-gray-200 hover:bg-gray-200\"><i class=\"fa fa-eye\"></i></a>`;\n+                // }\n+\n+                let chargeBtn = `<button type=\"button\"\n+                class=\"btn rounded-full charge-btn bg-success/25 text-success hover:bg-success hover:text-white\">\n+                    <i class=\"fa fa-cloud-upload charge-btn\"></i>\n+                </button>`;\n+\n+                let viewDocBtn = `<button type=\"button\"\n+                class=\"btn rounded-full viewdoc-btn bg-warning/25 text-warning hover:bg-warning hover:text-white\">\n+                    <i class=\"fa fa-eye viewdoc-btn\"></i>\n+                </button>`;\n+\n+                return chargeBtn + ' ' + viewDocBtn;\n+            },\n+            cellClick: function(e, cell) {\n+                if (e.target.classList.contains('charge-btn')) {\n+                    const documento = cell.getRow().getData().documento;\n+                    const periodo = cell.getRow().getData().periodo;\n+                    const cantidad_hojas = cell.getRow().getData().cantidad_hojas;\n+                    const meses = cell.getRow().getData().meses;\n+                    const codFolio = cell.getRow().getData().codFolio;\n+                    const vencimiento = cell.getRow().getData().vencimiento;\n+\n+                    document.querySelector('#modal-file h3.modal-title').textContent = `Documento: ${documento}`;\n+                    document.querySelector('#txtPeriodo').textContent = `${periodo}`;\n+                    document.querySelector('#txtCantHojas').textContent = `${cantidad_hojas}`;\n+                    document.getElementById('cantArchivos').value = cantidad_hojas;\n+                    document.getElementById('codFolio').value = codFolio;\n+                    document.getElementById('meses').value = meses;\n+\n+                    // Verificar si vencimiento es 0 y ocultar el campo de caducidad\n+                    if (vencimiento == 0) {\n+                        document.getElementById('divCaducidad').classList.add('hidden');\n+                        document.getElementById('fecha_caducidad').removeAttribute('required');\n+                    } else {\n+                        document.getElementById('divCaducidad').classList.remove('hidden');\n+                        document.getElementById('fecha_caducidad').setAttribute('required', 'required');\n+                    };\n+\n+                    limpiarModal();\n+                    document.getElementById('btn-modal-docs').click();\n+                }\n+\n+                if(e.target.classList.contains('viewdoc-btn')){\n+                    const dataTbl = cell.getRow().getData();\n+                    const codFolio = dataTbl.codFolio;\n+                    const codPersonal = dataTbl.codPersonal;\n+                    const nombre = dataTbl.personal;\n+                    const documento = dataTbl.documento;\n+\n+                    axios.get(`${ VITE_URL_APP }/api/get-view-documents/${codPersonal}/${codFolio}`)\n+                    .then(response => {\n+                        console.log(response);\n+\n+                        if(response.data.success !== true){\n+                            Swal.fire({\n+                                title: \"No se encontro documentos válidos\",\n+                                icon: \"info\"\n+                            });\n+                            return;\n+                        }\n+\n+                        document.querySelector('#modal-view-docs .modal-title').textContent = `${nombre}`;\n+                        document.querySelector('#modal-view-docs #txtDocSelec').textContent = `${documento}`;\n+\n+                        const rutas = response.data.rutas; // ← tu array del backend\n+                        const visor = document.getElementById('visorDocs');\n+\n+                        visor.innerHTML = '';\n+\n+                        rutas.forEach(ruta => {\n+                            visor.insertAdjacentHTML('beforeend', `\n+                                <img src=\"http://${ruta}\" class=\"w-full max-w-[700px] mb-3 rounded-md\" />\n+                            `);\n+                        });\n+\n+                        document.getElementById('btn-modal-view-docs').click();\n+                    })\n+                    .catch(error => {\n+                        console.error(\"Error al obtener los datos:\", error);\n+                        Swal.fire({\n+                            title: \"Problema al encontrar documentos\",\n+                            icon: \"error\"\n+                        });\n+                    });\n+                }\n+            },\n+            rowFormatter: function(row) {\n+                row.getElement().classList.add(\"hover:bg-indigo-500\");  // Cambia \"indigo-500\" al color que desees\n+            }\n+        },\n+    ],\n+});\n+\n+\n+\n+//Tabla de Documentos LEGAJOS\n+const tblLegajos = new Tabulator(\"#tblDocsLegajo\", {\n+    height: \"100%\",\n+    layout: \"fitDataFill\",\n+    responsiveLayout: \"collapse\",\n+    columns: [\n+        { title: \"Folio\", field: \"documento\", hozAlign: \"left\", width: '40%' },\n+        { title: \"Emision\", field: \"fecha_emision\", hozAlign: \"center\", width: '20%',\n+            formatter: function(cell, formatterParams){\n+                var emision = cell.getValue();\n+                if (emision === null){\n+                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n+                }else{\n+                    return emision;\n+                }\n+            }\n+        },\n+        { title: \"Caducidad\", field: \"fecha_caducidad\", hozAlign: \"center\", width: '20%',\n+            formatter: function(cell, formatterParams) {\n+                var vigente = cell.getRow().getData().vigente;\n+                var fechaCaducidad = cell.getValue();\n+                if (vigente == 1) {\n+                    return `<span class=\"text-vigente-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad}</span>`\n+                } else if (vigente == 0) {\n+                    return `<span class=\"text-vencido-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad }</span>`\n+                } else {\n+                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n+                }\n+            }\n+         },\n+        { title: \"Acciones\", field: \"accionesy\", hozAlign: \"center\", width: '20%', headerSort: false,\n+            formatter: function(cell, formatterParams, onRendered) {\n+                var filePath = cell.getRow().getData().ruta_archivo;\n+                var url = '/storage/' + filePath; // Concatenar el link a la ruta del archivo\n+                if(filePath){\n+                    var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"btn rounded-full view-btn bg-info/25 text-info hover:bg-info hover:text-white\"><i class=\"fa fa-eye view-btn\"></i></a>`;\n+                }else{\n+                    var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"pointer-events-none btn rounded-full view-btn bg-warning/25 text-warning-opa bg-gray-200 hover:bg-gray-200\"><i class=\"fa fa-eye\"></i></a>`;\n+                }\n+                var chargeBtnLeg = `<button type=\"button\" class=\"btn rounded-full charge-btn-leg bg-success/25 text-success hover:bg-success hover:text-white\"><i class=\"fa fa-cloud-upload charge-btn-leg\"></i></button>`;\n+                return chargeBtnLeg+' '+viewBtn;\n+            },\n+            cellClick: function(e, cell) {\n+                if (e.target.classList.contains('charge-btn-leg')) {\n+                    const documento = cell.getRow().getData().documento;\n+                    const periodo = cell.getRow().getData().periodo;\n+                    const meses = cell.getRow().getData().meses;\n+                    const codFolio = cell.getRow().getData().codFolio;\n+                    const vencimiento = cell.getRow().getData().vencimiento;\n+\n+                    document.querySelector('#modal-file h3.modal-title').textContent = `Documento: ${documento}`;\n+                    document.querySelector('#txtPeriodo').textContent = `${periodo}`;\n+                    document.getElementById('codFolio').value = codFolio;\n+                    document.getElementById('meses').value = meses;\n+\n+                    // Verificar si vencimiento es 0 y ocultar el campo de caducidad\n+                    if (vencimiento == 0) {\n+                        document.getElementById('divCaducidad').classList.add('hidden');  // Ocultar el div\n+                        document.getElementById('fecha_caducidad').removeAttribute('required');  // Quitar el atributo required\n+                    } else {\n+                        document.getElementById('divCaducidad').classList.remove('hidden');  // Mostrar el div\n+                        document.getElementById('fecha_caducidad').setAttribute('required', 'required');  // Asegurarse de que sea requerido\n+                    };\n+\n+                    document.getElementById('btn-modal-docs').click();\n+                }\n+            }\n+        },\n+    ]\n+});\n+\n+\n+//Tabla de Coincidencias\n+const tblPersonasCN = new Tabulator(\"#tblPersonasCN\", {\n+    height: \"100%\",\n+    layout:\"fitDataFill\",\n+    responsiveLayout: \"collapse\",\n+    columns: [\n+        {title:\"Código\", field:\"CODI_PERS\", hozAlign:\"center\", width: '10%'},\n+        {title:\"Personal\", field:\"personal\", hozAlign:\"left\", width: '30%'},\n+        {title:\"Nro Documento\", field:\"nroDoc\", hozAlign:\"center\", width: '15%'},\n+        {title:\"Sucursal\", field:\"sucursal\", hozAlign:\"center\", width: '18%'},\n+    ],\n+});\n+\n+// Función para actualizar la tabla de personas por SUCURSAL\n+function filtroXSucursal() {\n+    const sucursalSeleccionada = document.getElementById('sucursal').value;\n+    if (!sucursalSeleccionada) {\n+        tblPersonas.clearFilter();\n+    } else if(sucursalSeleccionada == 'TODOS'){\n+        tblPersonas.clearFilter();\n+    } else{\n+        tblPersonas.setFilter(\"sucursal\",\"=\",sucursalSeleccionada);\n+    }\n+}\n+document.getElementById('sucursal').addEventListener('change', filtroXSucursal);\n+\n+// Función para actualizar la tabla de folios por TIPO\n+function filterTableByTipoFolio() {\n+    const tipoFolioSeleccionado = document.querySelector('input[name=\"tipo_folio\"]:checked').value;\n+    tblDocs.setFilter(\"tipo_folio\", \"=\", tipoFolioSeleccionado);\n+}\n+\n+// Escuchar los cambios en los radio buttons\n+document.querySelectorAll('input[name=\"tipo_folio\"]').forEach(radio => {\n+    radio.addEventListener('change', filterTableByTipoFolio);\n+});\n+\n+\n+//Tabla de Legajos\n+document.addEventListener('DOMContentLoaded', function() {\n+\n+    document.getElementById('cargos').addEventListener('change', function () {\n+        getLegajos();\n+        //COINCIDENCIAS\n+        //document.getElementById('divCoincidencias').classList.remove('hidden');\n+        //getCoincidencias(clienteSeleccionado, cargoSeleccionado);\n+    });\n+\n+    document.getElementById('clientes').addEventListener('change', function () {\n+        const clienteLeg = document.getElementById('clientes').value;\n+        getCargos(clienteLeg);\n+    });\n+\n+\n+     // Evento de cambio de fecha de emisión\n+     document.getElementById('fecha_emision').addEventListener('change', function () {\n+        const fechaEmision = document.getElementById('fecha_emision').value;\n+        if (fechaEmision) {\n+            // Calculamos la fecha de caducidad\n+            const fechaCalculada = calcularFechaCaducidad(fechaEmision);\n+            document.getElementById('fecha_caducidad').value = fechaCalculada; // Llenamos la fecha de caducidad\n+        }\n+    });\n+});\n+\n+// Función para asignar nombre a la card de documentos\n+function updateCardTitle(nombrePersona) {\n+    const cardTitle = document.querySelector('.nombrePersDocs');\n+    cardTitle.textContent = `Folios de ${nombrePersona}`;\n+    const cardTitleLeg = document.querySelector('.nombrePersLeg');\n+    cardTitleLeg.textContent = `Legajos para ${nombrePersona}`;\n+}\n+\n+document.getElementById(\"buscarPersonal\").addEventListener(\"keyup\", function () {\n+    let valor = this.value.toLowerCase().trim();\n+    tblPersonas.setFilter([\n+        [\n+            { field: \"CODI_PERS\", type: 'like',  value: valor },\n+            { field: \"personal\", type: 'like',  value: valor },\n+            { field: \"nroDoc\", type: 'like', value: valor },\n+            { field: \"sucursal\", type: 'like', value: valor },\n+            { field: \"col\", type: 'like', value: valor },\n+        ]\n+    ]);\n+\n+    // Guardar el valor para usarlo tras cambios de página\n+    tblPersonas._ultimoFiltro = valor;\n+\n+    setTimeout(() => resaltarTexto(valor), 10);\n+\n+});\n+\n+document.getElementById(\"buscarFolio\").addEventListener(\"keyup\", function () {\n+    let valor = this.value.toLowerCase().trim();\n+    tblDocs.setFilter([\n+        [\n+            { field: \"documento\", type: 'like',  value: valor },\n+        ]\n+    ]);\n+\n+    // Guardar el valor para usarlo tras cambios de página\n+    //tblPersonas._ultimoFiltro = valor;\n+\n+    //setTimeout(() => resaltarTexto(valor), 10);\n+\n+});\n+\n+\n+//Función para resaltar el texto del que se hace la búsqueda\n+function resaltarTexto(valor){\n+    tblPersonas.getRows().forEach(row => {\n+        row.getElement().querySelectorAll(\".tabulator-cell\").forEach((cell, i, cells) => {\n+            if (i === cells.length - 1) return; // excluir última columna\n+\n+            const text = cell.textContent;\n+            if (valor && text.toLowerCase().includes(valor)) {\n+                const regex = new RegExp(`(${valor})`, \"gi\");\n+                cell.innerHTML = text.replace(regex, \"<span class='bg-warning/25'>$1</span>\");\n+            } else {\n+                cell.innerHTML = text;\n+            }\n+        });\n+    });\n+};\n+\n+// Cada vez que se renderiza una página en la tabla de personal\n+tblPersonas.on(\"renderComplete\", function () {\n+    if (tblPersonas._ultimoFiltro) {\n+        resaltarTexto(tblPersonas._ultimoFiltro);\n+    }\n+});\n+\n+// Función para calcular la fecha de caducidad\n+function calcularFechaCaducidad(fechaEmision) {\n+    const periodoVigencia = parseInt(document.getElementById('meses').value);\n+    if(periodoVigencia > 1){\n+        const fecha = new Date(fechaEmision);\n+        fecha.setMonth(fecha.getMonth() + periodoVigencia);\n+        const anio = fecha.getFullYear();\n+        const mes = ('0' + (fecha.getMonth() + 1)).slice(-2);\n+        const dia = ('0' + fecha.getDate()).slice(-2);\n+        return `${anio}-${mes}-${dia}`;\n+    }\n+}\n+\n+//Función para limpia los campos del modal\n+function limpiarModal(){\n+    document.getElementById('fecha_emision').value=\"\";\n+    document.getElementById('fecha_caducidad').value=\"\";\n+\n+    window.archivosSeleccionados = [];\n+    //document.getElementById('cantArchivos').value=\"\";\n+    document.getElementById('listaArchivos').innerHTML='';\n+    document.getElementById('archivoInput').value='';\n+}\n+\n+//========================================== DATA CON AXIOS ==========================================//\n+// Función para obtener los folios por persona\n+function getDocsObligatorios(codigo){\n+    axios.get(`${ VITE_URL_APP }/api/get-documentos/${codigo}`)\n+    .then(response => {\n+        tblDocs.setData(response.data);\n+        // Aplicar filtro \"PRINCIPAL\" por defecto después de cargar los datos\n+        filterTableByTipoFolio();\n+    })\n+    .catch(error => {\n+        console.error(\"Error al obtener los datos:\", error);\n+    });\n+}\n+// Función para obtener el listados de personas\n+function getPersonal(){\n+    axios.get(`${ VITE_URL_APP }/api/get-personal`)\n+    .then(response => {\n+        const datosTabla = response.data;\n+        tblPersonas.setData(datosTabla);\n+\n+    })\n+    .catch(error => {\n+        console.error(\"Hubo un error:\", error);\n+    });\n+}\n+// Función para obtener los legajos\n+function getLegajos() {\n+    tblLegajos.clearData();\n+    document.getElementById('tblDocsLegajo').classList.remove('hidden');\n+    const cliente = document.getElementById('clientes').value;\n+    const cargo = document.getElementById('cargos').value;\n+    const codigoPer = document.getElementById('codPersonal').value;\n+    axios.get(`${ VITE_URL_APP }/api/get-legajos`, {\n+        params: {\n+            cliente: cliente,\n+            cargo: cargo,\n+            codigo: codigoPer\n+        }\n+    })\n+    .then(function (response) {\n+        tblLegajos.clearData();\n+        tblLegajos.setData(response.data);\n+    })\n+    .catch(function (error) {\n+        console.error(\"Error al obtener los legajos:\", error);\n+    });\n+};\n+\n+// Función para obtener los cargos con legajos\n+function getCargos(clienteLeg) {\n+    axios.get(`${ VITE_URL_APP }/api/get-cargos`, {\n+        params: {\n+            cliente: clienteLeg,\n+        }\n+    })\n+    .then(function (response) {\n+        const select = document.getElementById(\"cargos\");\n+        select.innerHTML = '<option disabled selected>-Seleccionar-</option>';\n+        response.data.forEach(cargo => {\n+            const option = document.createElement(\"option\");\n+            option.value = cargo.codigo;\n+            option.textContent = cargo.nombre;\n+            select.appendChild(option);\n+        })\n+    })\n+    .catch(function (error) {\n+        console.error(\"Error al obtener los legajos:\", error);\n+    });\n+};\n+\n+// Función para obtener las coincidencias\n+function getCoincidencias(cliente, cargo) {\n+    axios.get(`${ VITE_URL_APP }/api/get-coincidencias`, {\n+        params: {\n+            cliente: cliente,\n+            cargo: cargo\n+        }\n+    })\n+    .then(response => {\n+        tblPersonasCN.setData(response.data);\n+    })\n+    .catch(error => {\n+        console.error(\"Hubo un error:\", error);\n+    });\n+};\n+\n+\n+\n+//================================ GUARDAR LOS DATOS POR AXIOS ================================//\n+document.getElementById('formFolioPersonal').addEventListener('submit', function(event) {\n+    event.preventDefault();\n+    var fechaEmision = document.getElementById('fecha_emision').value;\n+    var fechaCaducidad = document.getElementById('fecha_caducidad').value;\n+    var codigoPer = document.getElementById('codPersonal').value;\n+    var codFolio = document.getElementById('codFolio').value;\n+\n+    var formData = new FormData();\n+\n+    formData.append('fecha_emision', fechaEmision);\n+    formData.append('fecha_caducidad', fechaCaducidad);\n+    formData.append('codFolio', codFolio);\n+    formData.append('codPersonal', codigoPer);\n+\n+    /*for (let i = 0; i < archivosSeleccionados.length; i++) {\n+        formData.append('imagenes[]', archivosSeleccionados[i]);\n+    }*/\n+\n+    // Agrega los archivos seleccionados (si hay)\n+    const archivos = document.querySelector('#input_archivos').files;\n+    for (let i = 0; i < archivos.length; i++) {\n+        formData.append('archivos[]', archivos[i]); // si son múltiples\n+    }\n+    /*\n+    let files = formData.getAll('archivos[]');\n+    files.forEach((file, index) => {\n+        console.log(`Archivo ${index + 1}:`, file.name, file.type, file.size);\n+    });\n+    */\n+\n+    \n+\n+    if (fechaEmision) {\n+        // Enviar los datos al servidor usando Axios\n+        axios.post(`${ VITE_URL_APP }/api/save_folio_persona`, formData, {\n+            headers: {\n+                'Content-Type': 'multipart/form-data' // Es necesario para enviar archivos\n+            }\n+        })\n+        .then(function(response) {\n+            document.getElementById('btn-modal-docs-close').click();\n+            getDocsObligatorios(codigoPer);\n+            getLegajos();\n+            limpiarModal();\n+        })\n+        .catch(function(error) {\n+            console.error('Error al guardar los datos:', error);\n+        });\n+    }\n+    \n+});\n+\n+\n+\n+\n+\n+\n"
                },
                {
                    "date": 1753332913622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -603,5 +603,15 @@\n             getLegajos();\n             limpiarModal();\n         })\n         .catch(function(error) {\n-            console.error('Error al guardar\n\\ No newline at end of file\n+            console.error('Error al guardar los datos:', error);\n+        });\n+    }\n+    \n+});\n+\n+\n+\n+\n+\n+\n"
                },
                {
                    "date": 1753333102241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,616 @@\n+\n+import axios from 'axios';\n+import Swal from 'sweetalert2';\n+import {TabulatorFull as Tabulator} from 'tabulator-tables';\n+import 'tabulator-tables/dist/css/tabulator_simple.min.css';\n+\n+getPersonal();\n+window.archivosSeleccionados = [];\n+\n+//Tabla de Personas\n+const tblPersonas = new Tabulator(\"#tblPersonas\", {\n+    height: \"100%\",\n+    layout:\"fitData\",\n+    responsiveLayout:\"collapse\",\n+    pagination: true,\n+    paginationSize: 10,\n+    rowHeader:{formatter:\"responsiveCollapse\", width:30, minWidth:30, hozAlign:\"center\", resizable:false, headerSort:false},\n+    locale: \"es\",\n+    langs: {\n+        \"es\": {\n+            \"pagination\": {\n+                \"first\": \"Primero\",\n+                \"first_title\": \"Primera Página\",\n+                \"last\": \"Último\",\n+                \"last_title\": \"Última Página\",\n+                \"prev\": \"Anterior\",\n+                \"prev_title\": \"Página Anterior\",\n+                \"next\": \"Siguiente\",\n+                \"next_title\": \"Página Siguiente\",\n+                \"all\": \"Todo\"\n+            },\n+            \"headerFilters\": {\n+                \"default\": \"Filtrar...\", // Texto en filtros de encabezado\n+            },\n+            \"ajax\": {\n+                \"loading\": \"Cargando datos...\",\n+                \"error\": \"Error al cargar datos\"\n+            },\n+            \"data\": {\n+                \"empty\": \"No hay datos disponibles\"\n+            }\n+        }\n+    },\n+    columns:[\n+        {title:\"Cód.\", field:\"CODI_PERS\", hozAlign:\"center\", width: '10%'},\n+        {title:\"Personal\", field:\"personal\", hozAlign:\"left\", width: '30%'},\n+        {title:\"Nro Doc.\", field:\"nroDoc\", hozAlign:\"center\", width: '15%'},\n+        {title:\"Sucursal\", field:\"sucursal\", hozAlign:\"center\", width: '20%'},\n+        {title: \"Acciones\", field: \"acciones\", width: '25%', hozAlign: \"center\", headerSort: false,\n+            formatter: function(cell, formatterParams, onRendered) {\n+                var docsBtn = `<button type=\"button\" class=\"btn rounded-full docs-btn bg-success/25 text-success hover:bg-success hover:text-white\" >Folios</button>`;\n+                var legajoBtn = `<button type=\"button\" class=\"btn rounded-full legajo-btn bg-warning/25 text-warning hover:bg-warning hover:text-white\">Legajos</button>`;\n+\n+                return docsBtn + ' ' + legajoBtn;\n+            },\n+            cellClick: function(e, cell) {\n+                var registro = cell.getRow().getData();\n+                var codigo = registro.CODI_PERS;\n+                var persona = registro.personal;\n+                document.getElementById('codPersonal').value = codigo;\n+\n+                getDocsObligatorios(codigo);\n+\n+                if (e.target.classList.contains('docs-btn')) {\n+                    document.getElementById('dataDocs').classList.remove('hidden');\n+                    document.getElementById('dataDocsLeg').classList.add('hidden');\n+                    document.getElementById('divCoincidencias').classList.add('hidden');\n+                }else{\n+                    document.getElementById('dataDocsLeg').classList.remove('hidden');\n+                    document.getElementById('dataDocs').classList.add('hidden');\n+\n+                }\n+\n+                updateCardTitle(persona);\n+            }\n+        },\n+    ],\n+});\n+\n+\n+//Tabla de Folios\n+const tblDocs = new Tabulator(\"#tblDocs\", {\n+    height: \"100%\",\n+    layout:\"fitDataFill\",\n+    responsiveLayout: \"collapse\",\n+    pagination: true,\n+    paginationSize: 10,\n+    locale: \"es\",\n+    langs: {\n+        \"es\": {\n+            \"pagination\": {\n+                \"first\": \"Primero\",\n+                \"first_title\": \"Primera Página\",\n+                \"last\": \"Último\",\n+                \"last_title\": \"Última Página\",\n+                \"prev\": \"Anterior\",\n+                \"prev_title\": \"Página Anterior\",\n+                \"next\": \"Siguiente\",\n+                \"next_title\": \"Página Siguiente\",\n+                \"all\": \"Todo\"\n+            },\n+            \"headerFilters\": {\n+                \"default\": \"Filtrar...\",\n+            },\n+            \"ajax\": {\n+                \"loading\": \"Cargando datos...\",\n+                \"error\": \"Error al cargar datos\"\n+            },\n+            \"data\": {\n+                \"empty\": \"No hay datos disponibles\"\n+            }\n+        }\n+    },\n+    columns: [\n+        { title: \"Folio\", field: \"documento\", hozAlign: \"left\", width: '40%' },\n+        { title: \"Emision\", field: \"fecha_emision\", hozAlign: \"center\", width: '20%',\n+            formatter: function(cell, formatterParams){\n+                var emision = cell.getValue();\n+                if (emision === null){\n+                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n+                }else{\n+                    return emision;\n+                }\n+            }\n+        },\n+        { title: \"Caducidad\", field: \"fecha_caducidad\", hozAlign: \"center\", width: '20%',\n+            formatter: function(cell, formatterParams) {\n+                var vigente = cell.getRow().getData().vigente;\n+                var fechaCaducidad = cell.getValue();\n+                if (vigente == 1) {\n+                    return `<span class=\"text-vigente-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad}</span>`\n+                } else if (vigente == 0) {\n+                    return `<span class=\"text-vencido-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad}</span>`\n+                } else {\n+                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n+                }\n+            }\n+         },\n+        { title: \"Acciones\", field: \"acciones\", hozAlign: \"center\", width: '20%', headerSort: false,\n+            formatter: function(cell, formatterParams, onRendered) {\n+                // var filePath = cell.getRow().getData().ruta_archivo;\n+                // var url = filePath;\n+                // if(filePath){\n+                //     var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"btn rounded-full view-btn bg-info/25 text-info hover:bg-info hover:text-white\"><i class=\"fa fa-eye view-btn\"></i></a>`;\n+                // }else{\n+                //     var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"pointer-events-none btn rounded-full view-btn bg-warning/25 text-warning-opa bg-gray-200 hover:bg-gray-200\"><i class=\"fa fa-eye\"></i></a>`;\n+                // }\n+\n+                let chargeBtn = `<button type=\"button\"\n+                class=\"btn rounded-full charge-btn bg-success/25 text-success hover:bg-success hover:text-white\">\n+                    <i class=\"fa fa-cloud-upload charge-btn\"></i>\n+                </button>`;\n+\n+                let viewDocBtn = `<button type=\"button\"\n+                class=\"btn rounded-full viewdoc-btn bg-warning/25 text-warning hover:bg-warning hover:text-white\">\n+                    <i class=\"fa fa-eye viewdoc-btn\"></i>\n+                </button>`;\n+\n+                return chargeBtn + ' ' + viewDocBtn;\n+            },\n+            cellClick: function(e, cell) {\n+                if (e.target.classList.contains('charge-btn')) {\n+                    const documento = cell.getRow().getData().documento;\n+                    const periodo = cell.getRow().getData().periodo;\n+                    const cantidad_hojas = cell.getRow().getData().cantidad_hojas;\n+                    const meses = cell.getRow().getData().meses;\n+                    const codFolio = cell.getRow().getData().codFolio;\n+                    const vencimiento = cell.getRow().getData().vencimiento;\n+\n+                    document.querySelector('#modal-file h3.modal-title').textContent = `Documento: ${documento}`;\n+                    document.querySelector('#txtPeriodo').textContent = `${periodo}`;\n+                    document.querySelector('#txtCantHojas').textContent = `${cantidad_hojas}`;\n+                    document.getElementById('cantArchivos').value = cantidad_hojas;\n+                    document.getElementById('codFolio').value = codFolio;\n+                    document.getElementById('meses').value = meses;\n+\n+                    // Verificar si vencimiento es 0 y ocultar el campo de caducidad\n+                    if (vencimiento == 0) {\n+                        document.getElementById('divCaducidad').classList.add('hidden');\n+                        document.getElementById('fecha_caducidad').removeAttribute('required');\n+                    } else {\n+                        document.getElementById('divCaducidad').classList.remove('hidden');\n+                        document.getElementById('fecha_caducidad').setAttribute('required', 'required');\n+                    };\n+\n+                    limpiarModal();\n+                    document.getElementById('btn-modal-docs').click();\n+                }\n+\n+                if(e.target.classList.contains('viewdoc-btn')){\n+                    const dataTbl = cell.getRow().getData();\n+                    const codFolio = dataTbl.codFolio;\n+                    const codPersonal = dataTbl.codPersonal;\n+                    const nombre = dataTbl.personal;\n+                    const documento = dataTbl.documento;\n+\n+                    axios.get(`${ VITE_URL_APP }/api/get-view-documents/${codPersonal}/${codFolio}`)\n+                    .then(response => {\n+                        console.log(response);\n+\n+                        if(response.data.success !== true){\n+                            Swal.fire({\n+                                title: \"No se encontro documentos válidos\",\n+                                icon: \"info\"\n+                            });\n+                            return;\n+                        }\n+\n+                        document.querySelector('#modal-view-docs .modal-title').textContent = `${nombre}`;\n+                        document.querySelector('#modal-view-docs #txtDocSelec').textContent = `${documento}`;\n+\n+                        const rutas = response.data.rutas; // ← tu array del backend\n+                        const visor = document.getElementById('visorDocs');\n+\n+                        visor.innerHTML = '';\n+\n+                        rutas.forEach(ruta => {\n+                            visor.insertAdjacentHTML('beforeend', `\n+                                <img src=\"http://${ruta}\" class=\"w-full max-w-[700px] mb-3 rounded-md\" />\n+                            `);\n+                        });\n+\n+                        document.getElementById('btn-modal-view-docs').click();\n+                    })\n+                    .catch(error => {\n+                        console.error(\"Error al obtener los datos:\", error);\n+                        Swal.fire({\n+                            title: \"Problema al encontrar documentos\",\n+                            icon: \"error\"\n+                        });\n+                    });\n+                }\n+            },\n+            rowFormatter: function(row) {\n+                row.getElement().classList.add(\"hover:bg-indigo-500\");  // Cambia \"indigo-500\" al color que desees\n+            }\n+        },\n+    ],\n+});\n+\n+\n+\n+//Tabla de Documentos LEGAJOS\n+const tblLegajos = new Tabulator(\"#tblDocsLegajo\", {\n+    height: \"100%\",\n+    layout: \"fitDataFill\",\n+    responsiveLayout: \"collapse\",\n+    columns: [\n+        { title: \"Folio\", field: \"documento\", hozAlign: \"left\", width: '40%' },\n+        { title: \"Emision\", field: \"fecha_emision\", hozAlign: \"center\", width: '20%',\n+            formatter: function(cell, formatterParams){\n+                var emision = cell.getValue();\n+                if (emision === null){\n+                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n+                }else{\n+                    return emision;\n+                }\n+            }\n+        },\n+        { title: \"Caducidad\", field: \"fecha_caducidad\", hozAlign: \"center\", width: '20%',\n+            formatter: function(cell, formatterParams) {\n+                var vigente = cell.getRow().getData().vigente;\n+                var fechaCaducidad = cell.getValue();\n+                if (vigente == 1) {\n+                    return `<span class=\"text-vigente-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad}</span>`\n+                } else if (vigente == 0) {\n+                    return `<span class=\"text-vencido-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad }</span>`\n+                } else {\n+                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n+                }\n+            }\n+         },\n+        { title: \"Acciones\", field: \"accionesy\", hozAlign: \"center\", width: '20%', headerSort: false,\n+            formatter: function(cell, formatterParams, onRendered) {\n+                var filePath = cell.getRow().getData().ruta_archivo;\n+                var url = '/storage/' + filePath; // Concatenar el link a la ruta del archivo\n+                if(filePath){\n+                    var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"btn rounded-full view-btn bg-info/25 text-info hover:bg-info hover:text-white\"><i class=\"fa fa-eye view-btn\"></i></a>`;\n+                }else{\n+                    var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"pointer-events-none btn rounded-full view-btn bg-warning/25 text-warning-opa bg-gray-200 hover:bg-gray-200\"><i class=\"fa fa-eye\"></i></a>`;\n+                }\n+                var chargeBtnLeg = `<button type=\"button\" class=\"btn rounded-full charge-btn-leg bg-success/25 text-success hover:bg-success hover:text-white\"><i class=\"fa fa-cloud-upload charge-btn-leg\"></i></button>`;\n+                return chargeBtnLeg+' '+viewBtn;\n+            },\n+            cellClick: function(e, cell) {\n+                if (e.target.classList.contains('charge-btn-leg')) {\n+                    const documento = cell.getRow().getData().documento;\n+                    const periodo = cell.getRow().getData().periodo;\n+                    const meses = cell.getRow().getData().meses;\n+                    const codFolio = cell.getRow().getData().codFolio;\n+                    const vencimiento = cell.getRow().getData().vencimiento;\n+\n+                    document.querySelector('#modal-file h3.modal-title').textContent = `Documento: ${documento}`;\n+                    document.querySelector('#txtPeriodo').textContent = `${periodo}`;\n+                    document.getElementById('codFolio').value = codFolio;\n+                    document.getElementById('meses').value = meses;\n+\n+                    // Verificar si vencimiento es 0 y ocultar el campo de caducidad\n+                    if (vencimiento == 0) {\n+                        document.getElementById('divCaducidad').classList.add('hidden');  // Ocultar el div\n+                        document.getElementById('fecha_caducidad').removeAttribute('required');  // Quitar el atributo required\n+                    } else {\n+                        document.getElementById('divCaducidad').classList.remove('hidden');  // Mostrar el div\n+                        document.getElementById('fecha_caducidad').setAttribute('required', 'required');  // Asegurarse de que sea requerido\n+                    };\n+\n+                    document.getElementById('btn-modal-docs').click();\n+                }\n+            }\n+        },\n+    ]\n+});\n+\n+\n+//Tabla de Coincidencias\n+const tblPersonasCN = new Tabulator(\"#tblPersonasCN\", {\n+    height: \"100%\",\n+    layout:\"fitDataFill\",\n+    responsiveLayout: \"collapse\",\n+    columns: [\n+        {title:\"Código\", field:\"CODI_PERS\", hozAlign:\"center\", width: '10%'},\n+        {title:\"Personal\", field:\"personal\", hozAlign:\"left\", width: '30%'},\n+        {title:\"Nro Documento\", field:\"nroDoc\", hozAlign:\"center\", width: '15%'},\n+        {title:\"Sucursal\", field:\"sucursal\", hozAlign:\"center\", width: '18%'},\n+    ],\n+});\n+\n+// Función para actualizar la tabla de personas por SUCURSAL\n+function filtroXSucursal() {\n+    const sucursalSeleccionada = document.getElementById('sucursal').value;\n+    if (!sucursalSeleccionada) {\n+        tblPersonas.clearFilter();\n+    } else if(sucursalSeleccionada == 'TODOS'){\n+        tblPersonas.clearFilter();\n+    } else{\n+        tblPersonas.setFilter(\"sucursal\",\"=\",sucursalSeleccionada);\n+    }\n+}\n+document.getElementById('sucursal').addEventListener('change', filtroXSucursal);\n+\n+// Función para actualizar la tabla de folios por TIPO\n+function filterTableByTipoFolio() {\n+    const tipoFolioSeleccionado = document.querySelector('input[name=\"tipo_folio\"]:checked').value;\n+    tblDocs.setFilter(\"tipo_folio\", \"=\", tipoFolioSeleccionado);\n+}\n+\n+// Escuchar los cambios en los radio buttons\n+document.querySelectorAll('input[name=\"tipo_folio\"]').forEach(radio => {\n+    radio.addEventListener('change', filterTableByTipoFolio);\n+});\n+\n+\n+//Tabla de Legajos\n+document.addEventListener('DOMContentLoaded', function() {\n+\n+    document.getElementById('cargos').addEventListener('change', function () {\n+        getLegajos();\n+        //COINCIDENCIAS\n+        //document.getElementById('divCoincidencias').classList.remove('hidden');\n+        //getCoincidencias(clienteSeleccionado, cargoSeleccionado);\n+    });\n+\n+    document.getElementById('clientes').addEventListener('change', function () {\n+        const clienteLeg = document.getElementById('clientes').value;\n+        getCargos(clienteLeg);\n+    });\n+\n+\n+     // Evento de cambio de fecha de emisión\n+     document.getElementById('fecha_emision').addEventListener('change', function () {\n+        const fechaEmision = document.getElementById('fecha_emision').value;\n+        if (fechaEmision) {\n+            // Calculamos la fecha de caducidad\n+            const fechaCalculada = calcularFechaCaducidad(fechaEmision);\n+            document.getElementById('fecha_caducidad').value = fechaCalculada; // Llenamos la fecha de caducidad\n+        }\n+    });\n+});\n+\n+// Función para asignar nombre a la card de documentos\n+function updateCardTitle(nombrePersona) {\n+    const cardTitle = document.querySelector('.nombrePersDocs');\n+    cardTitle.textContent = `Folios de ${nombrePersona}`;\n+    const cardTitleLeg = document.querySelector('.nombrePersLeg');\n+    cardTitleLeg.textContent = `Legajos para ${nombrePersona}`;\n+}\n+\n+document.getElementById(\"buscarPersonal\").addEventListener(\"keyup\", function () {\n+    let valor = this.value.toLowerCase().trim();\n+    tblPersonas.setFilter([\n+        [\n+            { field: \"CODI_PERS\", type: 'like',  value: valor },\n+            { field: \"personal\", type: 'like',  value: valor },\n+            { field: \"nroDoc\", type: 'like', value: valor },\n+            { field: \"sucursal\", type: 'like', value: valor },\n+            { field: \"col\", type: 'like', value: valor },\n+        ]\n+    ]);\n+\n+    // Guardar el valor para usarlo tras cambios de página\n+    tblPersonas._ultimoFiltro = valor;\n+\n+    setTimeout(() => resaltarTexto(valor), 10);\n+\n+});\n+\n+document.getElementById(\"buscarFolio\").addEventListener(\"keyup\", function () {\n+    let valor = this.value.toLowerCase().trim();\n+    tblDocs.setFilter([\n+        [\n+            { field: \"documento\", type: 'like',  value: valor },\n+        ]\n+    ]);\n+\n+    // Guardar el valor para usarlo tras cambios de página\n+    //tblPersonas._ultimoFiltro = valor;\n+\n+    //setTimeout(() => resaltarTexto(valor), 10);\n+\n+});\n+\n+\n+//Función para resaltar el texto del que se hace la búsqueda\n+function resaltarTexto(valor){\n+    tblPersonas.getRows().forEach(row => {\n+        row.getElement().querySelectorAll(\".tabulator-cell\").forEach((cell, i, cells) => {\n+            if (i === cells.length - 1) return; // excluir última columna\n+\n+            const text = cell.textContent;\n+            if (valor && text.toLowerCase().includes(valor)) {\n+                const regex = new RegExp(`(${valor})`, \"gi\");\n+                cell.innerHTML = text.replace(regex, \"<span class='bg-warning/25'>$1</span>\");\n+            } else {\n+                cell.innerHTML = text;\n+            }\n+        });\n+    });\n+};\n+\n+// Cada vez que se renderiza una página en la tabla de personal\n+tblPersonas.on(\"renderComplete\", function () {\n+    if (tblPersonas._ultimoFiltro) {\n+        resaltarTexto(tblPersonas._ultimoFiltro);\n+    }\n+});\n+\n+// Función para calcular la fecha de caducidad\n+function calcularFechaCaducidad(fechaEmision) {\n+    const periodoVigencia = parseInt(document.getElementById('meses').value);\n+    if(periodoVigencia > 1){\n+        const fecha = new Date(fechaEmision);\n+        fecha.setMonth(fecha.getMonth() + periodoVigencia);\n+        const anio = fecha.getFullYear();\n+        const mes = ('0' + (fecha.getMonth() + 1)).slice(-2);\n+        const dia = ('0' + fecha.getDate()).slice(-2);\n+        return `${anio}-${mes}-${dia}`;\n+    }\n+}\n+\n+//Función para limpia los campos del modal\n+function limpiarModal(){\n+    document.getElementById('fecha_emision').value=\"\";\n+    document.getElementById('fecha_caducidad').value=\"\";\n+\n+    window.archivosSeleccionados = [];\n+    //document.getElementById('cantArchivos').value=\"\";\n+    document.getElementById('listaArchivos').innerHTML='';\n+    document.getElementById('archivoInput').value='';\n+}\n+\n+//========================================== DATA CON AXIOS ==========================================//\n+// Función para obtener los folios por persona\n+function getDocsObligatorios(codigo){\n+    axios.get(`${ VITE_URL_APP }/api/get-documentos/${codigo}`)\n+    .then(response => {\n+        tblDocs.setData(response.data);\n+        // Aplicar filtro \"PRINCIPAL\" por defecto después de cargar los datos\n+        filterTableByTipoFolio();\n+    })\n+    .catch(error => {\n+        console.error(\"Error al obtener los datos:\", error);\n+    });\n+}\n+// Función para obtener el listados de personas\n+function getPersonal(){\n+    axios.get(`${ VITE_URL_APP }/api/get-personal`)\n+    .then(response => {\n+        const datosTabla = response.data;\n+        tblPersonas.setData(datosTabla);\n+\n+    })\n+    .catch(error => {\n+        console.error(\"Hubo un error:\", error);\n+    });\n+}\n+// Función para obtener los legajos\n+function getLegajos() {\n+    tblLegajos.clearData();\n+    document.getElementById('tblDocsLegajo').classList.remove('hidden');\n+    const cliente = document.getElementById('clientes').value;\n+    const cargo = document.getElementById('cargos').value;\n+    const codigoPer = document.getElementById('codPersonal').value;\n+    axios.get(`${ VITE_URL_APP }/api/get-legajos`, {\n+        params: {\n+            cliente: cliente,\n+            cargo: cargo,\n+            codigo: codigoPer\n+        }\n+    })\n+    .then(function (response) {\n+        tblLegajos.clearData();\n+        tblLegajos.setData(response.data);\n+    })\n+    .catch(function (error) {\n+        console.error(\"Error al obtener los legajos:\", error);\n+    });\n+};\n+\n+// Función para obtener los cargos con legajos\n+function getCargos(clienteLeg) {\n+    axios.get(`${ VITE_URL_APP }/api/get-cargos`, {\n+        params: {\n+            cliente: clienteLeg,\n+        }\n+    })\n+    .then(function (response) {\n+        const select = document.getElementById(\"cargos\");\n+        select.innerHTML = '<option disabled selected>-Seleccionar-</option>';\n+        response.data.forEach(cargo => {\n+            const option = document.createElement(\"option\");\n+            option.value = cargo.codigo;\n+            option.textContent = cargo.nombre;\n+            select.appendChild(option);\n+        })\n+    })\n+    .catch(function (error) {\n+        console.error(\"Error al obtener los legajos:\", error);\n+    });\n+};\n+\n+// Función para obtener las coincidencias\n+function getCoincidencias(cliente, cargo) {\n+    axios.get(`${ VITE_URL_APP }/api/get-coincidencias`, {\n+        params: {\n+            cliente: cliente,\n+            cargo: cargo\n+        }\n+    })\n+    .then(response => {\n+        tblPersonasCN.setData(response.data);\n+    })\n+    .catch(error => {\n+        console.error(\"Hubo un error:\", error);\n+    });\n+};\n+\n+\n+\n+//================================ GUARDAR LOS DATOS POR AXIOS ================================//\n+document.getElementById('formFolioPersonal').addEventListener('submit', function(event) {\n+    event.preventDefault();\n+    var fechaEmision = document.getElementById('fecha_emision').value;\n+    var fechaCaducidad = document.getElementById('fecha_caducidad').value;\n+    var codigoPer = document.getElementById('codPersonal').value;\n+    var codFolio = document.getElementById('codFolio').value;\n+\n+    var formData = new FormData();\n+\n+    formData.append('fecha_emision', fechaEmision);\n+    formData.append('fecha_caducidad', fechaCaducidad);\n+    formData.append('codFolio', codFolio);\n+    formData.append('codPersonal', codigoPer);\n+\n+    /*for (let i = 0; i < archivosSeleccionados.length; i++) {\n+        formData.append('imagenes[]', archivosSeleccionados[i]);\n+    }*/\n+\n+    // Agrega los archivos seleccionados (si hay)\n+    const archivos = document.querySelector('#input_archivos').files;\n+    for (let i = 0; i < archivos.length; i++) {\n+        formData.append('archivos[]', archivos[i]); // si son múltiples\n+    }\n+    /*\n+    let files = formData.getAll('archivos[]');\n+    files.forEach((file, index) => {\n+        console.log(`Archivo ${index + 1}:`, file.name, file.type, file.size);\n+    });\n+    */\n+\n+    \n+\n+    if (fechaEmision) {\n+        // Enviar los datos al servidor usando Axios\n+        axios.post(`${ VITE_URL_APP }/api/save_folio_persona`, formData, {\n+            headers: {\n+                'Content-Type': 'multipart/form-data' // Es necesario para enviar archivos\n+            }\n+        })\n+        .then(function(response) {\n+            document.getElementById('btn-modal-docs-close').click();\n+            getDocsObligatorios(codigoPer);\n+            getLegajos();\n+            limpiarModal();\n+        })\n+        .catch(function(error) {\n+            console.error('Error al guardar los datos:', error);\n+        });\n+    }\n+    \n+});\n+\n+\n+\n+\n+\n+\n"
                }
            ],
            "date": 1753328689768,
            "name": "Commit-0",
            "content": "\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport {TabulatorFull as Tabulator} from 'tabulator-tables';\nimport 'tabulator-tables/dist/css/tabulator_simple.min.css';\n\ngetPersonal();\nwindow.archivosSeleccionados = [];\n\n//Tabla de Personas\nconst tblPersonas = new Tabulator(\"#tblPersonas\", {\n    height: \"100%\",\n    layout:\"fitData\",\n    responsiveLayout:\"collapse\",\n    pagination: true,\n    paginationSize: 10,\n    rowHeader:{formatter:\"responsiveCollapse\", width:30, minWidth:30, hozAlign:\"center\", resizable:false, headerSort:false},\n    locale: \"es\",\n    langs: {\n        \"es\": {\n            \"pagination\": {\n                \"first\": \"Primero\",\n                \"first_title\": \"Primera Página\",\n                \"last\": \"Último\",\n                \"last_title\": \"Última Página\",\n                \"prev\": \"Anterior\",\n                \"prev_title\": \"Página Anterior\",\n                \"next\": \"Siguiente\",\n                \"next_title\": \"Página Siguiente\",\n                \"all\": \"Todo\"\n            },\n            \"headerFilters\": {\n                \"default\": \"Filtrar...\", // Texto en filtros de encabezado\n            },\n            \"ajax\": {\n                \"loading\": \"Cargando datos...\",\n                \"error\": \"Error al cargar datos\"\n            },\n            \"data\": {\n                \"empty\": \"No hay datos disponibles\"\n            }\n        }\n    },\n    columns:[\n        {title:\"Cód.\", field:\"CODI_PERS\", hozAlign:\"center\", width: '10%'},\n        {title:\"Personal\", field:\"personal\", hozAlign:\"left\", width: '30%'},\n        {title:\"Nro Doc.\", field:\"nroDoc\", hozAlign:\"center\", width: '15%'},\n        {title:\"Sucursal\", field:\"sucursal\", hozAlign:\"center\", width: '20%'},\n        {title: \"Acciones\", field: \"acciones\", width: '25%', hozAlign: \"center\", headerSort: false,\n            formatter: function(cell, formatterParams, onRendered) {\n                var docsBtn = `<button type=\"button\" class=\"btn rounded-full docs-btn bg-success/25 text-success hover:bg-success hover:text-white\" >Folios</button>`;\n                var legajoBtn = `<button type=\"button\" class=\"btn rounded-full legajo-btn bg-warning/25 text-warning hover:bg-warning hover:text-white\">Legajos</button>`;\n\n                return docsBtn + ' ' + legajoBtn;\n            },\n            cellClick: function(e, cell) {\n                var registro = cell.getRow().getData();\n                var codigo = registro.CODI_PERS;\n                var persona = registro.personal;\n                document.getElementById('codPersonal').value = codigo;\n\n                getDocsObligatorios(codigo);\n\n                if (e.target.classList.contains('docs-btn')) {\n                    document.getElementById('dataDocs').classList.remove('hidden');\n                    document.getElementById('dataDocsLeg').classList.add('hidden');\n                    document.getElementById('divCoincidencias').classList.add('hidden');\n                }else{\n                    document.getElementById('dataDocsLeg').classList.remove('hidden');\n                    document.getElementById('dataDocs').classList.add('hidden');\n\n                }\n\n                updateCardTitle(persona);\n            }\n        },\n    ],\n});\n\n\n//Tabla de Folios\nconst tblDocs = new Tabulator(\"#tblDocs\", {\n    height: \"100%\",\n    layout:\"fitDataFill\",\n    responsiveLayout: \"collapse\",\n    pagination: true,\n    paginationSize: 10,\n    locale: \"es\",\n    langs: {\n        \"es\": {\n            \"pagination\": {\n                \"first\": \"Primero\",\n                \"first_title\": \"Primera Página\",\n                \"last\": \"Último\",\n                \"last_title\": \"Última Página\",\n                \"prev\": \"Anterior\",\n                \"prev_title\": \"Página Anterior\",\n                \"next\": \"Siguiente\",\n                \"next_title\": \"Página Siguiente\",\n                \"all\": \"Todo\"\n            },\n            \"headerFilters\": {\n                \"default\": \"Filtrar...\",\n            },\n            \"ajax\": {\n                \"loading\": \"Cargando datos...\",\n                \"error\": \"Error al cargar datos\"\n            },\n            \"data\": {\n                \"empty\": \"No hay datos disponibles\"\n            }\n        }\n    },\n    columns: [\n        { title: \"Folio\", field: \"documento\", hozAlign: \"left\", width: '40%' },\n        { title: \"Emision\", field: \"fecha_emision\", hozAlign: \"center\", width: '20%',\n            formatter: function(cell, formatterParams){\n                var emision = cell.getValue();\n                if (emision === null){\n                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n                }else{\n                    return emision;\n                }\n            }\n        },\n        { title: \"Caducidad\", field: \"fecha_caducidad\", hozAlign: \"center\", width: '20%',\n            formatter: function(cell, formatterParams) {\n                var vigente = cell.getRow().getData().vigente;\n                var fechaCaducidad = cell.getValue();\n                if (vigente == 1) {\n                    return `<span class=\"text-vigente-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad}</span>`\n                } else if (vigente == 0) {\n                    return `<span class=\"text-vencido-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad}</span>`\n                } else {\n                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n                }\n            }\n         },\n        { title: \"Acciones\", field: \"acciones\", hozAlign: \"center\", width: '20%', headerSort: false,\n            formatter: function(cell, formatterParams, onRendered) {\n                // var filePath = cell.getRow().getData().ruta_archivo;\n                // var url = filePath;\n                // if(filePath){\n                //     var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"btn rounded-full view-btn bg-info/25 text-info hover:bg-info hover:text-white\"><i class=\"fa fa-eye view-btn\"></i></a>`;\n                // }else{\n                //     var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"pointer-events-none btn rounded-full view-btn bg-warning/25 text-warning-opa bg-gray-200 hover:bg-gray-200\"><i class=\"fa fa-eye\"></i></a>`;\n                // }\n\n                let chargeBtn = `<button type=\"button\"\n                class=\"btn rounded-full charge-btn bg-success/25 text-success hover:bg-success hover:text-white\">\n                    <i class=\"fa fa-cloud-upload charge-btn\"></i>\n                </button>`;\n\n                let viewDocBtn = `<button type=\"button\"\n                class=\"btn rounded-full viewdoc-btn bg-warning/25 text-warning hover:bg-warning hover:text-white\">\n                    <i class=\"fa fa-eye viewdoc-btn\"></i>\n                </button>`;\n\n                return chargeBtn + ' ' + viewDocBtn;\n            },\n            cellClick: function(e, cell) {\n                if (e.target.classList.contains('charge-btn')) {\n                    const documento = cell.getRow().getData().documento;\n                    const periodo = cell.getRow().getData().periodo;\n                    const cantidad_hojas = cell.getRow().getData().cantidad_hojas;\n                    const meses = cell.getRow().getData().meses;\n                    const codFolio = cell.getRow().getData().codFolio;\n                    const vencimiento = cell.getRow().getData().vencimiento;\n\n                    document.querySelector('#modal-file h3.modal-title').textContent = `Documento: ${documento}`;\n                    document.querySelector('#txtPeriodo').textContent = `${periodo}`;\n                    document.querySelector('#txtCantHojas').textContent = `${cantidad_hojas}`;\n                    document.getElementById('cantArchivos').value = cantidad_hojas;\n                    document.getElementById('codFolio').value = codFolio;\n                    document.getElementById('meses').value = meses;\n\n                    // Verificar si vencimiento es 0 y ocultar el campo de caducidad\n                    if (vencimiento == 0) {\n                        document.getElementById('divCaducidad').classList.add('hidden');\n                        document.getElementById('fecha_caducidad').removeAttribute('required');\n                    } else {\n                        document.getElementById('divCaducidad').classList.remove('hidden');\n                        document.getElementById('fecha_caducidad').setAttribute('required', 'required');\n                    };\n\n                    limpiarModal();\n                    document.getElementById('btn-modal-docs').click();\n                }\n\n                if(e.target.classList.contains('viewdoc-btn')){\n                    const dataTbl = cell.getRow().getData();\n                    const codFolio = dataTbl.codFolio;\n                    const codPersonal = dataTbl.codPersonal;\n                    const nombre = dataTbl.personal;\n                    const documento = dataTbl.documento;\n\n                    axios.get(`${ VITE_URL_APP }/api/get-view-documents/${codPersonal}/${codFolio}`)\n                    .then(response => {\n                        console.log(response);\n\n                        if(response.data.success !== true){\n                            Swal.fire({\n                                title: \"No se encontro documentos válidos\",\n                                icon: \"info\"\n                            });\n                            return;\n                        }\n\n                        document.querySelector('#modal-view-docs .modal-title').textContent = `${nombre}`;\n                        document.querySelector('#modal-view-docs #txtDocSelec').textContent = `${documento}`;\n\n                        const rutas = response.data.rutas; // ← tu array del backend\n                        const visor = document.getElementById('visorDocs');\n\n                        visor.innerHTML = '';\n\n                        rutas.forEach(ruta => {\n                            visor.insertAdjacentHTML('beforeend', `\n                                <img src=\"http://${ruta}\" class=\"w-full max-w-[700px] mb-3 rounded-md\" />\n                            `);\n                        });\n\n                        document.getElementById('btn-modal-view-docs').click();\n                    })\n                    .catch(error => {\n                        console.error(\"Error al obtener los datos:\", error);\n                        Swal.fire({\n                            title: \"Problema al encontrar documentos\",\n                            icon: \"error\"\n                        });\n                    });\n                }\n            },\n            rowFormatter: function(row) {\n                row.getElement().classList.add(\"hover:bg-indigo-500\");  // Cambia \"indigo-500\" al color que desees\n            }\n        },\n    ],\n});\n\n\n\n//Tabla de Documentos LEGAJOS\nconst tblLegajos = new Tabulator(\"#tblDocsLegajo\", {\n    height: \"100%\",\n    layout: \"fitDataFill\",\n    responsiveLayout: \"collapse\",\n    columns: [\n        { title: \"Folio\", field: \"documento\", hozAlign: \"left\", width: '40%' },\n        { title: \"Emision\", field: \"fecha_emision\", hozAlign: \"center\", width: '20%',\n            formatter: function(cell, formatterParams){\n                var emision = cell.getValue();\n                if (emision === null){\n                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n                }else{\n                    return emision;\n                }\n            }\n        },\n        { title: \"Caducidad\", field: \"fecha_caducidad\", hozAlign: \"center\", width: '20%',\n            formatter: function(cell, formatterParams) {\n                var vigente = cell.getRow().getData().vigente;\n                var fechaCaducidad = cell.getValue();\n                if (vigente == 1) {\n                    return `<span class=\"text-vigente-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad}</span>`\n                } else if (vigente == 0) {\n                    return `<span class=\"text-vencido-800 font-bold\">${fechaCaducidad == null ? '--' : fechaCaducidad }</span>`\n                } else {\n                    return '<span class=\"rounded-full bg-warning/25\">&nbsp;&nbsp;PENDIENTE&nbsp;&nbsp;</span>';\n                }\n            }\n         },\n        { title: \"Acciones\", field: \"accionesy\", hozAlign: \"center\", width: '20%', headerSort: false,\n            formatter: function(cell, formatterParams, onRendered) {\n                var filePath = cell.getRow().getData().ruta_archivo;\n                var url = '/storage/' + filePath; // Concatenar el link a la ruta del archivo\n                if(filePath){\n                    var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"btn rounded-full view-btn bg-info/25 text-info hover:bg-info hover:text-white\"><i class=\"fa fa-eye view-btn\"></i></a>`;\n                }else{\n                    var viewBtn = `<a href=\"${url}\" target=\"_blank\" class=\"pointer-events-none btn rounded-full view-btn bg-warning/25 text-warning-opa bg-gray-200 hover:bg-gray-200\"><i class=\"fa fa-eye\"></i></a>`;\n                }\n                var chargeBtnLeg = `<button type=\"button\" class=\"btn rounded-full charge-btn-leg bg-success/25 text-success hover:bg-success hover:text-white\"><i class=\"fa fa-cloud-upload charge-btn-leg\"></i></button>`;\n                return chargeBtnLeg+' '+viewBtn;\n            },\n            cellClick: function(e, cell) {\n                if (e.target.classList.contains('charge-btn-leg')) {\n                    const documento = cell.getRow().getData().documento;\n                    const periodo = cell.getRow().getData().periodo;\n                    const meses = cell.getRow().getData().meses;\n                    const codFolio = cell.getRow().getData().codFolio;\n                    const vencimiento = cell.getRow().getData().vencimiento;\n\n                    document.querySelector('#modal-file h3.modal-title').textContent = `Documento: ${documento}`;\n                    document.querySelector('#txtPeriodo').textContent = `${periodo}`;\n                    document.getElementById('codFolio').value = codFolio;\n                    document.getElementById('meses').value = meses;\n\n                    // Verificar si vencimiento es 0 y ocultar el campo de caducidad\n                    if (vencimiento == 0) {\n                        document.getElementById('divCaducidad').classList.add('hidden');  // Ocultar el div\n                        document.getElementById('fecha_caducidad').removeAttribute('required');  // Quitar el atributo required\n                    } else {\n                        document.getElementById('divCaducidad').classList.remove('hidden');  // Mostrar el div\n                        document.getElementById('fecha_caducidad').setAttribute('required', 'required');  // Asegurarse de que sea requerido\n                    };\n\n                    document.getElementById('btn-modal-docs').click();\n                }\n            }\n        },\n    ]\n});\n\n\n//Tabla de Coincidencias\nconst tblPersonasCN = new Tabulator(\"#tblPersonasCN\", {\n    height: \"100%\",\n    layout:\"fitDataFill\",\n    responsiveLayout: \"collapse\",\n    columns: [\n        {title:\"Código\", field:\"CODI_PERS\", hozAlign:\"center\", width: '10%'},\n        {title:\"Personal\", field:\"personal\", hozAlign:\"left\", width: '30%'},\n        {title:\"Nro Documento\", field:\"nroDoc\", hozAlign:\"center\", width: '15%'},\n        {title:\"Sucursal\", field:\"sucursal\", hozAlign:\"center\", width: '18%'},\n    ],\n});\n\n// Función para actualizar la tabla de personas por SUCURSAL\nfunction filtroXSucursal() {\n    const sucursalSeleccionada = document.getElementById('sucursal').value;\n    if (!sucursalSeleccionada) {\n        tblPersonas.clearFilter();\n    } else if(sucursalSeleccionada == 'TODOS'){\n        tblPersonas.clearFilter();\n    } else{\n        tblPersonas.setFilter(\"sucursal\",\"=\",sucursalSeleccionada);\n    }\n}\ndocument.getElementById('sucursal').addEventListener('change', filtroXSucursal);\n\n// Función para actualizar la tabla de folios por TIPO\nfunction filterTableByTipoFolio() {\n    const tipoFolioSeleccionado = document.querySelector('input[name=\"tipo_folio\"]:checked').value;\n    tblDocs.setFilter(\"tipo_folio\", \"=\", tipoFolioSeleccionado);\n}\n\n// Escuchar los cambios en los radio buttons\ndocument.querySelectorAll('input[name=\"tipo_folio\"]').forEach(radio => {\n    radio.addEventListener('change', filterTableByTipoFolio);\n});\n\n\n//Tabla de Legajos\ndocument.addEventListener('DOMContentLoaded', function() {\n\n    document.getElementById('cargos').addEventListener('change', function () {\n        getLegajos();\n        //COINCIDENCIAS\n        //document.getElementById('divCoincidencias').classList.remove('hidden');\n        //getCoincidencias(clienteSeleccionado, cargoSeleccionado);\n    });\n\n    document.getElementById('clientes').addEventListener('change', function () {\n        const clienteLeg = document.getElementById('clientes').value;\n        getCargos(clienteLeg);\n    });\n\n\n     // Evento de cambio de fecha de emisión\n     document.getElementById('fecha_emision').addEventListener('change', function () {\n        const fechaEmision = document.getElementById('fecha_emision').value;\n        if (fechaEmision) {\n            // Calculamos la fecha de caducidad\n            const fechaCalculada = calcularFechaCaducidad(fechaEmision);\n            document.getElementById('fecha_caducidad').value = fechaCalculada; // Llenamos la fecha de caducidad\n        }\n    });\n});\n\n// Función para asignar nombre a la card de documentos\nfunction updateCardTitle(nombrePersona) {\n    const cardTitle = document.querySelector('.nombrePersDocs');\n    cardTitle.textContent = `Folios de ${nombrePersona}`;\n    const cardTitleLeg = document.querySelector('.nombrePersLeg');\n    cardTitleLeg.textContent = `Legajos para ${nombrePersona}`;\n}\n\ndocument.getElementById(\"buscarPersonal\").addEventListener(\"keyup\", function () {\n    let valor = this.value.toLowerCase().trim();\n    tblPersonas.setFilter([\n        [\n            { field: \"CODI_PERS\", type: 'like',  value: valor },\n            { field: \"personal\", type: 'like',  value: valor },\n            { field: \"nroDoc\", type: 'like', value: valor },\n            { field: \"sucursal\", type: 'like', value: valor },\n            { field: \"col\", type: 'like', value: valor },\n        ]\n    ]);\n\n    // Guardar el valor para usarlo tras cambios de página\n    tblPersonas._ultimoFiltro = valor;\n\n    setTimeout(() => resaltarTexto(valor), 10);\n\n});\n\ndocument.getElementById(\"buscarFolio\").addEventListener(\"keyup\", function () {\n    let valor = this.value.toLowerCase().trim();\n    tblDocs.setFilter([\n        [\n            { field: \"documento\", type: 'like',  value: valor },\n        ]\n    ]);\n\n    // Guardar el valor para usarlo tras cambios de página\n    //tblPersonas._ultimoFiltro = valor;\n\n    //setTimeout(() => resaltarTexto(valor), 10);\n\n});\n\n\n//Función para resaltar el texto del que se hace la búsqueda\nfunction resaltarTexto(valor){\n    tblPersonas.getRows().forEach(row => {\n        row.getElement().querySelectorAll(\".tabulator-cell\").forEach((cell, i, cells) => {\n            if (i === cells.length - 1) return; // excluir última columna\n\n            const text = cell.textContent;\n            if (valor && text.toLowerCase().includes(valor)) {\n                const regex = new RegExp(`(${valor})`, \"gi\");\n                cell.innerHTML = text.replace(regex, \"<span class='bg-warning/25'>$1</span>\");\n            } else {\n                cell.innerHTML = text;\n            }\n        });\n    });\n};\n\n// Cada vez que se renderiza una página en la tabla de personal\ntblPersonas.on(\"renderComplete\", function () {\n    if (tblPersonas._ultimoFiltro) {\n        resaltarTexto(tblPersonas._ultimoFiltro);\n    }\n});\n\n// Función para calcular la fecha de caducidad\nfunction calcularFechaCaducidad(fechaEmision) {\n    const periodoVigencia = parseInt(document.getElementById('meses').value);\n    if(periodoVigencia > 1){\n        const fecha = new Date(fechaEmision);\n        fecha.setMonth(fecha.getMonth() + periodoVigencia);\n        const anio = fecha.getFullYear();\n        const mes = ('0' + (fecha.getMonth() + 1)).slice(-2);\n        const dia = ('0' + fecha.getDate()).slice(-2);\n        return `${anio}-${mes}-${dia}`;\n    }\n}\n\n//Función para limpia los campos del modal\nfunction limpiarModal(){\n    document.getElementById('fecha_emision').value=\"\";\n    document.getElementById('fecha_caducidad').value=\"\";\n\n    window.archivosSeleccionados = [];\n    //document.getElementById('cantArchivos').value=\"\";\n    document.getElementById('listaArchivos').innerHTML='';\n    document.getElementById('archivoInput').value='';\n}\n\n//========================================== DATA CON AXIOS ==========================================//\n// Función para obtener los folios por persona\nfunction getDocsObligatorios(codigo){\n    axios.get(`${ VITE_URL_APP }/api/get-documentos/${codigo}`)\n    .then(response => {\n        tblDocs.setData(response.data);\n        // Aplicar filtro \"PRINCIPAL\" por defecto después de cargar los datos\n        filterTableByTipoFolio();\n    })\n    .catch(error => {\n        console.error(\"Error al obtener los datos:\", error);\n    });\n}\n// Función para obtener el listados de personas\nfunction getPersonal(){\n    axios.get(`${ VITE_URL_APP }/api/get-personal`)\n    .then(response => {\n        const datosTabla = response.data;\n        tblPersonas.setData(datosTabla);\n\n    })\n    .catch(error => {\n        console.error(\"Hubo un error:\", error);\n    });\n}\n// Función para obtener los legajos\nfunction getLegajos() {\n    tblLegajos.clearData();\n    document.getElementById('tblDocsLegajo').classList.remove('hidden');\n    const cliente = document.getElementById('clientes').value;\n    const cargo = document.getElementById('cargos').value;\n    const codigoPer = document.getElementById('codPersonal').value;\n    axios.get(`${ VITE_URL_APP }/api/get-legajos`, {\n        params: {\n            cliente: cliente,\n            cargo: cargo,\n            codigo: codigoPer\n        }\n    })\n    .then(function (response) {\n        tblLegajos.clearData();\n        tblLegajos.setData(response.data);\n    })\n    .catch(function (error) {\n        console.error(\"Error al obtener los legajos:\", error);\n    });\n};\n\n// Función para obtener los cargos con legajos\nfunction getCargos(clienteLeg) {\n    axios.get(`${ VITE_URL_APP }/api/get-cargos`, {\n        params: {\n            cliente: clienteLeg,\n        }\n    })\n    .then(function (response) {\n        const select = document.getElementById(\"cargos\");\n        select.innerHTML = '<option disabled selected>-Seleccionar-</option>';\n        response.data.forEach(cargo => {\n            const option = document.createElement(\"option\");\n            option.value = cargo.codigo;\n            option.textContent = cargo.nombre;\n            select.appendChild(option);\n        })\n    })\n    .catch(function (error) {\n        console.error(\"Error al obtener los legajos:\", error);\n    });\n};\n\n// Función para obtener las coincidencias\nfunction getCoincidencias(cliente, cargo) {\n    axios.get(`${ VITE_URL_APP }/api/get-coincidencias`, {\n        params: {\n            cliente: cliente,\n            cargo: cargo\n        }\n    })\n    .then(response => {\n        tblPersonasCN.setData(response.data);\n    })\n    .catch(error => {\n        console.error(\"Hubo un error:\", error);\n    });\n};\n\n\n\n//================================ GUARDAR LOS DATOS POR AXIOS ================================//\ndocument.getElementById('formFolioPersonal').addEventListener('submit', function(event) {\n    event.preventDefault();\n    var fechaEmision = document.getElementById('fecha_emision').value;\n    var fechaCaducidad = document.getElementById('fecha_caducidad').value;\n    var codigoPer = document.getElementById('codPersonal').value;\n    var codFolio = document.getElementById('codFolio').value;\n\n    var formData = new FormData();\n\n    formData.append('fecha_emision', fechaEmision);\n    formData.append('fecha_caducidad', fechaCaducidad);\n    formData.append('codFolio', codFolio);\n    formData.append('codPersonal', codigoPer);\n\n    /*for (let i = 0; i < archivosSeleccionados.length; i++) {\n        formData.append('imagenes[]', archivosSeleccionados[i]);\n    }*/\n\n    // Agrega los archivos seleccionados (si hay)\n    const archivos = document.querySelector('#input_archivos').files;\n    for (let i = 0; i < archivos.length; i++) {\n        formData.append('archivos[]', archivos[i]); // si son múltiples\n    }\n\n    if (fechaEmision /*&& fechaCaducidad*/) {\n        // Enviar los datos al servidor usando Axios\n        axios.post(`${ VITE_URL_APP }/api/save_folio_persona`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data' // Es necesario para enviar archivos\n            }\n        })\n        .then(function(response) {\n            document.getElementById('btn-modal-docs-close').click();\n            getDocsObligatorios(codigoPer);\n            getLegajos();\n            limpiarModal();\n        })\n        .catch(function(error) {\n            console.error('Error al guardar los datos:', error);\n        });\n    }\n});\n\n\n\n\n\n\n"
        }
    ]
}